package com.bashiju.www.service.user.impl;

import java.util.Date;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bashiju.api.RedisGetIdServiceApi;
import com.bashiju.wutils.cookie.CookieUtils;
import com.bashiju.wutils.exception.BusinessException;
import com.bashiju.wutils.log.SystemServiceLog;
import com.bashiju.www.global.WebGlobal;
import com.bashiju.www.mapper.CustCustomerMapper;
import com.bashiju.www.pojo.service.user.CustCustomerEntity;
import com.bashiju.www.pojo.service.user.CustCustomerParam;
import com.bashiju.www.service.comm.ICacheService;
import com.bashiju.www.service.comm.RandomValidateCode;
import com.bashiju.www.service.user.CustCustomerService;

@Service
@SystemServiceLog(sourceType="注册用户管理")
public class CustCustomerServiceImpl  implements CustCustomerService {

	@Autowired
	CustCustomerMapper custCustomerMapper;
	@Autowired
	private RandomValidateCode randomValidateCode;
	@Autowired
	private ICacheService cacheService;
	@Autowired
	private RedisGetIdServiceApi redisGetIdServiceApi;
	
	/**
	 * @Description:  查询手机号码是否已存在
	 * @param mobile 手机号码
	 * @return: boolean
	 * @see com.bashiju.www.service.user.UserRegisterService#queryIsExistMobile(java.lang.String)
	 */
	@Override
	public boolean queryIsExistMobile(String mobile) {
		long result = custCustomerMapper.queryIsExistMobile(mobile);
		if(result>0)
			return true;//号码已存在
		return false;
	}

	/**
	 * @Description: 保存用户注册信息
	 * @param custCustomerParam 用戶输入参数
	 * @return: boolean
	 * @see  com.bashiju.www.service.user.UserRegisterService#saveCustCustomer(com.bashiju.www.pojo.service.user.CustCustomerParam) 
	 */
	
	@SuppressWarnings("unlikely-arg-type")
	@Override
	public boolean saveCustCustomer(CustCustomerParam custCustomerParam) {	
		if(StringUtils.isEmpty(custCustomerParam.toString()))
			throw new BusinessException("注册信息输入有误");
		//判断手机号码是否在数据库已存在
		boolean isExist = this.queryIsExistMobile(custCustomerParam.getMobile());
		if(isExist)
			throw new BusinessException("手机号码已注册");
		else {
			//注册
			if(!"".equals(custCustomerParam)) {
				CustCustomerEntity custCustomerEntity = new CustCustomerEntity();
				custCustomerEntity.setMobile(custCustomerParam.getMobile());
				custCustomerEntity.setName(custCustomerParam.getName());
				custCustomerEntity.setPassword(custCustomerParam.getPassword());
				custCustomerEntity.setSolt(custCustomerParam.getSolt());
				custCustomerEntity.setSex("");
				custCustomerEntity.setProviceCode("");
				custCustomerEntity.setCityCode("");
				custCustomerEntity.setAreaCode("");
				custCustomerEntity.setBirthday(new Date());
				custCustomerEntity.setAddress("");
				custCustomerEntity.setIsValid("1");
				custCustomerEntity.setAddTime(new Date());
				//从redis获取短信验证码
				String code = cacheService.getCache(custCustomerParam.getMobile());
				//判断短信验证码是否正确
				if(code.equals(custCustomerParam.getSolt())) {
					//保存用户信息
					long result = 	custCustomerMapper.saveCustCustomer(custCustomerEntity);
					if(result>0)
						return true;
					return false;
				}else
					throw new BusinessException("验证码有误");
			}else
				return false;
		}	
	}
	/**
	 * @Description:  修改用户信息
	 * @param paramMap 修改参数
	 * @return: boolean
	 * @see  com.bashiju.www.service.user.UserRegisterService#updateCustCustomer(java.util.Map)    
	 */
	@Override
	public boolean updateCustCustomer(Map<Object, Object> paramMap) {
		if(StringUtils.isEmpty(paramMap.toString()))
			throw new BusinessException("修改参数不能为空");
 		if(StringUtils.isEmpty(paramMap.get("mobile").toString())&&"".equals(paramMap.get("mobile").toString()))
			throw new BusinessException("手机号码不能为空");
		if(StringUtils.isEmpty(paramMap.get("solt").toString())&&"".equals(paramMap.get("solt").toString()))
			throw new BusinessException("短息验证码不能为空");
		//redis获取短信验证码
		String code = cacheService.getCache(paramMap.get("mobile").toString());
		//验证页面输入短信验证是否正确
		if(code.equals(paramMap.get("solt").toString())) {
			long rt= custCustomerMapper.updateCustCustomer(paramMap);
			if(rt>0)
				return true;
			return false;
		}else
			throw new BusinessException("短信验证码有误");
	}	
		
	/**
	 * @Description:  用户账号密码登录
	 * @param mobile 电话号码
	 * @param password 密码
	 * @return: boolean
	 * @see com.bashiju.www.service.user.CustCustomerService#customerLogin(java.lang.String, java.lang.String)   
	 */
	@Override
	public boolean customerLogin(HttpServletRequest request,HttpServletResponse response,String mobile, String password,String validateCode) {
			if(StringUtils.isEmpty(validateCode))
				throw new BusinessException("验证码不能为空");
			if(StringUtils.isEmpty(mobile) && StringUtils.isEmpty(password))
				throw new BusinessException("账号或密码不能为空");
			//判断用户输入的验证码是否正确
			//redis验证码的取值
			 String randomCode	= cacheService.getCache(validateCode);
			if(validateCode.equals(randomCode)) {
				//获取用户信息
				Map<String,Object> custMap = custCustomerMapper.customerLogin(mobile, password);
				if(custMap.size()>0&&custMap!=null) {
					//用户名称
					String name = String.valueOf(custMap.get("name"));
					//用户id
					String id = String.valueOf(custMap.get("id"));
					//把用户信息存入cookies
					CookieUtils.setCookie(request, response, WebGlobal.CUSTOMER_LOGIN_COOKIES_NAME,name);
					CookieUtils.setCookie(request, response, WebGlobal.CUSTOMER_LOGIN_COOKIES_ID,id);
					return true;
				}
				throw new BusinessException("用户不存在,请重试");
			}
			throw new BusinessException("验证码有误");
	}
	
	/**
	 * <p>Title: check</p>   
	 * <p>Description: 图片验证码</p>   
	 * @param request
	 * @param response
	 * @see com.bashiju.www.service.user.CustCustomerService#check(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)
	 */
	@Override
	public String imageCheck(HttpServletRequest request,HttpServletResponse response) {
		//获取readis里的验证码的key,并存入r
		String randomCode =	randomValidateCode.getRedisKey(request, response);
		//根据key获取redis验证码的值
		String code =cacheService.getCache(randomCode);
		return code;
	}
	/**
	 * @Description:  发送手机验证码
	 * @param mobile 电话号码
	 * @return: String
	 * @see com.bashiju.www.service.user.CustCustomerService#sendMobileMsgVerfyCode(java.lang.String) 
	 */
	@Override
	public String sendMobileMsgVerfyCode(String mobile) {
		if(StringUtils.isEmpty(mobile))
			throw new BusinessException("手机号码不能为空");
		//发送短信验证码
		String mobileCode = redisGetIdServiceApi.getMsgAuthCode(mobile);
		return mobileCode;
	}

	/**   
	 * <p>Title: customerMobileLogin</p>   
	 * <p>Description: 短信登录</p>   
	 * @param mobile 电话号码
	 * @see com.bashiju.www.service.user.CustCustomerService#customerMobileLogin(java.lang.String)   
	 */
	
	@Override
	public boolean customerMobileLogin(HttpServletRequest request,HttpServletResponse response,String mobile,String solt) {
		if(StringUtils.isEmpty(solt))
			throw new BusinessException("短信验证码不能为空");
		//redis获取短信验证码
		String msgCode = cacheService.getCache(mobile);
		if(StringUtils.isEmpty(msgCode))
			throw new BusinessException("验证码失效，请重新发送");
		//判断验证码是否正确
		if(solt.equals(msgCode)) {
			//查询手机号是否已注册
			boolean isExist = this.queryIsExistMobile(mobile);
			if(isExist){
				//手机号码已存在,直接登录
				Map<String,Object> custInfo = custCustomerMapper.customerMobileLogin(mobile);
				String id = String.valueOf(custInfo.get("id"));
				String name = String.valueOf(custInfo.get("name"));
				//把id和name存在coolies
				CookieUtils.setCookie(request, response, WebGlobal.CUSTOMER_LOGIN_COOKIES_ID,id);
				CookieUtils.setCookie(request, response, WebGlobal.CUSTOMER_LOGIN_COOKIES_NAME,name);
				return true;
			}else {
				//未注册
				CustCustomerParam custCustomerParam = new CustCustomerParam();
				custCustomerParam.setPassword("123456");
				custCustomerParam.setName("游客");
				custCustomerParam.setMobile(mobile);
				custCustomerParam.setSolt(msgCode);
				this.saveCustCustomer(custCustomerParam);
				//登录
				Map<String,Object> cust = custCustomerMapper.customerMobileLogin(mobile);
				String id = String.valueOf(cust.get("id"));
				String name = String.valueOf(cust.get("name"));
				//把id和name存在coolies
				CookieUtils.setCookie(request, response, WebGlobal.CUSTOMER_LOGIN_COOKIES_ID,id);
				CookieUtils.setCookie(request, response, WebGlobal.CUSTOMER_LOGIN_COOKIES_NAME,name);
				return true;
			}
		}
		throw new BusinessException("验证码输入有误");
	}
	
}