/**  
 * All rights Reserved, Designed By www.bashiju.com
 * @Title:  CustomerPersonalCentralServiceImpl.java   
 * @Package com.bashiju.www.service.user.impl      
 * @author: zuoyuntao     
 * @date:   2018年8月2日 下午3:04:38   
 * @version V1.0 
 * @Copyright: 2018 www.bashiju.com Inc. All rights reserved. 
 * 注意：本内容仅限于云南巴士居网络服务公司内部传阅，禁止外泄以及用于其他的商业项目*/

package com.bashiju.www.service.user.impl;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bashiju.api.RedisGetIdServiceApi;
import com.bashiju.wutils.exception.BusinessException;
import com.bashiju.www.mapper.CustomerPersonalCentralMapper;
import com.bashiju.www.pojo.service.agent.Agent;
import com.bashiju.www.pojo.service.out.usercentral.CustomerConcernedHouseEntity;
import com.bashiju.www.pojo.service.out.usercentral.CustomerHouseTransitScheduleEntity;
import com.bashiju.www.pojo.service.out.usercentral.CustomerOwnerHouseEntity;
import com.bashiju.www.pojo.service.reservation.ReservationEntity;
import com.bashiju.www.pojo.service.reservation.ReservationParam;
import com.bashiju.www.pojo.service.user.CustCustomerEntity;
import com.bashiju.www.service.user.ICustomerConcernedHouseService;
import com.bashiju.www.service.user.ICustomerHouseTransitScheduleService;
import com.bashiju.www.service.user.ICustomerOwnerHouseService;
import com.bashiju.www.service.user.ICustomerPersonalCentralService;
import com.bashiju.www.tools.WebCommonTools;
import com.github.pagehelper.util.StringUtil;

/**
 * 个人中心服务
 * @ClassName:CustomerPersonalCentralServiceImpl
 * @Description:个人中心服务
 * @author:zuoyuntao
 * @date:2018年8月2日 下午3:04:38
 * @Copyright: 2018 www.bashiju.com Inc. All rights reserved.
 * 本内容仅限于云南巴士居网络服务公司内部传阅，禁止外泄以及用于其他的商业项目
 */
@Service
public class CustomerPersonalCentralServiceImpl implements ICustomerPersonalCentralService{
	/**
	 * 个人中心持久层接口
	 */
	@Autowired
	private CustomerPersonalCentralMapper mCustomerPersonalCentralMapper;
	/**
	 * 获取手机验证码服务接口
	 */
	@Autowired
	private RedisGetIdServiceApi mRedisGetIdServiceApi;
	/**
	 * 过户进度服务接口
	 */
	@Autowired
	private ICustomerHouseTransitScheduleService mICustomerHouseTransitScheduleService;
	/**
	 * 我的房子服务接口
	 */
	@Autowired
	private ICustomerOwnerHouseService mICustomerOwnerHouseService;
	/**
	 * 我的关注服务接口
	 */
	@Autowired
	private ICustomerConcernedHouseService mICustomerConcernedHouseService;
	/**
	 * <p>Title: queryPersonalInfo</p>   
	 * <p>Description: 查询客户个人详细信息</p>   
	 * @param custId 客户ID
	 * @return   
	 * @see com.bashiju.www.service.user.ICustomerPersonalCentralService#queryPersonalInfo(java.lang.String)
	 */
	@Override
	public CustCustomerEntity queryPersonalInfo(String custId) {
		
		return mCustomerPersonalCentralMapper.queryPersonalInfo(custId);
	}
	/**
	 * <p>Title: queryPersonalDetailInfo</p>   
	 * <p>Description:查询个人详细信息 ---包含过户进度、房源详细、我的关注</p>   
	 * @param custId 客户ID
	 * @return CustCustomerEntity
	 * @see com.bashiju.www.service.user.ICustomerPersonalCentralService#queryPersonalDetailInfo(java.lang.String)
	 */
	@SuppressWarnings("unchecked")
	@Override
	public CustCustomerEntity queryPersonalDetailInfo(String custId) {
		CustCustomerEntity custEntity = mCustomerPersonalCentralMapper.queryPersonalDetailInfo(custId);
		List<CustomerHouseTransitScheduleEntity> transitList 
				= queryTransitScheduleHouseDetail(custId);
		List<CustomerConcernedHouseEntity> concernedList 
				= (List<CustomerConcernedHouseEntity>) mICustomerConcernedHouseService
						.queryAllConcernedHouseList(custId, "0", 0, 0);
		long reservateCount = mCustomerPersonalCentralMapper.countMyReservateCount(custId);
		custEntity.setConcernedHouseList(concernedList);
		custEntity.setTransitScheduleList(transitList);
		custEntity.setReservationCount(reservateCount);
		return custEntity;
	}
	/**
	 * <p>Title: queryTransitScheduleHouseDetail</p>   
	 * <p>Description:查询房源过户进度信息 </p>   
	 * @param custId 客户ID
	 * @param houseId 房源ID
	 * @return   
	 * @see com.bashiju.www.service.user.ICustomerPersonalCentralService#queryTransitScheduleHouseDetail(java.lang.String, java.lang.String)
	 */
	@Override
	public List<CustomerHouseTransitScheduleEntity> queryTransitScheduleHouseDetail(String custId) {
		List<CustomerHouseTransitScheduleEntity> transitScheduleList
				= mICustomerHouseTransitScheduleService.queryHouseTransitScheculeDataList(custId,0,0);
		List<CustomerOwnerHouseEntity> houseList
			= mICustomerOwnerHouseService.queryCustOwnerHouseList(custId, "0", 0, 0);
		for(CustomerHouseTransitScheduleEntity entity : transitScheduleList) {
			for(CustomerOwnerHouseEntity house : houseList) {
				if(entity.getHouseSequence().equals(house.getHouseSequence())) {
					entity.setHouseEntity(house);
					break;
				}
			}
		}
		return transitScheduleList;
	}
	/**
	 * <p>Title: getMobileVerfyCode</p>   
	 * <p>Description: 发送手机验证码</p>   
	 * @param mobile   手机号码
	 * @see com.bashiju.www.service.user.ICustomerPersonalCentralService#getMobileVerfyCode(java.lang.String)
	 */
	@Override
	public void sendMobileVerfyCode(String mobile) {
		String authCode = mRedisGetIdServiceApi.getMsgAuthCode(mobile);
		if(null == authCode) {
			throw new BusinessException("请勿频繁操作!");
		}
	}
	/**
	 * <p>Title: modifyCustomerPassword</p>   
	 * <p>Description: 客户修改密码</p>   
	 * @param custId 客户ID
	 * @param finalPassword 最终密码   
	 * @see com.bashiju.www.service.user.ICustomerPersonalCentralService#modifyCustomerPassword(java.lang.String, java.lang.String)
	 */
	@Override
	public void modifyCustomerPassword(String custId, String finalPassword) {
		Map<String,Object> paraMap = new HashMap<String,Object>();
		paraMap.put("custId", custId);
		paraMap.put("updateTime", new Date());
		paraMap.put("finalPassword", finalPassword);
		mCustomerPersonalCentralMapper.modifyCustomerPassword(paraMap);
	}
	/**
	 * <p>Title: queryMyselfAgentList</p>   
	 * <p>Description: 查询我的经纪人信息</p>   
	 * @param custId：客户ID
	 * @param agentType 经纪人类型（0：咨询过的经纪人 1：带看过的经纪人）
	 * @return   
	 * @see com.bashiju.www.service.user.ICustomerPersonalCentralService#queryMyselfAgentList(java.lang.String, java.lang.String)
	 */
	@Override
	public List<Agent> queryMyselfAgentList(String custId, String agentType) {
		return mCustomerPersonalCentralMapper.queryMyselfAgentList(custId, agentType);
	}
	/**
	 * <p>Title: queryMyselfAppointmentList</p>   
	 * <p>Description:查询我的预约 </p>
	 * @param custId
	 * @return   
	 * @see com.bashiju.www.service.user.ICustomerPersonalCentralService#queryMyselfAppointmentList(java.lang.String)
	 */
	@Override
	public List<?> queryMyselfAppointmentList(String custId) {
		
		return mCustomerPersonalCentralMapper.queryMyselfAppointmentList(custId);
	}
	/**
	 * 取消预约
	 * @Title: concelMyselfAppointment
	 * @author: zuoyuntao  
	 * @Description:取消预约
	 * @param id 预约ID
	 * void 
	 */
	@Override
	public void concelMyselfAppointment(String id) {
		mCustomerPersonalCentralMapper.concelMyselfAppointment(id
				,WebCommonTools.formatDate("yyyy-mm-dd HH:mm:ss"));
	}
	/**
	 * 更新用户个人信息
	 * @Title: saveCustCustomerInfo
	 * @author: zuoyuntao  
	 * @Description:更新用户个人信息 
	 * @param custEntity      
	 * void JSON 格式为：
	 */
	@Override
	public void updateCustCustomerInfo(CustCustomerEntity custEntity) {
		if(StringUtil.isEmpty(custEntity.getId())) {
			throw new BusinessException("参数异常");
		}
		Map<String,Object> paraMap = new HashMap<String,Object>();
		paraMap = WebCommonTools.castEntityToHashMap(custEntity);
		paraMap.put("updateTime", new Date());
		mCustomerPersonalCentralMapper.updateCustCustormer(paraMap);
	}
	/**
	 * 新增预约
	 * @Title: saveReservationWatchHouse
	 * @author: wangpeng  
	 * @Description:新增预约
	 * @param reservationParam 用输入参数
	 */
	@Override
	public boolean saveReservationWatchHouse(ReservationParam reservationParam) {
		ReservationEntity reservationEntity = new ReservationEntity();
		reservationEntity.setReservationDate(reservationParam.getReservationDate());
		reservationEntity.setReservationTime(reservationParam.getReservationTime());
		reservationEntity.setName(reservationParam.getName());
		reservationEntity.setMobile(reservationParam.getMobile());
		reservationEntity.setRemark(reservationParam.getRemark());
		reservationEntity.setShhId(reservationParam.getShhId());
		reservationEntity.setCustId(reservationParam.getCustId());
		reservationEntity.setStatus("0");
		reservationEntity.setHandelerId("1");
		reservationEntity.setHandelResult("test");
		reservationEntity.setPermissionArea("");
		reservationEntity.setOperator("");
		reservationEntity.setOperatorId("");
		reservationEntity.setIsvalid("");
		reservationEntity.setAddTime(new Date());
		reservationEntity.setUpdateTime(new Date());
		long result = mCustomerPersonalCentralMapper.saveReservationWatchHouse(reservationEntity);
		if(result>0)
			return true;
		return false;
	}
}
