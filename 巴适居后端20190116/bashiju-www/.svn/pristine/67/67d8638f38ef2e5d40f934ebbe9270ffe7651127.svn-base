package com.bashiju.www.service.api.impl;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSON;
import com.bashiju.enums.BottomContentEnum;
import com.bashiju.enums.HouseArticleTypeEnum;
import com.bashiju.www.global.WebGlobal;
import com.bashiju.www.pojo.service.community.HotCommunity;
import com.bashiju.www.pojo.service.out.article.ArticleInfoResult;
import com.bashiju.www.pojo.service.out.article.ArticleListResult;
import com.bashiju.www.pojo.service.out.comm.ContactUsResult;
import com.bashiju.www.pojo.service.out.comm.HouseTotalResult;
import com.bashiju.www.pojo.service.out.comm.NavigationBar;
import com.bashiju.www.pojo.service.out.comm.OpenCity;
import com.bashiju.www.pojo.service.out.comm.WebProtocolResult;
import com.bashiju.www.pojo.service.out.house.HouseListResult;
import com.bashiju.www.pojo.service.user.CustCustomerEntity;
import com.bashiju.www.pojo.service.user.CustCustomerParam;
import com.bashiju.www.service.api.IHomePageService;
import com.bashiju.www.service.article.IArticleService;
import com.bashiju.www.service.comm.ICacheService;
import com.bashiju.www.service.comm.ICommService;
import com.bashiju.www.service.community.CommunityService;
import com.bashiju.www.service.house.IHouseService;
import com.bashiju.www.service.navigationbar.NavigationBarService;
import com.bashiju.www.service.user.CustCustomerService;
import com.bashiju.www.service.user.UserRegisterService;
/**
 * 
 *  首页接口实现
 * @ClassName:  HomePageServiceImpl   
 * @Description:   首页接口实现
 * @author: wangkaifa
 * @date:   2018年7月31日 下午1:29:49       
 * @Copyright: 2018 www.bashiju.com Inc. All rights reserved. 
 * 本内容仅限于云南巴士居网络服务公司内部传阅，禁止外泄以及用于其他的商业项目
 */
@Service
public class HomePageServiceImpl implements IHomePageService {
	@Autowired
	private IArticleService articleService;
	@Autowired
	private IHouseService houseService;
	@Autowired
	ICacheService cacheService;
	@Autowired
	NavigationBarService navigationBarService;
	@Autowired
	UserRegisterService userRegisterService;
	@Autowired
	CommunityService communityService;
	@Autowired
	ICommService commService;
	@Autowired
	private CustCustomerService custCustomerService;
	
	@Override
	public HouseTotalResult queryHouseTotalByCityCode(String cityCode) {
		HouseTotalResult result=houseService.queryHouseTotalByCityCode(cityCode);
		return result;
	}

	@Override
	public List<ArticleListResult> queryNewZiXunList(String cityCode, int limit) {
		String key=WebGlobal.HOME_ENCYCLOPEDIA_REDIS_PREFIX+cityCode;
		String json=cacheService.getCache(key);
		List<ArticleListResult> results=null;
		if (StringUtils.isEmpty(json)) {
			results=articleService.queryArticleList(cityCode, HouseArticleTypeEnum.PROPERTYINFORMATION.getCode(), limit);
			if (results!=null&&results.size()>0) {
				cacheService.saveCache(key, JSON.toJSONString(results), WebGlobal.LIST_EXPTIME);
			}
		}else {
			results=JSON.parseArray(json, ArticleListResult.class);
		}
		return results;
	}

	@Override
	public List<HouseListResult> querySellGoodHouse(String cityCode) {
		List<HouseListResult> results=houseService.querySellGoodHouse(cityCode);
		return results;
	}

	@Override
	public List<HouseListResult> queryRentGoodHouse(String cityCode) {
		List<HouseListResult> results=houseService.queryRentGoodHouse(cityCode);
		return results;
	}

	@Override
	public List<NavigationBar> queryHeadNavigationBar(String cityCode) {
		List<NavigationBar> results=navigationBarService.queryHeadNavigationBar(cityCode);
		return results;
	}

	@Override
	public List<NavigationBar> queryLinkedNavigationBar(String cityCode) {
		List<NavigationBar> results=navigationBarService.queryLinkedNavigationBar(cityCode);
		return results;
	}

	@Override
	public List<HotCommunity> queryHotCommunitys(String cityCode,int limit) {
		List<HotCommunity> results=communityService.queryHotCommunitys(cityCode, limit);
		return results;
	}

	@Override
	public boolean saveCustCustomer(CustCustomerParam CustCustomerParam) {
		boolean result=userRegisterService.saveCustCustomer(CustCustomerParam);
		return result;
	}

	@Override
	public List<OpenCity> queryOpenCitys() {
		List<OpenCity> results=navigationBarService.queryOpenCitys();
		return results;
	}

	@Override
	public WebProtocolResult queryArticle(BottomContentEnum bottomContentEnum) {
		WebProtocolResult result=commService.queryWebProtocol(bottomContentEnum);
		return result;
	}

	@Override
	public List<ContactUsResult> queryContactUs() {
		List<ContactUsResult> results=commService.queryContactUs();
		return results;
	}

	@Override
	public boolean customerLogin(HttpServletRequest request, HttpServletResponse response, String mobile,
			String password, String validateCode) {
		return 	custCustomerService.customerLogin(request, response, mobile, password, validateCode);
	}

	@Override
	public void customerLoginout(HttpServletRequest request, HttpServletResponse response) {
		custCustomerService.customerLoginout(request, response);
	}
	
	@Override
	public boolean customerMobileLogin(HttpServletRequest request, HttpServletResponse response, String mobile,
			String solt) {
		boolean result = custCustomerService.customerMobileLogin(request, response, mobile, solt);
		return result;
	}

	@Override
	public boolean updateCustCustomer(CustCustomerEntity custCustomerEntity) {
		boolean result = custCustomerService.updateCustCustomer(custCustomerEntity);
		return result;
	}

	@Override
	public String sendMobileMsgVerfyCode(String mobile) {
		String result =  custCustomerService.sendMobileMsgVerfyCode(mobile);
		return result;
	}
}
