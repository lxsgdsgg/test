/**  
 * All rights Reserved, Designed By www.bashiju.com
 * @Title:  PropertyDynamicServiceImpl.java   
 * @Package com.bashiju.housing.service.impl   
 * @Description:    TODO(用一句话描述该文件做什么)   
 * @author: wangpeng     
 * @date:   2018年8月17日 下午3:49:55   
 * @version V1.0 
 * @Copyright: 2018 www.bashiju.com Inc. All rights reserved. 
 * 注意：本内容仅限于云南巴士居网络服务公司内部传阅，禁止外泄以及用于其他的商业项目*/

package com.bashiju.housing.service.impl;

import java.util.Date;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bashiju.housing.mapper.PropertyDynamicMapper;
import com.bashiju.housing.service.PropertyDynamicService;
import com.bashiju.utils.exception.BusinessException;
import com.bashiju.utils.log.ExecutionResult;
import com.bashiju.utils.log.SystemServiceLog;
import com.bashiju.utils.service.CommonSqlServie;
import com.bashiju.utils.threadlocal.UserThreadLocal;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;

/**
 * 楼盘动态服务   
 * @ClassName:  PropertyDynamicServiceImpl   
 * @Description:楼盘动态服务
 * @author: wangpeng
 * @date:   2018年8月17日 下午3:49:55   
 * @Copyright: 2018 www.bashiju.com Inc. All rights reserved. 
 * 本内容仅限于云南巴士居网络服务公司内部传阅，禁止外泄以及用于其他的商业项目
 */
@Service
@SystemServiceLog(sourceType="楼盘动态")
public class PropertyDynamicServiceImpl extends CommonSqlServie implements PropertyDynamicService {
	
	@Autowired
	private PropertyDynamicMapper propertyDynamicMapper;
	/**
	 * 分页查询楼盘动态信息
	 * @Title: queryPropertyDynamic   
	 * @Description: 分页查询楼盘动态信息   
	 * @param page 当前页数
	 * @param limit 每页总条数
	 * @param projectId 新房楼盘详情编号
	 * @return: Page<Map<String,Object>>
	 */
	@Override
	@SystemServiceLog(operationType="分页查询楼盘动态")
	public Page<Map<String, Object>> queryPropertyDynamicByProjectId(String projectId,int page,int limit) {
		PageHelper.startPage(page, limit);
		Page<Map<String,Object>> map = propertyDynamicMapper.queryPropertyDynamicByProjectId(projectId);
		return map;
	}
	/**
	 * 新增或修改楼盘动态信息
	 * @Title: saveOrUpdatePropertyDynamic   
	 * @Description: 新增或修改楼盘动态信息   
	 * @param paramMap 
	 * @return: boolean
	 */
	@Override
	@SystemServiceLog(operationType="新增或修改楼盘动态信息   ")
	public boolean saveOrUpdatePropertyDynamic(Map<Object, Object> paramMap) {
		if(!paramMap.containsKey("id")||paramMap.get("id")==null|| StringUtils.isEmpty(paramMap.get("id").toString())) {
			//新增
			paramMap.remove("id");
			paramMap.put("operatorId", 	UserThreadLocal.get().get("id"));
			paramMap.put("operator", 	UserThreadLocal.get().get("realName"));
			paramMap.put("permissionArea", 	UserThreadLocal.get().get("deptId"));
			paramMap.put("addTime", new Date());
			Long result = this.commonOperationDatabase(paramMap, "sys_community_project_news", false);
			if(result>0) {
				ExecutionResult.descFormat(result.toString(), "新增楼盘动态信息");
				return true;
			}
			return false;
		}else {
			//修改
			Long result  = this.commonOperationDatabase(paramMap, "sys_community_project_news", "id", false);
			if(result>0) {
				ExecutionResult.descFormat(Long.toString(result), "修改楼盘用户信息");
				return true;
			}
			return false;
			
		}
		
	}

	/**
	 * 逻辑删除楼盘动态信息
	 * @Title: delPropertyDynamicById   
	 * @Description: 逻辑删除楼盘动态信息   
	 * @param id 楼盘动态编号
	 * @return: boolean
	 */
	@Override
	@SystemServiceLog(operationType="逻辑删除楼盘动态信息   ")
	public boolean delPropertyDynamicById(String id) {
		boolean result = this.delData("sys_community_project_news", "id", id, false);
		if(result)
			return true;
		return false;
	}
	/**
	 * 分页查询预售证列表信息
	 * @Title: queryPresalePermitListInfoByProjectId   
	 * @Description:  分页查询预售证信息列表 
	 * @param page 当前页数
	 * @param  limit 每页总条数
	 * @param projectId 新房楼盘详情编号
 	 * @return: Page<Map<String, Object>>
	 */
	
	@Override
	public Page<Map<String, Object>> queryPresalePermitListInfoByProjectId(String projectId,int page,int limit) {
		PageHelper.startPage(page, limit);
		Page<Map<String, Object>> map = propertyDynamicMapper.queryPresalePermitListInfoByProjectId(projectId);
		if(map!=null && map.size()>0)
			return map;
		return null;
	}

	/**
	 * 新增或修改楼盘动态信息
	 * @Title: queryPresalePermitListInfoById   
	 * @Description: 条件查询预售证信息列表
	 * @param id 预售证信息列表编号
	 * @return: boolean
	 */
	
	@Override
	public Map<String, Object> queryPresalePermitListInfoById(String id) {
		Map<String, Object> map = propertyDynamicMapper.queryPresalePermitListInfoById(id);
		if(map!=null && map.size()>0)
			return map;
		return null;
	}

	/**
	 * 逻辑删除预售证信息列表
	 * @Title: delPresalePermitListInfoById   
	 * @Description: 逻辑删除预售证信息列表
	 * @param id 预售证信息列表编号
	 * @return: boolean
	 */
	
	@Override
	public boolean delPresalePermitListInfoById(String id) {
		boolean result =this.delData("sys_community_project_prePermit", "id", id, false);
		if(result)
			return true;
		return false;
	}

	/**
	 * 新增或修改预售证信息列表
	 * @Title: saveOrUpdatePresalePermitListInfo   
	 * @Description: 新增或修改预售证信息列表
	 * @param paramMap
	 * @return: boolean
	 */
	
	@Override
	public boolean saveOrUpdatePresalePermitListInfo(Map<Object, Object> paramMap) {
		if(!paramMap.containsKey("id")||paramMap.get("id")==null||StringUtils.isEmpty(paramMap.get("id").toString())) {
			//新增
			paramMap.remove("id");
			paramMap.put("permissionArea", UserThreadLocal.get().get("deptId"));
			paramMap.put("operatorId", UserThreadLocal.get().get("id"));
			paramMap.put("operator", UserThreadLocal.get().get("realName"));
			paramMap.put("addTime", new Date());
			Long result = this.commonOperationDatabase(paramMap, "sys_community_project_prePermit", false);
			if(result>0) {
				ExecutionResult.descFormat(result.toString(),"新增预售证信息列表信息");
				return true;
			}
			return false;
		}else {
			//修改
			Long result = this.commonOperationDatabase(paramMap, "sys_community_project_prePermit", "id", false);
			if(result>0) {
				ExecutionResult.descFormat(result.toString(),"修改预售证信息列表信息");
				return true;
			}
			return false;
		}
	}

	/**
	 * 分页查询楼盘开盘日期
	 * @Title: queryPropertyOpenDate   
	 * @Description: 页查询楼盘开盘日期
	 * @param page 当前页数
	 * @param limit 每页总条数
	 * @param projectId 新房楼盘详情编号
	 * @return: Page<Map<String, Object>>
	 */
	@Override
	public Page<Map<String, Object>> queryPropertyOpenDateByProjectId(String projectId,int page, int limit) {
		Page<Map<String, Object>> map = propertyDynamicMapper.queryPropertyOpenDateByProjectId(projectId);
		return map;
	}

	/**
	 * 条件查询楼盘开盘日期
	 * @Title: queryPropertyOpenDateById   
	 * @Description: 条件查询楼盘开盘日期
	 * @param projectId 楼盘开盘日期编号
	 * @return: Map<String, Object>
	 */
	@Override
	public Map<String, Object> queryPropertyOpenDateById(String id) {
		Map<String, Object> map = propertyDynamicMapper.queryPropertyOpenDateById(id);
		return map;
	}

	/**
	 * 逻辑删除楼盘开盘日期
	 * @Title: queryPropertyOpenDateById   
	 * @Description: 逻辑删除楼盘开盘日期
	 * @param id 楼盘开盘日期编号
	 * @return: boolean
	 */
	
	@Override
	public boolean delPropertyOpenDateById(String id) {
		boolean result = this.delData("sys_community_project_openDate", "id", id, false);
		if(result)
			return true;
		return false;
	}

	/**
	 * 新增或修改楼盘开盘日期
	 * @Title: saveOrUpdatePropertyOpenDate   
	 * @Description: 新增或修改楼盘开盘日期
	 * @param paramMap 
	 * @return: boolean
	 */
	@Override
	public boolean saveOrUpdatePropertyOpenDate(Map<Object, Object> paramMap) {
		if(!paramMap.containsKey("id")||paramMap.get("id")==null||StringUtils.isEmpty(paramMap.get("id").toString())) {
			//新增
			paramMap.remove("id");
			paramMap.put("permissionArea", UserThreadLocal.get().get("deptId"));
			paramMap.put("operatorId", UserThreadLocal.get().get("id"));
			paramMap.put("operator", UserThreadLocal.get().get("realName"));
			paramMap.put("addTime", new Date());
			Long result = this.commonOperationDatabase(paramMap, "sys_community_project_openDate", false);
			if(result>0) {
				ExecutionResult.descFormat(result.toString(), "新增楼盘看盘日期");
				return true;
			}return false;
			
		}else {
			//修改
			Long result = this.commonOperationDatabase(paramMap, "sys_community_project_openDate", "id", false);
			if(result>0) {
				ExecutionResult.descFormat(result.toString(), "修改楼盘看盘日期");
				return true;
			}return false;
		}
	}
	/**
	 * 条件查询楼盘价格历史
	 * @Title: Page<Map<String, Object>> 
	 * @Description: 条件查询楼盘价格历史
	 * @param paramMap 
	 * @return: Page<Map<String, Object>>
	 */
	@Override
	public Page<Map<String, Object>> queryPropertyPriceTrendByProjectId(String projectId, int page, int limit) {
		PageHelper.startPage(page, limit);
		Page<Map<String, Object>> map =	propertyDynamicMapper.queryPropertyPriceTrendByProjectId(projectId);
		return map;
	}
	/**
	 * 逻辑删除楼盘价格历史
	 * @Title: delPropertyPriceTrendById 
	 * @Description:逻辑删除楼盘价格历史
	 * @param paramMap 
	 * @return: boolean
	 */
	@Override
	public boolean delPropertyPriceTrendById(String id) {
		boolean result = this.delData("sys_community_project_priceTrend", "id", id, false);
		if(result)
			return true;
		return false;
	}
	/**
	 * 新增或修改楼盘价格历史
	 * @Title: saveOrUpdatePropertyPriceTrend 
	 * @Description:新增或修改楼盘价格历史
	 * @param paramMap 
	 * @return: boolean
	 */
	@Override
	public boolean saveOrUpdatePropertyPriceTrend(Map<Object, Object> paramMap) {
		if(!paramMap.containsKey("id")||paramMap.get("id")==null||StringUtils.isEmpty(paramMap.get("id").toString())) {
			//新增
			paramMap.get("id");
			paramMap.put("permissionArea", UserThreadLocal.get().get("deptId"));
			paramMap.put("operatorId", UserThreadLocal.get().get("id"));
			paramMap.put("operator", UserThreadLocal.get().get("realName"));
			paramMap.put("addTime", new Date());
			Long result = this.commonOperationDatabase(paramMap, "sys_community_project_priceTrend", false);
			if(result>0) {
				ExecutionResult.descFormat(result.toString(), "新增楼盘价格历史");
				return true;
			}return false;
		}else {
			//修改
			Long result = this.commonOperationDatabase(paramMap, "sys_community_project_priceTrend", "id", false);
			if(result>0) {
				ExecutionResult.descFormat(result.toString(), "修改楼盘价格历史");
				return true;
			}return false;
		}
	}
	/**
	 * 条件查询楼盘交房日期
	 * @Title: queryRoomTimeByProjectId 
	 * @Description:条件查询楼盘交房日期
	 * @param projectId 新房楼盘详情编号
	 * @return: Page<Map<String, Object>>
	 */
	
	@Override
	public Page<Map<String, Object>> queryRoomTimeByProjectId(String projectId,int page,int limit) {
		PageHelper.startPage(page, limit);
		Page<Map<String, Object>> roomTime = propertyDynamicMapper.queryRoomTimeByProjectId(projectId);
		return roomTime;
	}
	/**
	 * 条件查询楼盘交房日期
	 * @Title: queryRoomTimeById 
	 * @Description:条件查询楼盘交房日期
	 * @param   id 楼盘交房日期编号
	 * @return:  Map<String, Object>
	 */
	
	@Override
	public Map<String, Object> queryRoomTimeById(String id) {
		Map<String, Object> roomTime = propertyDynamicMapper.queryRoomTimeById(id);
		return roomTime;
	}
	
	/**
	 * 逻辑删除楼盘交房日期
	 * @Title: queryRoomTimeById 
	 * @Description:逻辑删除楼盘交房日期
	 * @param   id 楼盘交房日期编号
	 * @return:  boolean
	 */
	@Override
	public boolean delRoomTimeById(String id) {
		if(StringUtils.isEmpty(id))
			throw new BusinessException("楼盘交房日期编号不能为空");
		boolean result = this.delData("sys_community_project_deliverdate", "id", id, false);
		if(result)
			return true;
		return false;
	}

	/**
	 * 新增或修改楼盘交房日期
	 * @Title: saveOrUpdateRoomTime 
	 * @Description:新增或修改楼盘交房日期
	 * @param   paramMap
	 * @return:  boolean
	 */
	@SuppressWarnings("unchecked")
	@Override
	public boolean saveOrUpdateRoomTime(Map<Object, Object> paramMap) {
		if(!paramMap.containsKey("id")||paramMap.get("id")==null||StringUtils.isEmpty(paramMap.get("id").toString())) {
			//新增
			paramMap.remove("id");
			Map<Object,Object> user = UserThreadLocal.get();
			paramMap.put("permissionArea", user.get("deptId"));
			paramMap.put("operatorId", user.get("id"));
			paramMap.put("operator", user.get("realName"));
			paramMap.put("addTime", new Date());
			Long result = this.commonOperationDatabase(paramMap, "sys_community_project_deliverdate", false);
			if(result>0) {
				ExecutionResult.descFormat(result.toString(), "新增楼盘交房时间");
				return true;
			}return false;

		}else {
			Long result = this.commonOperationDatabase(paramMap, "sys_community_project_deliverdate", "id", false);
			if(result>0) {
				ExecutionResult.descFormat(result.toString(), "修改楼盘交房日期");
				return true;
			}return false;
		}
	}

}
