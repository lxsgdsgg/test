package com.bashiju.customer.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.bashiju.cert.interceptors.DataAuthHelper;
import com.bashiju.customer.mapper.CustomerMapper;
import com.bashiju.customer.pojo.BusinessExamineType;
import com.bashiju.customer.pojo.CustomerFindHouseEntity;
import com.bashiju.customer.pojo.CustomerQueryEntity;
import com.bashiju.customer.service.CustomerCodeTool;
import com.bashiju.customer.service.CustomerService;
import com.bashiju.customer.service.CustomerStatusEnum;
import com.bashiju.customer.service.FormService;
import com.bashiju.enums.AgentTypeEnum;
import com.bashiju.enums.CustomerTransactionEnum;
import com.bashiju.enums.DiscStatusEnum;
import com.bashiju.enums.MenusEnum;
import com.bashiju.enums.ResCustLevelConditionEnum;
import com.bashiju.enums.TaoBaoStatusEnum;
import com.bashiju.utils.exception.BusinessException;
import com.bashiju.utils.log.ExecutionResult;
import com.bashiju.utils.log.SystemServiceLog;
import com.bashiju.utils.service.CommonSqlServie;
import com.bashiju.utils.threadlocal.UserThreadLocal;
import com.bashiju.utils.util.FtpUtil;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;

@SystemServiceLog(sourceType="客源") 
@Service
public class CustomerServiceImpl implements CustomerService{
	/**万元转分 **/
	private static final int WANYUAN=1000000;
	/**元转分 **/
	private static final int YUAN=100;
	@Autowired
	private CommonSqlServie commonSqlServie;
	@Autowired
	CustomerMapper customerMapper;
	@Autowired
	DataAuthHelper dataAuthHelper;
	@Autowired
	FormService formService;
	
	@SystemServiceLog(operationType="查询客源详细信息")
	@Override
	public Map<String,Object> queryCustomerInfo(String demandId,String formName){
		Map<String,Object> res = new HashMap<>();
		Map<Object, Object> user=UserThreadLocal.get();
		Long userid = Long.parseLong(user.get("id").toString());
		
		//dataAuthHelper.auth(MenusEnum.MENU_21.getValue(),UserThreadLocal.get().get("id").toString());
		Map<String,Object> customerInfo = customerMapper.queryCustomerInfo(demandId,userid);
		LinkedList<Map<String,Object>> followInfo= customerMapper.queryFollowInfo(demandId);
		LinkedList<Map<String,Object>> relateagentInfo = customerMapper.queryRelateagentInfo(demandId);
		List fields = formService.queryCustomField(formName);
		
		if (fields!=null&&fields.size()>0) {
			Map<String,Object> customInfo = new HashMap<>();
			customInfo.put("customField", fields);//返回自定义的字段
			Map<String,Object> customField = new HashMap<>();
			for(int i=0;i<fields.size();i++) {
				Map<String,Object> m = (Map)fields.get(i);
				customField.put(m.get("field").toString(), m.get("title").toString());
			}
			Map<String,Object> customValue = customerMapper.queryCustomValue(customField,formName,demandId);
			if(customValue!=null && customValue.size()>0)
				customInfo.put("customValue", customValue);//返回自定义字段的值
			
			res.put("customInfo", customInfo);
		}
		
		if(customerInfo!=null && customerInfo.size()>0)
			res.put("customerInfo", customerInfo);//返回客源基本信息
		if(followInfo.size()>0)
			res.put("followInfo", followInfo);//返回客源跟进信息
		if(relateagentInfo.size()>0)
			res.put("relateagentInfo", relateagentInfo);//返回经纪人信息
		
		ExecutionResult.descFormat("需求id："+demandId, "查询客源详细信息");
		return res;
	}
	
	@SystemServiceLog(operationType="查询带看")
	@Override
	public Page<Map<String, Object>> queryLookHouse(String demandId,int page,int limit){
		PageHelper.startPage(page, limit);
		Page<Map<String, Object>> pageInfo = customerMapper.queryLookHouse(demandId);
		
		ExecutionResult.descFormat("客源id："+demandId+"", "查询带看信息");
		return pageInfo;
	}
	
	@SystemServiceLog(operationType="查询看房轨迹")
	@Override
	public List<Map<String, Object>> queryLookHousePath(String demandId){
		List<Map<String, Object>> res = new ArrayList<>();
		//查出所有带看的房源编号
		List<Map<String, Object>> lookhouses = customerMapper.queryLookHouseId(demandId);
		for(Map<String, Object> lookhous :lookhouses) {
			String houseIds = lookhous.get("houseId").toString();
			String[] houseIdAttr = houseIds.split(",");
			for(int i=0;i<houseIdAttr.length;i++) {
				if(!"".equals(houseIdAttr[i])) {
					//查询房源区域坐标信息
					Map<String,Object> houseCommunity = customerMapper.queryHouseCommunity(houseIdAttr[i]);
					houseCommunity.put("custName", lookhous.get("custName"));
					houseCommunity.put("addTime", lookhous.get("addTime"));
					res.add(houseCommunity);
				}
				
			}
		}
		
		ExecutionResult.descFormat("客源id："+demandId+"", "查询看房轨迹");
		return res;
	}
	
	@SystemServiceLog(operationType="查询跟进")
	@Override
	public Page<Map<String, Object>> queryFollowRecord(String demandId,int page,int limit){
		PageHelper.startPage(page, limit);
		Page<Map<String, Object>> pageInfo = customerMapper.queryFollowRecord(demandId);
		
		ExecutionResult.descFormat("客源id："+demandId+"", "查询客源跟进信息");
		return pageInfo;
	}
	
	@SystemServiceLog(operationType="查询客户电话")
	@Override
	public List queryCustomerPhone(String demandId) {
		LinkedList<Map<String,Object>> phones = customerMapper.queryCustomerPhone(demandId);
		return phones;
	}
	
	@SystemServiceLog(operationType="提交审核")
	@Override
	public Long changeExamine(Map<String,Object> data) {
		String type = "";
		Map<Object,Object> examineInfo = new HashMap<>();
		if(data.containsKey("type")) {
			type = data.get("type").toString();
		}
		if(data.containsKey("examineInfo")) {
			examineInfo = (Map)data.get("examineInfo");
		}
		
		Map<Object, Object> user=UserThreadLocal.get();
		Long userid = Long.parseLong(user.get("id").toString());
		String username = user.get("realName").toString();
		Map dept = customerMapper.queryDeptName(userid);
		String deptId = dept.get("deptId").toString();
		
		examineInfo.put("operatorId", userid);
		examineInfo.put("operator", username);
		//申请人
		examineInfo.put("permissionArea", deptId);
		examineInfo.put("applyerId", userid);
		examineInfo.put("applyer", username);
		examineInfo.put("apppyTime", new Date());
		
		if(type.equals("changestatus")) {//更改客源状态
			//取审核类型
			examineInfo.put("examineTypeId",BusinessExamineType.UPDATESTATUS.getValue());
			Map<String,Object> remark = (Map)examineInfo.get("remark");
			examineInfo.put("remark", JSONObject.toJSONString(remark));
		} 
		
		if(type.equals("customerclose")) {//封盘申请
			//取审核类型
			examineInfo.put("examineTypeId",BusinessExamineType.CLOSEDISC.getValue());
			Map<String,Object> remark = (Map)examineInfo.get("remark");
			examineInfo.put("remark", JSONObject.toJSONString(remark));
		} 
		
		
		if(type.equals("fromtaobao")){//从淘宝淘出
			//取审核类型
			examineInfo.put("examineTypeId",BusinessExamineType.TAOBAO.getValue());
			Map<String,Object> remark = (Map)examineInfo.get("remark");
			examineInfo.put("remark", JSONObject.toJSONString(remark));
		}
		
		//Long res = businessExamineService.saveBusinessExamine(examineInfo);
		
		if(type.equals("changestatus")) {
			ExecutionResult.descFormat("", "更改房源状态提交审核");
		}else if(type.equals("houseclose")){
			ExecutionResult.descFormat("", "申请封盘提交审核");
		}else if(type.equals("fromtaobao")){
			ExecutionResult.descFormat("", "从淘宝淘出提交审核");
		}
		return 1l;
	}
	
	//收为私客、放入公客、放入淘宝
	@SystemServiceLog(operationType="更改一些状态")
	@Override
	public Long changeSomeStatus(Map<String,Object> data) {
		Long res = 0l;
		String type = "";
		Map<Object,Object> statusInfo = new HashMap<>();
		if(data.containsKey("type")) {
			type = data.get("type").toString();
		}
		if(data.containsKey("statusInfo")) {
			statusInfo = (Map)data.get("statusInfo");
		}
		
		if(type.equals("toPublicdisc")) {//放入公客
			//盘状态
			statusInfo.put("discStatusId", DiscStatusEnum.PUBLICDISC.getCode());
			statusInfo.put("discStatus", DiscStatusEnum.PUBLICDISC.getDesc());
		}
		
		if(type.equals("setPrivatedisc")) {//收为私客，要变更维护人
			Map<Object, Object> user=UserThreadLocal.get();
			Long userid = Long.parseLong(user.get("id").toString());
			String username = user.get("realName").toString();
			Map<String,Object> dept = customerMapper.queryDeptName(userid);
			String deptId = dept.get("deptId").toString();
			String deptname = dept.get("deptName").toString();
			//维护人
			statusInfo.put("maintainer", username);
			statusInfo.put("maintainId", userid);
			statusInfo.put("mainterDeptId", deptId);
			statusInfo.put("mainterDept",deptname);
			statusInfo.put("permissionArea",deptId);
			//盘状态
			statusInfo.put("discStatusId", DiscStatusEnum.PRIVATEDISC.getCode());
			statusInfo.put("discStatus", DiscStatusEnum.PRIVATEDISC.getDesc());
			//经纪人表的维护人
			Long recordid = 0l;
			if(!"".equals(statusInfo.get("recordid").toString()))
				recordid = Long.parseLong(statusInfo.get("recordid").toString());//有没有原维护人记录
			updateMyAgent(statusInfo.get("id").toString(),recordid,userid,AgentTypeEnum.MANAGE_PERSON.getCode(),AgentTypeEnum.MANAGE_PERSON.getDesc());
			statusInfo.remove("recordid");
		}
		
		if(type.equals("toTaobao")) {//设置为放入淘宝池
			statusInfo.put("taobaoStatusId", TaoBaoStatusEnum.TAOBAO.getCode());
			statusInfo.put("taobaoStatus", TaoBaoStatusEnum.TAOBAO.getDesc());
		}
		res = commonSqlServie.commonOperationDatabase(statusInfo, "demand_customerBusinessInfo", "id", false);
		
		if(type.equals("toPublicdisc")) {
			ExecutionResult.descFormat("", "放入公客");
		}else if(type.equals("setPrivatedisc")){
			ExecutionResult.descFormat("", "收为私客");
		}else if(type.equals("toTaobao")){
			ExecutionResult.descFormat("", "客源放入淘宝");
		}
		return res;
	}
	
	//保存带看
	public Long saveLookhouse(Map<String,Object> data) {
		Map<Object,Object> look = (Map)data;
		Map<Object, Object> user=UserThreadLocal.get();
		String companyId=user.get("companyId").toString();
		String companyName=user.get("comName").toString();
		Long userid = Long.parseLong(user.get("id").toString());
		String username = user.get("realName").toString();
		Map<String,Object> dept = customerMapper.queryDeptName(userid);
		String deptId = dept.get("deptId").toString();
		look.put("companyId", companyId);
		look.put("companyName", companyName);
		//带看人
		look.put("leaderId", userid);
		look.put("leader", username);
		look.put("leadTime", new Date());
		look.put("deptId", deptId);
		look.put("permissionArea", deptId);
		//操作人
		look.put("operatorId", userid);
		look.put("operator", username);
		//是否复看
		if(data.containsKey("isRepeat")) {
			Map<Object, Object> mm = new HashMap<>();
			mm.put("id", data.get("demandId"));
			mm.put("isRepeat", data.get("isRepeat"));
			commonSqlServie.commonOperationDatabase(mm, "demand_customerBusinessInfo","id",false);
			look.remove("isRepeat");
		}
		//保存带看记录
		Long res = commonSqlServie.commonOperationDatabase(look, "demand_showedrecord",false);
		//修改带看时间
		Map<Object,Object> mm = new HashMap<>();
		mm.put("id",data.get("demandId"));
		Map<String,Object> mainter =customerMapper.queryMainter(data.get("demandId").toString()) ;
		Long mainterId = Long.parseLong(mainter.get("maintainId").toString());
		if(mainterId==userid) {//维护人带看时间
			mm.put("lastShowedTime", new Date());
			commonSqlServie.commonOperationDatabase(mm, "demand_customerBusinessInfo","id", false);
		}else {//其他人员带看时间
			mm.put("lastAllShowedTime", new Date());
			commonSqlServie.commonOperationDatabase(mm, "demand_customerBusinessInfo","id", false);
		}
		
		return res;
	}
	
	//删除带看
	@SystemServiceLog(operationType="删除")
	@Override
	public boolean delLookhouse(Long id) {
		boolean res = commonSqlServie.delData("demand_showedrecord", "id", id+"", false);
		return res;
	}
	
	//上传带看图片
	@SystemServiceLog(operationType="上传")
	@Override
	public Long saveImg(HttpServletRequest request) throws Exception{
		Long res = 0l;
		Long lookId = Long.parseLong(request.getParameter("lookId"));//带看记录id
		// 将当前上下文初始化给 CommonsMutipartResolver （多部分解析器）
		CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver(
				request.getSession().getServletContext());
		// 检查form中是否有enctype="multipart/form-data"
		if (multipartResolver.isMultipart(request)) {
			// 将request变成多部分request
			MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest) request;
			// 获取multiRequest 中所有的文件名
			Iterator iter = multiRequest.getFileNames();

			if (iter.hasNext()) {
				// 一次遍历所有文件
				//List<MultipartFile> files = multiRequest.getFiles(iter.next().toString());
				
				MultipartFile file = multiRequest.getFile(iter.next().toString());
				if (file != null) {
					String  filepath = FtpUtil.uploadFile(file,1,true);
					Map<Object, Object> user=UserThreadLocal.get();
					String companyId=user.get("companyId").toString();
					String companyName=user.get("comName").toString();
					Long userid = Long.parseLong(user.get("id").toString());//操作人id
					String username = user.get("realName").toString();//操作人
					Map dept = customerMapper.queryDeptName(userid);//部门
					String deptid = dept.get("deptId").toString();
					//保存房源附件表
					Map<Object,Object> mm = new HashMap<>();
					mm.put("companyId", companyId);
					mm.put("companyName", companyName);
					mm.put("showedRecordId", lookId);
					mm.put("path", filepath);
					mm.put("operatorId", userid);
					mm.put("operator", username);
					mm.put("permissionArea", deptid);
					res = commonSqlServie.commonOperationDatabase(mm, "demand_showedrecordattach", false);
					ExecutionResult.descFormat("", "保存带看图片");
					System.out.println("------------>"+res);
				}
			}
		}
		
		return res;
	}
	
	//保存定金
	@SystemServiceLog(operationType="保存")
	@Override
	public int saveDeposit(String depositInfo) {
		String[] params = depositInfo.split("&");   
		Map<Object,Object> map = new HashMap<>();
		Long shhId =  0l;
		String deptId = "";
		String demandId = "";
		for (int i = 0; i < params.length; i++) {  
	        String[] p = params[i].split("=");  
	        if (p.length == 2) {  
	        	map.put(p[0], p[1]);
	        	if(p[0].equals("shhId")) {
	        		shhId = Long.parseLong(p[1]);
	        	}
	        	if(p[0].equals("demandId")) {
	        		demandId = p[1];
	        	}
	        }  
	    } 
		//判断是否下过定金
		int n = customerMapper.queryDepositByShhId(shhId);
		if(n>0) {//下过定金了
			return 0;
		}else {//没下过
			Map<Object, Object> user=UserThreadLocal.get();
			String companyId=user.get("companyId").toString();
			String companyName=user.get("comName").toString();
			Long userid = Long.parseLong(user.get("id").toString());
			String username = user.get("realName").toString();
			map.put("operatorId", userid);
			map.put("operator", username);
			map.put("status", "0");
			map.put("permissionArea", "BSJ101");
			Long res = commonSqlServie.commonOperationDatabase(map, "demand_bond",false);
			Map<Object, Object> mm = new HashMap<>();
			mm.put("id", demandId);
			mm.put("isBond", 1);
			res = commonSqlServie.commonOperationDatabase(mm, "demand_customerBusinessInfo","id",false);//更改是否下定标记
			if(res>0) {
				return 1;
			}else {
				return 2;
			}
		}
		//return 1;
	}
	
	//租售转换保存
	@SystemServiceLog(operationType="保存")
	@Override
	public Long saveExchangeCustomerInfo(Map<String,Object> data) {
		String firstData = "";
		String demandData = "";
		String customerData = "";
		String customData = "";
		String demandId = "";
		Map<Object,Object> demandDataMap = new HashMap<>();
		Map<Object,Object> customerDataMap = new HashMap<>();
		Map<Object,Object> customDataMap = new HashMap<>();
		Map<String,Object> phoneMap = new HashMap<>();
		if(data.containsKey("firstData")) {//第一页数据
			firstData = data.get("firstData").toString();
			String[] params = firstData.split("&"); 
			for (int i = 0; i < params.length; i++) {  
		        String[] p = params[i].split("=");  
		        if (p.length == 2) {  
		        	if(p[0].equals("demandId")) {
		        		demandId = p[1];
		        		demandDataMap.put("id", p[1]);
		        		customerDataMap.put("demandId", p[1]);
		        		customDataMap.put("keyId", p[1]);
		        		phoneMap.put("demandId", p[1]);
		        	}
		        	if(p[0].equals("discStatusId")) {
		        		demandDataMap.put("discStatusId", p[1]);
		        	}
		        	if(p[0].equals("discStatus")) {
		        		demandDataMap.put("discStatus", p[1]);
		        	}
		        	//客户主电话
		        	if(p[0].equals("phone")) {
		        		phoneMap.put("phone", p[1]);
		        	}
		        	if(p[0].equals("relateName")) {
		        		phoneMap.put("remark", p[1]);
		        	}
		        	
		        }  
		    } 
		}
		if(data.containsKey("demandData")) {//第二页的需求数据
			demandData = data.get("demandData").toString();
			String[] params = demandData.split("&"); 
			for (int i = 0; i < params.length; i++) { 
				String[] p = params[i].split("="); 
				if (p.length == 2) {  
					if(p[0].equals("custName")) {
						customerDataMap.put("custName", p[1]);
						demandDataMap.put("custName", p[1]);
					}else if(p[0].equals("relateTypeId")) {
						customerDataMap.put("relateTypeId", p[1]);
					}else if(p[0].equals("relateTypeName")) {
						customerDataMap.put("relateTypeName", p[1]);
						demandDataMap.put("custCallType", p[1]);
					}else if(p[0].equals("transactionType")){
						if("求租".equals(p[1])) {
							demandDataMap.put("transactionTypeId", 1);
							demandDataMap.put("transactionType", "求购");
						}else {
							demandDataMap.put("transactionTypeId", 2);
							demandDataMap.put("transactionType", "求租");
						}
					}else {
						demandDataMap.put(p[0], p[1]);
					}
					
				}
			}
		}
		if(data.containsKey("customerData")) {//第二页的客户数据
			customerData = data.get("customerData").toString();
			String[] params = customerData.split("&"); 
			for (int i = 0; i < params.length; i++) { 
				String[] p = params[i].split("="); 
				if (p.length == 2) {  
					if(p[0].equals("sourceTypeId")) {
						demandDataMap.put(p[0], p[1]);
					}else if(p[0].equals("sourceType")) {
						demandDataMap.put(p[0], p[1]);
					}else if(p[0].equals("levelType")){
						demandDataMap.put(p[0], p[1]);
					}else if(p[0].equals("communicateStageId")) {
						demandDataMap.put(p[0], p[1]);
					}else if(p[0].equals("communicateStage")){
						demandDataMap.put(p[0], p[1]);
					}else {
						customerDataMap.put(p[0], p[1]);
					}
					
				}
			}
		}
		if(data.containsKey("customData")) {//第二页的自定义数据
			customData = data.get("customData").toString();
			String[] params = customData.split("&"); 
			for (int i = 0; i < params.length; i++) { 
				String[] p = params[i].split("="); 
				if (p.length == 2) {  
					customDataMap.put(p[0], p[1]);
				}
			}
			
		}
		
		Long res = commonSqlServie.commonOperationDatabase(demandDataMap, "demand_customerbusinessinfo", "id", false);//更新需求表
		commonSqlServie.commonOperationDatabase(customerDataMap, "demand_custrelater", "demandId", false);//更新客户信息表
		String condition = "ismainFlag=1";
		commonSqlServie.batchcommonUpdate(phoneMap, "demand_custrelaterphone", "demandId",demandId, condition);//更新客户主电话
		commonSqlServie.commonOperationDatabase(customDataMap, "sys_custom_column_value", "keyId", false);//更新自定义字段
		return res;
	}
	
	//保存收藏
	@SystemServiceLog(operationType="保存或取消收藏")
	@Override
	public Long updateStore(String demandId,int status) {
		Long res = 0l;
		Map<Object, Object> user = UserThreadLocal.get();
		Long userid = Long.parseLong(user.get("id").toString());
		String username = user.get("realName").toString();
		Map<Object,Object> m = new HashMap<>();
		m.put("demandId", demandId);
		m.put("isValid", status);
		Map<String,Object> store = customerMapper.queryStore(demandId,userid);
		if(status==1) {
			if(store==null) {//没收藏过，新增一条
				m.put("operatorId", userid);
				m.put("operator", username);
				res = commonSqlServie.commonOperationDatabase(m, "demand_mycollection", false);
				ExecutionResult.descFormat("", "设为收藏");
			}else {//改状态为收藏
				Long storeid = Long.parseLong(store.get("id").toString());
				m.put("id", storeid);
				res = commonSqlServie.commonOperationDatabase(m, "demand_mycollection","id", false);
				ExecutionResult.descFormat("", "更改为收藏");
			}
		}else {//改状态为取消收藏
			Long storeid = Long.parseLong(store.get("id").toString());
			boolean res1 = commonSqlServie.delData("demand_mycollection", "id", storeid+"", false);
			ExecutionResult.descFormat("", "取消收藏");
			if(res1)
				res = 1l;
		}
		return res;
	}
	
	//保存跟进、提醒
	@SystemServiceLog(operationType="保存")
	@Override
	public Long saveCustomerFollow(Map<String,Object> data) {
		Long res = 0l;
		Map<Object, Object> user=UserThreadLocal.get();
		String companyId=user.get("companyId").toString();
		String companyName=user.get("comName").toString();
		Long userid = Long.parseLong(user.get("id").toString());
		String username = user.get("realName").toString();
		Map<String,Object> dept = customerMapper.queryDeptName(userid);
		String deptid = dept.get("deptId").toString();
		String demandId = "";
		if(data.containsKey("followInfo")) {//写跟进
			Map<Object,Object> followInfo = (Map)data.get("followInfo");
			demandId = followInfo.get("demandId").toString();
			followInfo.put("companyId", companyId);
			followInfo.put("companyName", companyName);
			followInfo.put("operatorId", userid);
			followInfo.put("operator", username);
			followInfo.put("deptId", deptid);
			followInfo.put("followerId",userid);
			followInfo.put("follower",username);
			followInfo.put("permissionArea",deptid);
			followInfo.put("followTime",new Date());
			res = commonSqlServie.commonOperationDatabase(followInfo, "demand_followrecord", false);
			//客源表跟进时间
			Map<Object,Object> mm = new HashMap<>();
			mm.put("id",demandId);
			Map<String,Object> mainter =customerMapper.queryMainter(demandId) ;
			Long mainterId = Long.parseLong(mainter.get("maintainId").toString());
			if(mainterId==userid) {//维护人跟进时间
				mm.put("mainterFllowTime", new Date());
				res = commonSqlServie.commonOperationDatabase(mm, "demand_customerBusinessInfo","id", false);
			}else {//其他人员跟进时间
				mm.put("allFollowTime", new Date());
				res = commonSqlServie.commonOperationDatabase(mm, "demand_customerBusinessInfo","id", false);
			}
			ExecutionResult.descFormat("", "保存房源跟进信息");
		}
		if(data.containsKey("remindInfo")) {//写提醒
			Map<Object,Object> remindInfo = (Map)data.get("remindInfo");
			String receivePeopleName = remindInfo.get("receivePeopleName").toString();
			if(!"".equals(receivePeopleName)) {
				remindInfo.put("sendPeopleId", userid);
				remindInfo.put("sendPeopleName", username);
				remindInfo.put("status", 0);
				remindInfo.put("operator", username);
				res = commonSqlServie.commonOperationDatabase(remindInfo, "sys_remind", false);
				ExecutionResult.descFormat("", "保存提醒");
			}
			
		}
		if(data.containsKey("isCancelNotice")) {//通知撤单
			Map<String,Object> mainter =customerMapper.queryMainter(demandId) ;
			Map<Object,Object> mm = new HashMap<>();
			mm.put("sendPeopleId", userid);
			mm.put("sendPeopleName", username);
			mm.put("receivePeopleId", mainter.get("maintainId"));
			mm.put("receivePeopleName", mainter.get("maintainer"));
			mm.put("remindTime",new Date());
			mm.put("status", 0);
			mm.put("operator", username);
			mm.put("remindContent", "通知撤单");
			res = commonSqlServie.commonOperationDatabase(mm, "sys_remind", false);
			//二手房源表撤单标志
			mm = new HashMap<>();
			mm.put("id",demandId);
			mm.put("isCancelNotice", 1);
			res = commonSqlServie.commonOperationDatabase(mm, "demand_customerBusinessInfo","id", false);
			ExecutionResult.descFormat("", "通知维护人撤单");
		}
		
		return res;
	}
	
	@SystemServiceLog(operationType="查询客户档案")
	@Override
	public Page<Map<String, Object>> getArchives(String demandId,String type,int page,int limit){
		PageHelper.startPage(page, limit);
		Page<Map<String, Object>> pageInfo = null;
		if("house".equals(type)) {//查房源
			pageInfo = customerMapper.queryCustomerHouse(demandId);
			ExecutionResult.descFormat("客源id："+demandId+"", "查询客户房源");
		}else if("rent".equals(type)) {//查求租
			pageInfo = customerMapper.queryCustomerDemand(demandId,CustomerTransactionEnum.RENT.getCode());
		}else if("buy".equals(type)) {//查求购
			pageInfo = customerMapper.queryCustomerDemand(demandId,CustomerTransactionEnum.BUY.getCode());
		}
		
		
		return pageInfo;
	}
	
	
	@SystemServiceLog(operationType="保存客户电话")
	@Override
	public Long saveCustomerPhone(Map<String,Object> data) {
		Map<Object,Object> mm = (Map)data;
		Long res = commonSqlServie.commonOperationDatabase(mm, "demand_custRelaterPhone", false);
		ExecutionResult.descFormat("客源id："+mm.get("demandId").toString(), "新增业主电话");
		return res;
	}
	
	@SystemServiceLog(operationType="修改客户电话")
	@Override
	public Long updateCustomerPhone(Map<String,Object> data) {
		Map<Object,Object> mm = (Map)data;
		Long res = commonSqlServie.commonOperationDatabase(mm, "demand_custRelaterPhone","id", false);
		ExecutionResult.descFormat("电话记录id："+mm.get("id").toString(), "修改业主电话");
		return res;
	}
	
	@SystemServiceLog(operationType="删除客户电话")
	@Override
	public boolean delCustomerPhone(Long id) {
		boolean res = commonSqlServie.delData("demand_custRelaterPhone","id",id+"", false);
		ExecutionResult.descFormat("电话记录id："+id, "删除业主电话");
		return res;
	}
	
	//变更经纪人具体实现
	public Long updateMyAgent(String demandId,Long recordid,Long agentId,String agentType,String agentTypeName) {
		Long res = 0l;
		Map<Object, Object> user=UserThreadLocal.get();
		String companyId=user.get("companyId").toString();
		String companyName=user.get("comName").toString();
		Long userid = Long.parseLong(user.get("id").toString());//操作人id
		String username = user.get("realName").toString();//操作人
		Map dept = customerMapper.queryDeptName(agentId);//经纪人部门
		String deptid = dept.get("deptId").toString();
		String deptname = dept.get("deptName").toString();
		String agentName = dept.get("realName").toString();
		//经纪人信息
		Map<Object,Object> m = new HashMap<>();
		m.put("demandId", demandId);
		m.put("agentType", agentType);
		m.put("agentTypeName", agentTypeName);
		m.put("agentId", agentId);
		m.put("agentName", agentName);
		m.put("companyId", companyId);
		m.put("companyName", companyName);
		m.put("departmentId", deptid);
		m.put("departmentName", deptname);
		m.put("operatorId", userid);
		m.put("operator", username);
		if(recordid!=0) {//修改
			m.put("id", recordid);
			res= commonSqlServie.commonOperationDatabase(m,"demand_custRelateAgent", "id",false);
		}else {//新增
			res = commonSqlServie.commonOperationDatabase(m, "demand_custRelateAgent", false);
		}
		return res;
	}
	
	@SystemServiceLog(operationType="变更维护人")
	@Override
	public Long updateAgent(Map<String,Object> data) {
		Long res = 0l;
		boolean res1 = false;
		String id = data.get("demandId").toString();
		Long recordid = 0l;
		if(!"".equals(data.get("recordid").toString()))
			recordid = Long.parseLong(data.get("recordid").toString());
		Long peopleid = Long.parseLong(data.get("peopleid").toString());
		String people = data.get("people").toString();
		String type = data.get("type").toString();
		
		//查操作人
		Map<Object, Object> user=UserThreadLocal.get();
		Long userid = Long.parseLong(user.get("id").toString());
		String username = user.get("realName").toString();
		
		if("wh".equals(type)) {//变更维护人
			Map m = new HashMap<>();
			m.put("id", id);
			m.put("maintainer", people);
			m.put("maintainId", peopleid);
			Map dept = customerMapper.queryDeptName(peopleid);
			m.put("mainterDeptId", dept.get("deptId"));
			m.put("mainterDept", dept.get("deptName"));
			m.put("permissionArea", dept.get("deptId"));
			//修改客户需求表
			res = commonSqlServie.commonOperationDatabase(m, "demand_customerbusinessinfo", "id", false);
			//变更或新增维护人
			res = updateMyAgent(id,recordid,peopleid,AgentTypeEnum.MANAGE_PERSON.getCode(),AgentTypeEnum.MANAGE_PERSON.getDesc());
		}
		
		
		
		if("wh".equals(type)) {
			
		}
		
		return res;
		
	}
	
	@SystemServiceLog(operationType="客源查询二手房源表格信息")
	@Override
	public Page<Map<String, Object>> customerFindHouseList(String conditions, int page, int limit) {
		PageHelper.startPage(page, limit);
		
		CustomerFindHouseEntity query=null;
		if (StringUtils.isEmpty(conditions)) {
			query=new CustomerFindHouseEntity();
		}else {
			query=JSON.parseObject(conditions, CustomerFindHouseEntity.class);
		}	
		dataAuthHelper.auth(MenusEnum.MENU_21.getValue(),UserThreadLocal.get().get("id").toString());
		Page<Map<String, Object>> result=customerMapper.customerFindHouseList(query.toSql());
		ExecutionResult.descFormat(UserThreadLocal.get().get("id").toString(), "客源查询二手房源表格信息");
		return result;
	}
	@SystemServiceLog(operationType="新增需求")
	@Override
	public boolean addCustomer(String dataJson) {
		if (StringUtils.isNotEmpty(dataJson)) {		
			
			Map<Object, Object> data=JSON.parseObject(dataJson, Map.class);
			if (data.get("transactionTypeId")==null||StringUtils.isEmpty(data.get("transactionTypeId").toString())) {
				throw new BusinessException("系统错误");
			}
			/**交易类型**/
			CustomerTransactionEnum transEnum=CustomerTransactionEnum.parseOf(data.get("transactionTypeId").toString());
			String formName=data.get("formName").toString();
			Map<Object, Object> user=UserThreadLocal.get();
			String companyId=user.get("companyId").toString();
			String companyName=user.get("comName").toString();
			String deptId=user.get("deptId").toString();
			String deptName=user.get("depName").toString();
			String cityCode=user.get("areaCode").toString();
			cityCode=cityCode.substring(0,4);
			String customerId=CustomerCodeTool.createCustomerCode();
			String prefix="QG-";
			if (transEnum.equals(CustomerTransactionEnum.RENT)) {
				prefix="QZ-";
			}
			data.put("id", prefix+customerId);
			data.put("companyId", companyId);
			data.put("companyName", companyName);
			data.put("formName", formName);
			data.put("recordTime", new Date());
			data.put("maintainId", user.get("id"));
			data.put("maintainer", user.get("realName"));
			data.put("mainterDeptId", deptId);
			data.put("mainterDept", deptName);
			data.put("permissionArea", deptId);
			data.put("operatorId", user.get("id"));
			data.put("statusId", CustomerStatusEnum.EFFECTIVE.getValue());
			data.put("status", CustomerStatusEnum.EFFECTIVE.getDisplayName());
			data.put("taobaoStatusId", TaoBaoStatusEnum.NOT_TAOBAO.getCode());
			data.put("taobaoStatus", TaoBaoStatusEnum.NOT_TAOBAO.getDesc());
			//设置一手、二手
			String housePropType="";
			if (data.get("one")!=null&&!"".equals(data.get("one"))) {
				housePropType="01";
				data.remove("one");
			}
			if (data.get("two")!=null&&!"".equals(data.get("two"))) {
				if (!housePropType.equals("")) {
					housePropType+=",";
				}
				housePropType+="02";
				data.remove("two");
			}
			String transactionTypeId=data.get("transactionTypeId").toString();
			
			Integer until=WANYUAN;
			if (CustomerTransactionEnum.RENT.equals(transEnum)) {
				until=YUAN;
			}
			if (!housePropType.equals("")) {
				data.put("housePropType", housePropType);
			}
			//设置价格、面积
			if (data.get("minPrice")==null||"".equals(data.get("minPrice"))) {
				data.put("minPrice", 0);
			}else if (!"0".equals(data.get("minPrice"))) {
				data.put("minPrice", convertFen(data.get("minPrice").toString(), until));
			}
			if (data.get("maxPrice")==null||"不限".equals(data.get("maxPrice").toString())) {
				data.put("maxPrice", 0);
			}else if (!"0".equals(data.get("maxPrice"))) {
				data.put("maxPrice", convertFen(data.get("maxPrice").toString(), until));
			}
			if (data.get("minSpace")==null) {
				data.put("minSpace", 0);
			}
			if (data.get("maxSpace")==null||"不限".equals(data.get("maxSpace").toString())) {
				data.put("maxSpace", 0);
			}
			//设置客源等级			
			List<Map<Object, Object>> list=customerMapper.queryCustomerLevel(cityCode, companyId, transactionTypeId);
			if (list!=null&&list.size()>0) {
				for (Map<Object, Object> map : list) {
					//判断等级条件是否为急切
					if (map.get("conditions")!=null&&!map.get("conditions").equals(ResCustLevelConditionEnum.EAGER.getValue())) {
						continue;
					}
					//如果等级条件为急切，判断需求是否有急切
					if (map.get("conditions")!=null&&map.get("conditions").equals(ResCustLevelConditionEnum.EAGER.getValue())) {
						if (data.get("isUrgent")==null||!"1".equals(data.get("isUrgent").toString())) {
							continue;
						}
					}
					Integer beginPrice=0;
					Integer endPrice=0;
					Integer beginSpace=0;
					Integer endSpace=0;
					if (map.get("beginPrice")!=null) {
						beginPrice=Integer.parseInt(map.get("beginPrice").toString());
					}
					if (map.get("endPrice")!=null) {
						endPrice=Integer.parseInt(map.get("endPrice").toString());
					}
					if (map.get("beginSpace")!=null) {
						beginSpace=Integer.parseInt(map.get("beginSpace").toString());
					}
					if (map.get("endSpace")!=null) {
						endSpace=Integer.parseInt(map.get("endSpace").toString());
					}
					Integer minPrice=Integer.parseInt(data.get("minPrice").toString());
					Integer maxPrice=Integer.parseInt(data.get("maxPrice").toString());
					Integer minSpace=Integer.parseInt(data.get("minSpace").toString());
					Integer maxSpace=Integer.parseInt(data.get("maxSpace").toString());
					if (minPrice>=beginPrice&&maxPrice<=endPrice&&minSpace>=beginSpace&&maxSpace<=endSpace) {
						data.put("levelType", map.get("levelType"));
						break;
					}
				}
				if (data.get("levelType")==null||"".equals(data.get("levelType").toString())) {
					data.put("levelType", "C");
				}
			}else {
				data.put("levelType", "C");
			}
			
			if (data.get("labeld")!=null&&data.get("labeld").toString().contains("学区房")) {
				data.put("isSchoolRoom", 1);
			}
			//动态表单内容
			Map<Object,Object> customData=(Map<Object, Object>) data.get("customData");
			if (data.get("customData")!=null) {
				data.remove("customData");
				customData.put("keyId", customerId);
				customData.put("formName", formName);
				commonSqlServie.commonOperationDatabase(customData, "sys_custom_column_value", false);
			}
			//联系信息
			Map<Object,Object> custRelater=new HashMap<>();
			custRelater.put("demandId", customerId);
			custRelater.put("operatorId", user.get("id"));
			custRelater.put("permissionArea", deptId);
			custRelater.put("companyId", companyId);
			custRelater.put("companyName", companyName);
			custRelater.put("custName", data.get("custName"));
			custRelater.put("relateTypeId", data.get("relateTypeId"));
			data.remove("relateTypeId");
			custRelater.put("relateTypeName", data.get("relateTypeName"));
			data.remove("relateTypeName");
			if (data.get("consumptIdeaId")!=null) {
				custRelater.put("consumptIdeaId", data.get("consumptIdeaId"));
				custRelater.put("consumptIdeaName", data.get("consumptIdeaName"));
				data.remove("consumptIdeaId");
				data.remove("consumptIdeaName");
			}
			if (data.get("censusRegisterId")!=null) {
				custRelater.put("censusRegisterId", data.get("censusRegisterId"));
				custRelater.put("censusRegister", data.get("censusRegister"));
				data.remove("censusRegisterId");
				data.remove("censusRegister");
			}
			if (data.get("nationsId")!=null) {
				custRelater.put("nationsId", data.get("nationsId"));
				custRelater.put("nations", data.get("nations"));
				data.remove("nationsId");
				data.remove("nations");
			}
			if (data.get("IDCard")!=null) {
				custRelater.put("IDCard", data.get("IDCard"));
				data.remove("IDCard");
			}
			if (data.get("email")!=null) {
				custRelater.put("email", data.get("email"));
				data.remove("email");
			}
			if (data.get("qqNum")!=null) {
				custRelater.put("qqNum", data.get("qqNum"));
				data.remove("qqNum");
			}
			if (data.get("wxNum")!=null) {
				custRelater.put("wxNum", data.get("wxNum"));
				data.remove("wxNum");
			}
			if (data.get("vehicleId")!=null) {
				custRelater.put("vehicleId", data.get("vehicleId"));
				custRelater.put("vehicle", data.get("vehicle"));
				data.remove("vehicleId");
				data.remove("vehicle");
			}
			if (data.get("carType")!=null) {
				custRelater.put("carType", data.get("carType"));
				data.remove("carType");
			}
			commonSqlServie.commonOperationDatabase(custRelater, "demand_custRelater", false);
			//电话信息
			Map<Object,Object> custRelaterPhone=new HashMap<>();
			custRelaterPhone.put("demandId", customerId);
			custRelaterPhone.put("operatorId", user.get("id"));
			custRelaterPhone.put("companyId", companyId);
			custRelaterPhone.put("companyName", companyName);
			custRelaterPhone.put("phone", data.get("phone"));
			data.remove("phone");
			custRelaterPhone.put("relateType", data.get("relateType"));
			data.remove("relateType");
			custRelaterPhone.put("relateName", data.get("relateName"));
			data.remove("relateName");
			custRelaterPhone.put("remark", data.get("relateName"));
			custRelaterPhone.put("ismainFlag", 1);
			commonSqlServie.commonOperationDatabase(custRelaterPhone, "demand_custRelaterPhone", false);
			//增加需求
			commonSqlServie.idCustomOperationDatabase(data, "demand_customerBusinessInfo", false);
			
			/** 添加录入人、开盘人、维护人**/
			List<String> agentList=new ArrayList<>();

			String columns="companyId,companyName,demandId,agentId,agentName,operatorId,departmentId,departmentName,agentType,agentTypeName";
			StringBuilder value=new StringBuilder();
			value.append("'");
			value.append(companyId);
			value.append("','");
			value.append(companyName);
			value.append("',");
			value.append(customerId);
			value.append(",");
			value.append(user.get("id"));
			value.append(",'");
			value.append(user.get("realName"));
			value.append("',");
			value.append(user.get("id"));
			value.append(",'");
			value.append(user.get("deptId"));
			value.append("','");
			value.append(user.get("depName"));
			value.append("'");
			agentList.add(value.toString()+",'"+AgentTypeEnum.INPUT_PERSON.getCode()+"','"+AgentTypeEnum.INPUT_PERSON.getDesc()+"'");
			agentList.add(value.toString()+",'"+AgentTypeEnum.MANAGE_PERSON.getCode()+"','"+AgentTypeEnum.MANAGE_PERSON.getDesc()+"'");
			commonSqlServie.batchAdd(columns, "demand_custRelateAgent", agentList, false);
			ExecutionResult.descFormat(customerId, "新增需求");
		}		
		return true;
	}
	
	@SystemServiceLog(operationType="查询带看房源列表")
	@Override
	public Page<Map<String, Object>> queryCustomerListByIds(String ids, int page, int limit) {
		PageHelper.startPage(page, limit);
		Page<Map<String, Object>> result=customerMapper.queryCustomerListByIds(ids);
		ExecutionResult.descFormat(ids, "查询带看房源列表");
		return result;
	}
	@SystemServiceLog(operationType="查询客源列表")
	@Override
	public Page<Map<String, Object>> queryCustomerTableDatas(String conditions, int page, int limit) {
		PageHelper.startPage(page, limit);
		
		CustomerQueryEntity query=null;
		if (StringUtils.isEmpty(conditions)) {
			query=new CustomerQueryEntity();
		}else {
			query=JSON.parseObject(conditions, CustomerQueryEntity.class);
		}	
		//dataAuthHelper.auth(MenusEnum.MENU_21.getValue(),UserThreadLocal.get().get("id").toString());
		Page<Map<String, Object>> result=customerMapper.queryCustomerList(query.toSql());
		ExecutionResult.descFormat(UserThreadLocal.get().get("id").toString(), "查询客源列表");
		return result;
	}
	@SystemServiceLog(operationType="批量删除客源需求")
	@Override
	public int deleteCustomer(String customerIds) {
		if (StringUtils.isNotEmpty(customerIds)) {
			String[] array=customerIds.split(",");
			StringBuilder sb=new StringBuilder();
			for (String item : array) {
				if (StringUtils.isNotEmpty(item)) {
					if (sb.length()>0) {
						sb.append(",");
					}
					sb.append("'");
					sb.append(item);
					sb.append("'");
				}
			}
			if (sb.length()>0) {
				commonSqlServie.delData("demand_customerBusinessInfo", "id", sb.toString(), false);
				ExecutionResult.descFormat(sb.toString(), "批量删除客源需求");
			}
			return 1;
		}
		return 0; 
	}
	@SystemServiceLog(operationType="批量转移客源需求")
	@Override
	public boolean customerTransfer(String customerIds, long userId) {
		ExecutionResult.descFormat(customerIds+","+userId, "批量转移客源需求");
		if (StringUtils.isNotEmpty(customerIds)&&userId>0) {
			Map dept = customerMapper.queryDeptName(userId);
			String[] array=customerIds.split(",");
			StringBuilder sb=new StringBuilder();
			for (String item : array) {
				if (StringUtils.isNotEmpty(item)) {
					if (sb.length()>0) {
						sb.append(",");
					}
					sb.append("'");
					sb.append(item);
					sb.append("'");
				}
			}
			if (sb.length()>0) {
				Map<String, Object> fields=new HashMap<>();
				fields.put("permissionArea", dept.get("deptId"));
				fields.put("mainterDept", dept.get("deptName"));
				fields.put("operatorId", userId);
				fields.put("maintainer", dept.get("realName"));
				fields.put("maintainId", userId);
				fields.put("mainterDeptId", dept.get("deptId"));
				commonSqlServie.batchcommonUpdate(fields, "demand_customerBusinessInfo", "id", sb.toString(), null);
				fields=new HashMap<>();
				fields.put("agentId", userId);
				fields.put("agentName", dept.get("realName"));
				fields.put("departmentId", dept.get("deptId"));
				fields.put("departmentName", dept.get("deptName"));
				String condition="agentType='"+AgentTypeEnum.MANAGE_PERSON.getCode()+"'";
				commonSqlServie.batchcommonUpdate(fields, "demand_custRelateAgent", "demandId", sb.toString(), condition);
				return true;
			}
			
		}
		return false;
	}
	
	/**
	 * 
		 * 将万元或元转换成分
		 * @Description: 将万元或元转换成分
		 * @param value 待转换的值
		 * @param unit 万元或元换算单位
		 * @return  整数
		 * Integer
	 */
	private Integer convertFen(String value,Integer unit) {
		Double d=Double.parseDouble(value);
		d=d*unit;
		d=Math.floor(d);
		return d.intValue();
	}
}
