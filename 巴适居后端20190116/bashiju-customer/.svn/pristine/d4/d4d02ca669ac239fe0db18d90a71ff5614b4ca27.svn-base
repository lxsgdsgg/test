package com.bashiju.customer.controller;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.alibaba.fastjson.JSON;
import com.bashiju.customer.service.CustomerService;

import com.bashiju.customer.service.FormService;
import com.bashiju.enums.HouseStatusEnum;
import com.bashiju.enums.HouseUsesEnum;
import com.bashiju.utils.service.BaseController;

import com.bashiju.utils.exception.BusinessException;
import com.bashiju.utils.exception.ErrorCode;
import com.bashiju.utils.util.BashijuResult;
import com.github.pagehelper.Page;


@Controller 
public class CustomerController extends BaseController{
	
	@Autowired
	private CustomerService customerservice;
	@Autowired
	FormService formService;
	
	/**
	 * 具体的跳转逻辑
	 * @param pageName
	 * @return 视图
	 */
	@RequestMapping(value="{pageName}",method=RequestMethod.GET)
	public String toPage(@PathVariable("pageName") String pageName,Model m)
	{
		return pageName;
	}
	
	@RequestMapping(value="list")
	public ModelAndView goHouseList(HttpServletRequest request,HttpServletResponse response){
		ModelAndView mv=getModelAndView(request, response, "customer/list");
		//mv.addObject("communitList", JSON.toJSONString(buildingService.getRegionList()));
		mv.addObject("houseList",HouseUsesEnum.enumList);
		mv.addObject("houseStatusList",HouseStatusEnum.enumList);
		mv.addObject("communitList", JSON.toJSONString(formService.searchCommunity()));
		mv.addObject("departmentList", JSON.toJSONString(formService.queryDept()));
		mv.addObject("dynamicColumnList",formService.queryCustomField("house"));
		return mv;
	}
	

	@RequestMapping(value="searchCustomerList")
	@ResponseBody
	public Map<String,Object> searchCustomerList(String condition,int start,int length,int draw) throws Exception{
		int page=1;
		if (start>0) {
			start++;
			page=start/length;
			if (page>0&&(start%length)>0) {
				page++;
			}
		}
		//condition="{\"transactionTypeId\":3,\"status\":{\"isAll\":\"\",\"effective\":1}}";
		//Page<Map<String, Object>> pageInfo = erHousingService.queryHousingTableDatas(condition, page, length);
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("recordsTotal", 0);
		map.put("data", "[]");
		map.put("draw", draw);
		map.put("recordsFiltered", 0);
		return map;
	}
	
	
	
	
	@RequestMapping(value="saveDeposit")
	@ResponseBody
	public BashijuResult saveDeposit(String depositInfo) {
		
		int res=customerservice.saveDeposit(depositInfo);
		if(res>0) {
			return BashijuResult.ok();
		}else {
			throw new BusinessException(ErrorCode.SYSTEM_ADD_ERROR);
		}
		
	}
	/**
	 * 
		 * 查询用户自定义隐藏的列名称
		 * @Description: 查询表格隐藏的列名称
		 * @param formName 表单名称
		 * @return  返回columns数组["id","name"]
		 * @return: BashijuResult
	 */
	@RequestMapping(value="getTableColHiddenList")
	@ResponseBody
	public BashijuResult getTableColHiddenList(String formName) {
		Map<String, Object> result=formService.queryTableHiddenField(formName);
		return BashijuResult.ok(result);
	}
	/**
	 * 
		 * 保存用户自定义列设置
		 * @Description: 保存用户自定义列设置
		 * @param formName 表单名称
		 * @param columns 隐藏的列名称，用英文逗号分隔
		 * @return 
		 * @return: BashijuResult
	 */
	@RequestMapping(value="setTableColHidden")
	@ResponseBody
	public BashijuResult setTableColHidden(String formName,String columns) {
		boolean result=formService.saveTableHiddenInfo(formName, columns);
		return BashijuResult.ok();
	}
	/**
	 * 
	 * @Title: saveHouseFollow (保存房源跟进、提醒和通知撤单) 
	 * @Description: TODO(保存房源的跟进和提醒信息)   
	 * @param: @param data（请求传来的参数（一个json对象）：data = {
	                    //若填写跟进
	                      followInfo：followInfo{shhId:房源id，followType：跟进方式id，followTypeName：跟进方式名称，content:跟进内容}
	                    //若填写提醒
	                     remindInfo：remindInfo{receivePeopleId:提醒人id，receivePeopleName：提醒人名称，remindTime:提醒时间，remindContent：提醒内容}
	                    //若选中通知撤单
	                    cancelOrder:1
	                 }
	 * @param: @return  res (服务返回一个Long型,0为异常，>0为正常)    
	 * @return: BashijuResult (返回执行情况)      
	 * @throws liwen
	 */
	@RequestMapping(value="saveCustomerFollowAndRemind")
	@ResponseBody
	public BashijuResult saveHouseFollow(@RequestBody Map<String,Object> data) {
		
		Long res=customerservice.saveCustomerFollow(data);
		if(res>0) {
			return BashijuResult.ok();
		}else {
			throw new BusinessException(ErrorCode.SYSTEM_ADD_ERROR);
		}
		
	}
	/**
	 * 
		 * 客源查找房源表格
		 * @Description: 客源查找房源表格
		 * @param conditions 查询条件，可以为空，{"departmentOrUser":{"type":"1、部门，2、用户","value":部门或用户id},
		 * "buildSpace":{"min":最小面积,"max":最大面积},"areas":[{"type":"1:行政区域、2:片区、3:小区","value":id值}],
		 * "building":"座栋","vagueData":{"1、房源编号，2、业主姓名，3、门牌号，4、业主电话、5小区名称，6、钥匙编号，7、委托编号，8、推荐标签，9、房源备注","value":关键值}
		 * @param page
		 * @param limit
		 * @return 
		 * Map<String,Object>
	 */
	@RequestMapping(value="customerFindHouseList")
	@ResponseBody
	public Map<String, Object> customerFindHouseList(String conditions, int page, int limit){
		Page<Map<String, Object>> pageInfo = customerservice.customerFindHouseList(conditions,page,limit);
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("count", pageInfo.getTotal());
		map.put("data", pageInfo.getResult());
		map.put("code", 0);
		map.put("msg", "");
		return map;
	}
}
