/**  
 * All rights Reserved, Designed By www.bashiju.com
 * @Title:  TaskManageServiceImpl.java   
 * @Package com.bashiju.manage.service.impl   
 * @Description:    TODO(用一句话描述该文件做什么)   
 * @author: wangpeng     
 * @date:   2018年12月3日 下午4:58:53   
 * @version V1.0 
 * @Copyright: 2018 www.bashiju.com Inc. All rights reserved. 
 * 注意：本内容仅限于云南巴士居网络服务公司内部传阅，禁止外泄以及用于其他的商业项目*/

package com.bashiju.oa.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bashiju.oa.mapper.TaskManageMapper;
import com.bashiju.oa.service.TaskManageService;
import com.bashiju.utils.exception.BusinessException;
import com.bashiju.utils.service.CommonSqlServie;
import com.bashiju.utils.threadlocal.UserThreadLocal;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;

/**   
 * @ClassName:  TaskManageServiceImpl   
 * @Description:任务管理服务
 * @author: wangpeng
 * @date:   2018年12月3日 下午4:58:53   
 * @Copyright: 2018 www.bashiju.com Inc. All rights reserved. 
 * 本内容仅限于云南巴士居网络服务公司内部传阅，禁止外泄以及用于其他的商业项目
 */
@Service
public class TaskManageServiceImpl extends CommonSqlServie implements TaskManageService {
	@Autowired
	private TaskManageMapper taskManageMapper;

	/**   
	 * 条件查询任务信息
	 * <p>Title: queryTask</p>   
	 * <p>Description: 条件查询任务信息 </p>   
	 * @param taskName 任务名称
	 * @param page 当前页数
	 * @param limit 每页总条数
	 * @see com.bashiju.manage.service.TaskManageService#queryTask(java.lang.String, int, int)   
	 */
	
	@Override
	public Page<Map<String, Object>> queryTask(String taskName, int page, int limit) {
		PageHelper.startPage(page, limit);
		//TODO:权限
		Page<Map<String, Object>> pages = taskManageMapper.queryTask(taskName);
		return pages;
	}
	
	/**
	 * 逻辑删除任务
	 * <p>Title: delTask</p>   
	 * <p>Description: 逻辑删除任务</p>   
	 * @param taskId 任务编号
	 * @see com.bashiju.oa.service.TaskManageService#delTask(java.lang.String)
	 */
	@Override
	public boolean delTask(String taskId) {
		if(StringUtils.isEmpty(taskId))
			throw new BusinessException("任务编号不能为空");
		boolean result = this.delData("sys_task_main", "id", taskId, false);
		return result;
	}

	/**   
	 * 新增或修改任务
	 * <p>Title: addOrUpdTask</p>   
	 * <p>Description:新增或修改任务 </p>   
	 * @param map
	 * @see com.bashiju.oa.service.TaskManageService#addOrUpdTask(java.util.Map)   
	 */
	
	@Override
	public boolean addOrUpdTask(Map<Object, Object> map) {
		if(map==null)
			throw new BusinessException("参数不能为空");
		long result = 0;
		String beginTime = map.get("beginTime").toString();
		String endTime = map.get("endTime").toString();
		String companyId = UserThreadLocal.get().get("companyId").toString();
		//判断任务是否已创建
		long isExist = taskManageMapper.queryTaskIsExist(companyId, beginTime, endTime);
		if(isExist > 0)
			throw new BusinessException("该时间内已创建任务");
		if(!map.containsKey("id")|| StringUtils.isEmpty("id")|| map.get("id") ==null) {
			//新增
			map.put("operatorId", UserThreadLocal.get().get("id"));
			map.put("permissionArea", UserThreadLocal.get().get("deptId"));
			 result = this.commonOperationDatabase(map, "sys_task_main", false);
		}else {
			//修改
			result = this.commonOperationDatabase(map, "sys_task_main", "id", false);
		}
		if(result > 0)
			return true;
		return false;
	}

	/**   
	 * <p>Title: taskDistributed</p>   
	 * <p>Description: </p>   
	 * @param paramMap
	 * @return   
	 * @see com.bashiju.oa.service.TaskManageService#taskDistributed(java.util.List)   
	 */
	
	@Override
	public boolean taskDistributed(Map<String,Object> map) {
		List<Map<String,Object>> addArr = new ArrayList<Map<String,Object>>();
		List<Map<String,Object>> updateArr = new ArrayList<Map<String,Object>>();
		List<String> fieldValue = new ArrayList<String>();
		Map<String,Object> fields = new HashMap<String, Object>();
		String key= "";
		String value="";
		//获取部门下的所有经纪人
		List<Map<String,Object>> user =  taskManageMapper.queryUserBelongDept(map.get("deptId").toString());
		if(!StringUtils.isEmpty(map.get("deptId").toString())) {
				//部门
				String condition = "deptId ='"+map.get("deptId")+"'";
				fields.put("isvalid", 0);
			    this.batchcommonUpdate(fields, "sys_task_detailed", "taskId", map.get("taskId").toString(),condition);
				for(Map<String,Object> temp :user) {
					temp.put("permissionArea", UserThreadLocal.get().get("deptId"));
					temp.put("operatorId", UserThreadLocal.get().get("id"));
					temp.putAll(map);
					addArr.add(temp);
				}
				for(Map<String,Object> mm : addArr) {
					value="";
					key="";
					boolean flag=true;
					for(Entry<String, Object> vo : mm.entrySet()){
						if(!flag) {
							value+=",";
							key+=",";
						}
						value+= "'"+vo.getValue()+"'";
						key+= vo.getKey();
						flag=false;
					}
					fieldValue.add(value);
				}
				if(addArr.size()>0) {
					this.batchAdd(key, "sys_task_detailed", fieldValue, false);
				}
		}else {
			if("".equals(map.get("taskId"))|| map.get("taskId") == null)
				throw new BusinessException("任务编号不能为空");
			if("".equals(map.get("agentId"))|| map.get("agentId") == null)
				throw new BusinessException("经纪人编号不能为空");
			String taskId = map.get("taskId").toString();
			String agentId = map.get("agentId").toString();
			long isExist = taskManageMapper.queryAgentIsExistTask(taskId,agentId);
			List<Map<String,Object>> agentInfo = taskManageMapper.queryAgentInfoById(agentId);
			if(isExist > 0 ) {
				 String condition = "agentId ='"+agentId+"'";
				 this.batchcommonUpdate(map, "sys_task_detailed", "taskId", map.get("taskId").toString(),condition);
			}else {
				for(Map<String,Object> temp : agentInfo) {
					temp.put("permissionArea", UserThreadLocal.get().get("deptId"));
					temp.put("operatorId", UserThreadLocal.get().get("id"));
					temp.putAll(map);
					addArr.add(temp);
				}
				for(Map<String,Object> mm : addArr) {
					value="";
					key="";
					boolean flag=true;
					for(Entry<String, Object> vo : mm.entrySet()){
						if(!flag) {
							value+=",";
							key+=",";
						}
						value+= "'"+vo.getValue()+"'";
						key+= vo.getKey();
						flag=false;
					}
					fieldValue.add(value);
				}
				this.batchAdd(key, "sys_task_detailed", fieldValue, false);
			}
		}
		return true;
	}

	/**   
	 * <p>Title: queryTaskDetail</p>   
	 * <p>Description: </p>   
	 * @param taskId
	 * @return   
	 * @see com.bashiju.oa.service.TaskManageService#queryTaskDetail(java.lang.String)   
	 */
	
	@Override
	public Page<Map<String, Object>> queryTaskDetail(String taskId,int page,int limit) {
		PageHelper.startPage(page, limit);
		//TODO:权限？
		Page<Map<String, Object>> pages = taskManageMapper.queryTaskDetail(taskId);
		return pages;
	}

	/**   
	 * <p>Title: queryDistributedTaskDetail</p>   
	 * <p>Description: </p>   
	 * @param agentId
	 * @param taskId
	 * @return   
	 * @see com.bashiju.oa.service.TaskManageService#queryDistributedTaskDetail(java.lang.String, java.lang.String)   
	 */
	
	@Override
	public Map<String, Object> queryAgentDistributedTaskDetail(String agentId, String taskId) {
		return taskManageMapper.queryAgentDistributedTaskDetail(agentId, taskId);
	}
}
