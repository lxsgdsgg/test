package com.bashiju.www.service.house.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSON;
import com.bashiju.enums.DividiintoDealTypeEnum;
import com.bashiju.enums.HouseTransactionEnum;
import com.bashiju.enums.HouseUsesEnum;
import com.bashiju.enums.pc.ConditionTypeEnum;
import com.bashiju.webservice.mapper.ArticleMapper;
import com.bashiju.webservice.mapper.CommMapper;
import com.bashiju.webservice.mapper.HouseMapper;
import com.bashiju.wutils.exception.BusinessException;
import com.bashiju.wutils.exception.ErrorCodeEnum;
import com.bashiju.wutils.log.ExecutionResult;
import com.bashiju.wutils.log.SystemServiceLog;
import com.bashiju.wutils.redis.ICacheService;
import com.bashiju.wutils.util.Md5EncryptUtils;
import com.bashiju.www.global.WebGlobal;
import com.bashiju.www.pojo.comm.WebPage;
import com.bashiju.www.pojo.service.input.house.HouseMapListParam;
import com.bashiju.www.pojo.service.input.house.HouseMapParam;
import com.bashiju.www.pojo.service.input.house.HouseSameParam;
import com.bashiju.www.pojo.service.input.house.HouseTipOffParam;
import com.bashiju.www.pojo.service.input.house.RentHouseParam;
import com.bashiju.www.pojo.service.input.house.SellHouseParam;
import com.bashiju.www.pojo.service.out.article.RentSkillLinkResult;
import com.bashiju.www.pojo.service.out.comm.ThemeResult;
import com.bashiju.www.pojo.service.out.comm.HouseTotalResult;
import com.bashiju.www.pojo.service.out.house.AgentResult;
import com.bashiju.www.pojo.service.out.house.CommunityResult;
import com.bashiju.www.pojo.service.out.house.GoodHouseListResult;
import com.bashiju.www.pojo.service.out.house.HouseCompareResult;
import com.bashiju.www.pojo.service.out.house.HouseDescriptionResult;
import com.bashiju.www.pojo.service.out.house.HouseFeedbackResult;
import com.bashiju.www.pojo.service.out.house.HouseImageResult;
import com.bashiju.www.pojo.service.out.house.HouseInfoResult;
import com.bashiju.www.pojo.service.out.house.HouseListResult;
import com.bashiju.www.pojo.service.out.house.HouseMapListResult;
import com.bashiju.www.pojo.service.out.house.HouseMapPointResult;
import com.bashiju.www.pojo.service.out.house.HouseSameLinkResult;
import com.bashiju.www.pojo.service.out.house.RentHouseInfoResult;
import com.bashiju.www.pojo.service.out.house.ShowedRecordResult;
import com.bashiju.www.service.comm.WebPageUtils;
import com.bashiju.www.service.house.IHouseService;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.util.StringUtil;

/**
 * 
 *  房源服务类
 * @ClassName:  HouseServiceImpl   
 * @Description:  房源服务类
 * @author: wangkaifa
 * @date:   2018年7月25日 下午3:53:21       
 * @Copyright: 2018 www.bashiju.com Inc. All rights reserved. 
 * 本内容仅限于云南巴士居网络服务公司内部传阅，禁止外泄以及用于其他的商业项目
 */
@SystemServiceLog(sourceType="二手房源查询服务") 
@Service
public class HouseServiceImpl implements IHouseService {
	
	@Autowired
	HouseMapper houseMapper;
	@Autowired
	ArticleMapper articleMapper;
	@Autowired
	ICacheService cacheService;
	@Autowired
	CommMapper commMapper;
	
	final static ObjectMapper MAPPER=new ObjectMapper();
	@SystemServiceLog(operationType="查看房源详细")
	@Override
	public HouseInfoResult selectSellHouseInfo(long id) {
		long custime=System.currentTimeMillis();
		houseMapper.updateHouseBrowsingCount(id);
		houseMapper.updateSellHouseBrowsingCount(id);
		System.out.println("修改点击次数耗时："+(System.currentTimeMillis()-custime));
		ExecutionResult.descFormat(id+"", "查看房源详细");
		String key=WebGlobal.HOUSE_DETAILED_BASE_REDIS_PREFIX+id;
		String json=cacheService.getCache(key);
		System.out.println("读取redis耗时："+(System.currentTimeMillis()-custime));
		if (StringUtils.isEmpty(json)) {
			HouseInfoResult result=houseMapper.queryHouseInfo(id);
			System.out.println("查询房源基础信息耗时："+(System.currentTimeMillis()-custime));
			if (result!=null) {
				AgentResult agent=houseMapper.queryAgentById(result.getAgentId());
				System.out.println("查询房源维护经纪人耗时："+(System.currentTimeMillis()-custime));
				result.setAgent(agent);
				List<HouseDescriptionResult> desList=houseMapper.queryHouseDescriptionList(id);
				System.out.println("查询房源描述耗时："+(System.currentTimeMillis()-custime));
				result.setHouseDescriptions(desList);
				List<HouseImageResult> imageList=houseMapper.queryHouseImages(id);
				result.setHouseImages(imageList);
				/*String labeld=houseMapper.queryMetroLabel(result.getCommunityId());
				System.out.println("查询地铁标签耗时："+(System.currentTimeMillis()-custime));
				result.setMetroLabel(labeld);*/
				String houseUses=result.getHouseUsesId();
				String houseUsesCode=getHouseUses(houseUses);
				if (DividiintoDealTypeEnum.DEAL_RESIDENCE.getCode().equals(houseUsesCode)) {
					result.setIsHouse(1);
				}else {
					result.setIsHouse(0);
				}
				CommunityResult community=houseMapper.queryCommunityInfo(result.getCommunityId());
				System.out.println("查询房源小区耗时："+(System.currentTimeMillis()-custime));
				result.setCommunityInfo(community);
				List<HouseSameLinkResult> links=houseMapper.queryHouseSameLinks(id);
				result.setLinks(links);
				cacheService.saveCache(key, result,WebGlobal.LIST_EXPTIME);
				System.out.println("存入redis耗时："+(System.currentTimeMillis()-custime));
				return result;
			}
			throw new BusinessException(ErrorCodeEnum.UNKNOWN_ERROR);			
		}
		HouseInfoResult result=JSON.parseObject(json, HouseInfoResult.class);
		System.out.println("方法总耗时："+(System.currentTimeMillis()-custime));
		return result;
	}
	private String getHouseUses(String houseUses) {
		if(houseUses.equals(HouseUsesEnum.HOUSE.getCode()) || houseUses.equals(HouseUsesEnum.VILLA.getCode()) || houseUses.equals(HouseUsesEnum.VILLA.getCode())) {
			return DividiintoDealTypeEnum.DEAL_RESIDENCE.getCode(); //属于住宅（住宅、别墅、车位）
		}else{
			return DividiintoDealTypeEnum.DEAL_BUSINESS.getCode();//属于商业（写字楼、商铺、仓库、厂房、土地、公寓）
		}				
	}
	@SystemServiceLog(operationType="查询租房技巧列表")
	@Override
	public List<RentSkillLinkResult> queryRentSkills(String cityCode,int limit){	
		ExecutionResult.descFormat(cityCode, "查询租房技巧列表");
		String key=WebGlobal.ARTICLE_RENTSKILL_REDIS_PREFIX+cityCode+limit;
		String json=cacheService.getCache(key);
		if (StringUtils.isEmpty(json)) {
			List<RentSkillLinkResult> results=articleMapper.queryRentSkills(cityCode, WebGlobal.RENT_SKILL_ID, limit);
			if (results!=null) {
				cacheService.saveCache(key,results,WebGlobal.OTHER_EXPTIME);
				return results;
			}
			return null;
		}
		List<RentSkillLinkResult> results=JSON.parseArray(json, RentSkillLinkResult.class);
		return results;		
	}
	@SystemServiceLog(operationType="查看房源详细带看经纪人")
	@Override
	public List<AgentResult> queryShowedAgents(long houseId) {
		ExecutionResult.descFormat(houseId+"", "查看房源详细带看经纪人");
		String key=WebGlobal.HOUSE_DETAILED_AGENT_REDIS_PREFIX+houseId;
		String json=cacheService.getCache(key);
		if (StringUtils.isEmpty(json)) {
			List<AgentResult> result=houseMapper.queryAgentsByHouseId(houseId);
			if (result!=null) {
				cacheService.saveCache(key,result,WebGlobal.OTHER_EXPTIME);
				return result;
			}
			return new ArrayList<AgentResult>();
		}
		List<AgentResult> result=JSON.parseArray(json, AgentResult.class);
		return result;
	}
	@SystemServiceLog(operationType="查看房源详细带看记录")
	@Override
	public WebPage<ShowedRecordResult> queryShowedRecordByHouseId(long houseId,int page,int limit) {
		ExecutionResult.descFormat(houseId+"", "查看房源详细带看记录");
		String key="queryShowedRecordByHouseId"+houseId+page+limit;
		key=Md5EncryptUtils.md5Encrypt(key);
		String json=cacheService.getCache(key);
		if (StringUtils.isEmpty(json)) {
			PageHelper.startPage(page, limit);
			Page<ShowedRecordResult> result=houseMapper.queryShowedRecords(houseId);			
			System.out.println("------"+result.getResult());
			if (result!=null) {
				WebPage<ShowedRecordResult> value=new WebPage<>(result);
				cacheService.saveCache(key,value,WebGlobal.OTHER_EXPTIME);
				return value;
			}
			return null;
		}
		WebPage<ShowedRecordResult> result=WebPageUtils.parseWebPage(json, ShowedRecordResult.class);
		return result;
	}

	@SystemServiceLog(operationType="查看房源详细出售相似房源")
	@Override
	public List<GoodHouseListResult> querySellSameHouseList(HouseSameParam param) {
		String key = WebGlobal.HOUSE_DETAILED_SAME_REDIS_PREFIX;
		long communityId = param.getCommunityId();
		int room = param.getRoom();
		int price = param.getPrice();
		key = key+communityId+room+price;
		String houseStr =  cacheService.getCache(key);
		List<GoodHouseListResult> houseList = new ArrayList<>();
		if(StringUtils.isNoneEmpty(houseStr)) {
			houseList = JSON.parseArray(houseStr, GoodHouseListResult.class);
		}else {
			houseList = houseMapper.querySellSameHouseList(param);
			cacheService.saveCache(key,houseList,WebGlobal.OTHER_EXPTIME);
		}
		return houseList;
	}
	@SystemServiceLog(operationType="查看房源详细出租相似房源")
	@Override
	public List<GoodHouseListResult> queryRentSameHouseList(HouseSameParam param) {
		String key = WebGlobal.HOUSE_DETAILED_SAME_REDIS_PREFIX;
		long communityId = param.getCommunityId();
		int room = param.getRoom();
		int price = param.getPrice();
		key = key+communityId+room+price;
		String houseStr = cacheService.getCache(key);
		List<GoodHouseListResult> houseList = new ArrayList<>();
		if(StringUtils.isNoneEmpty(houseStr)) {
			houseList = JSON.parseArray(houseStr, GoodHouseListResult.class);
		}else {
			houseList = houseMapper.queryRentSameHouseList(param);
			cacheService.saveCache(key,houseList,WebGlobal.OTHER_EXPTIME);
		}
		return houseList;
	}

	@SystemServiceLog(operationType="查看房源比较信息")
	@Override
	public List<HouseCompareResult> queryHouseCompareList(List<Long> ids) {
		if (ids!=null&&ids.size()>0) {
			List<HouseCompareResult> results=houseMapper.queryHouseCompareList(ids);
			return results;
		}		
		return null;
	}
	
	//需要重写实现，查询sys_client_salehousequeryinfos表
	@SystemServiceLog(operationType="根据小区模糊查询房源")
	@Override
	public WebPage<HouseListResult> querySellHouseByCoummunity(String cityCode,String communityName,int page,int limit) {
		if (StringUtils.isEmpty(cityCode)||StringUtils.isEmpty(communityName)) {
			return new WebPage<HouseListResult>(new Page<HouseListResult>());
		}
		//communityName="%"+communityName+"%";
		PageHelper.startPage(page, limit);
		Page<HouseListResult> houseList = houseMapper.querySellHouseByCoummunity(cityCode,communityName);
		WebPage<HouseListResult> result=new WebPage<>(houseList);
		return result;
		
	}

	@Override
	public HouseTotalResult queryHouseTotalByCityCode(String cityCode) {
		String key = WebGlobal.HOME_SELLGOOD_REDIS_PREFIX+cityCode;
		String totalStr = cacheService.getCache(key);
		HouseTotalResult total = new HouseTotalResult();
		if(StringUtils.isEmpty(totalStr)) {//redis为空
			List<Map<String,Object>> erHouse = houseMapper.queryErHouseTotalByCityCode(cityCode);
			int sellCount = 0;
			int rentCount = 0;
			int rent_sellCount = 0;
			for(Map<String,Object> m : erHouse) {
				if(HouseTransactionEnum.LEASE.getCode().equals(m.get("transactionTypeId").toString())){//出租
					rentCount = Integer.parseInt(m.get("houseCount").toString());
				}else if(HouseTransactionEnum.SELL.getCode().equals(m.get("transactionTypeId").toString())){//出售
					sellCount = Integer.parseInt(m.get("houseCount").toString());
				}else if(HouseTransactionEnum.LEASE_SELL.getCode().equals(m.get("transactionTypeId").toString())) {//租售
					rent_sellCount = Integer.parseInt(m.get("houseCount").toString());
				}
			}
			total.setRentHouseTotal(rentCount+rent_sellCount);
			total.setSellHouseTotal(sellCount+rent_sellCount);
			cacheService.saveCache(key, total,WebGlobal.OTHER_EXPTIME);//存redis
		}else {
			total = JSON.parseObject(totalStr, HouseTotalResult.class);
		}
		
		return total;
	}
	
	@Override
	public List<GoodHouseListResult> querySellGoodHouse(String cityCode) {
		String key = WebGlobal.HOME_SELLGOOD_REDIS_PREFIX+cityCode;
		List<GoodHouseListResult> goodList = null;
		String goodStr = cacheService.getCache(key);
		if(StringUtils.isEmpty(goodStr)) {
			goodList = houseMapper.querySellGoodHouse(cityCode);
			cacheService.saveCache(key, goodList, WebGlobal.OTHER_EXPTIME);
		}else {
			goodList = JSON.parseArray(goodStr, GoodHouseListResult.class);
		}
		
		return goodList;
	}
	
	@Override
	public List<GoodHouseListResult> queryRentGoodHouse(String cityCode) {
		String key = WebGlobal.HOME_RENTGOOD_REDIS_PREFIX + cityCode;
		List<GoodHouseListResult> goodList = null;
		String goodStr = cacheService.getCache(key);
		if(StringUtils.isEmpty(goodStr)) {
			goodList = houseMapper.queryRentGoodHouse(cityCode);
			cacheService.saveCache(key, goodList,  WebGlobal.OTHER_EXPTIME);
		}else {
			goodList = JSON.parseArray(goodStr, GoodHouseListResult.class);
		}
		
		return goodList;
	}


	@SystemServiceLog(operationType="新增反馈点赞")
	@Override
	public boolean addFeedbackUseCount(int custId, int agentEvaluateHouseId) {
		int n = houseMapper.queryCustEvaluate(custId,agentEvaluateHouseId);//查询该客户对该反馈是否点赞了
		if(n<1) {//没点过
			//新增
			houseMapper.saveFeedbackUse(custId,agentEvaluateHouseId);
			//修改反馈表的次数
			houseMapper.updateFeedbackUseCount(agentEvaluateHouseId);
			return true;
		}
		return false;
	}
	@SystemServiceLog(operationType="查询房源带看反馈")
	@Override
	public WebPage<HouseFeedbackResult> queryFeedback(long houseId, int page, int limit) {
		PageHelper.startPage(page, limit);
		String key = "queryFeedback"+houseId+page+limit;
		key = Md5EncryptUtils.md5Encrypt(key);
		String feedbackStr = cacheService.getCache(key);
		WebPage<HouseFeedbackResult> feedbackList = null;
		if(StringUtils.isEmpty(feedbackStr)) {
			Page<HouseFeedbackResult> pageInfo=houseMapper.queryFeedback(houseId);
			feedbackList = new WebPage<>(pageInfo);
			cacheService.saveCache(key, feedbackList,  WebGlobal.OTHER_EXPTIME);
		}else {
			feedbackList = WebPageUtils.parseWebPage(feedbackStr, HouseFeedbackResult.class);
		}
		return feedbackList;
	}
	@SystemServiceLog(operationType="按区域查询二手房源列表")
	@Override
	public WebPage<HouseListResult> querySellHouseListByArea(SellHouseParam param, int page, int limit) {
		if (param==null) {
			throw new BusinessException(ErrorCodeEnum.NULL_OBJ);
		}
		String key="querySellHouseListByArea"+JSON.toJSONString(param)+page+limit;
		key=Md5EncryptUtils.md5Encrypt(key);
		String json=cacheService.getCache(key);
		if (StringUtils.isEmpty(json)) {
			PageHelper.startPage(page, limit);
			Page<HouseListResult> pageInfo=houseMapper.querySellHouseByArea(param);
			WebPage<HouseListResult> result=new WebPage<>(pageInfo);
			cacheService.saveCache(key, result, WebGlobal.LIST_EXPTIME);
			return result;
		}
		WebPage<HouseListResult> result=WebPageUtils.parseWebPage(json,HouseListResult.class);
		return result;
	}
	@SystemServiceLog(operationType="按地铁查询二手房源列表")
	@Override
	public WebPage<HouseListResult> querySellHouseListByMetro(SellHouseParam param, int page, int limit) {
		if (param==null) {
			throw new BusinessException(ErrorCodeEnum.NULL_OBJ);
		}
		String key="querySellHouseListByMetro"+JSON.toJSONString(param)+page+limit;
		key=Md5EncryptUtils.md5Encrypt(key);
		String json=cacheService.getCache(key);
		if (StringUtils.isEmpty(json)) {
			PageHelper.startPage(page, limit);
			Page<HouseListResult> pageInfo=houseMapper.querySellHouseByMetro(param);
			WebPage<HouseListResult> result=new WebPage<>(pageInfo);
			cacheService.saveCache(key, result, WebGlobal.LIST_EXPTIME);
			return result;
		}
		WebPage<HouseListResult> result=WebPageUtils.parseWebPage(json,HouseListResult.class);
		return result;
	}
	
	@SystemServiceLog(operationType="查询租房详细")
	@Override
	public RentHouseInfoResult selectRentHouseInfo(long id) {
		long custime=System.currentTimeMillis();
		houseMapper.updateHouseBrowsingCount(id);
		houseMapper.updateRentHouseBrowsingCount(id);
		System.out.println("修改点击次数耗时："+(System.currentTimeMillis()-custime));
		ExecutionResult.descFormat(id+"", "查看房源详细");
		String key=WebGlobal.HOUSE_DETAILED_BASE_REDIS_PREFIX+id;
		String json=cacheService.getCache(key);
		System.out.println("读取redis耗时："+(System.currentTimeMillis()-custime));
		if (StringUtils.isEmpty(json)) {
			RentHouseInfoResult result=houseMapper.queryRentHouseInfo(id);
			System.out.println("查询房源基础信息耗时："+(System.currentTimeMillis()-custime));
			if (result!=null) {
				AgentResult agent=houseMapper.queryAgentById(result.getAgentId());
				System.out.println("查询房源维护经纪人耗时："+(System.currentTimeMillis()-custime));
				result.setAgent(agent);
				List<HouseDescriptionResult> desList=houseMapper.queryHouseDescriptionList(id);
				System.out.println("查询房源描述耗时："+(System.currentTimeMillis()-custime));
				result.setHouseDescriptions(desList);
				List<HouseImageResult> imageList=houseMapper.queryHouseImages(id);
				result.setHouseImages(imageList);
				/*String labeld=houseMapper.queryMetroLabel(result.getCommunityId());
				System.out.println("查询地铁标签耗时："+(System.currentTimeMillis()-custime));
				result.setMetroLabel(labeld);*/
				CommunityResult community=houseMapper.queryCommunityInfo(result.getCommunityId());
				System.out.println("查询房源小区耗时："+(System.currentTimeMillis()-custime));
				result.setCommunityInfo(community);
				List<HouseSameLinkResult> links=houseMapper.queryHouseSameLinks(id);
				result.setLinks(links);
				List<GoodHouseListResult> goodHouses=houseMapper.querySamePriceHouse(result.getCommunityId(), result.getPrice(), 2);
				result.setSamePriceHouses(goodHouses);
				cacheService.saveCache(key, result,WebGlobal.LIST_EXPTIME);
				System.out.println("存入redis耗时："+(System.currentTimeMillis()-custime));
				return result;
			}
			throw new BusinessException(ErrorCodeEnum.UNKNOWN_ERROR);			
		}
		RentHouseInfoResult result=JSON.parseObject(json, RentHouseInfoResult.class);
		System.out.println("方法总耗时："+(System.currentTimeMillis()-custime));
		return result;
	}
	@SystemServiceLog(operationType="地图找房按城市查询区域房源数量")
	@Override
	public List<HouseMapPointResult> querySellMapHouseArea(HouseMapParam param) {
		if (param==null||StringUtils.isEmpty(param.getCityCode()) ) {
			return null;
		}
		String key="querySellMapHouseArea"+JSON.toJSONString(param);
		key=Md5EncryptUtils.md5Encrypt(key);
		String json=cacheService.getCache(key);
		if (StringUtils.isEmpty(json)) {
			if (StringUtils.isNotEmpty(param.getCommunityName())) {
				param.setCommunityName("%"+param.getCommunityName()+"%");
			}
			List<HouseMapPointResult> results=houseMapper.querySellMapHouseArea(param);
			cacheService.saveCache(key, results, WebGlobal.LIST_EXPTIME);
			return results;
		}
		List<HouseMapPointResult> result=JSON.parseArray(json, HouseMapPointResult.class);
		return result;
	}
	@SystemServiceLog(operationType="地图找房按区域查询片区房源数量")
	@Override
	public List<HouseMapPointResult> querySellMapHouseRegion(HouseMapParam param) {
		if (param==null||StringUtils.isEmpty(param.getCityCode()) ) {
			return null;
		}
		String key="querySellMapHouseRegion"+JSON.toJSONString(param);
		key=Md5EncryptUtils.md5Encrypt(key);
		String json=cacheService.getCache(key);
		if (StringUtils.isEmpty(json)) {
			if (StringUtils.isNotEmpty(param.getCommunityName())) {
				param.setCommunityName("%"+param.getCommunityName()+"%");
			}
			List<HouseMapPointResult> results=houseMapper.querySellMapHouseRegion(param);
			cacheService.saveCache(key, results, WebGlobal.LIST_EXPTIME);
			return results;
		}
		List<HouseMapPointResult> result=JSON.parseArray(json, HouseMapPointResult.class);
		return result;
	}
	@SystemServiceLog(operationType="地图找房按片区查询小区房源数量")
	@Override
	public List<HouseMapPointResult> querySellMapHouseCommunity(HouseMapParam param) {
		if (param==null||StringUtils.isEmpty(param.getCityCode()) ) {
			return null;
		}
		String key="querySellMapHouseCommunity"+JSON.toJSONString(param);
		key=Md5EncryptUtils.md5Encrypt(key);
		String json=cacheService.getCache(key);
		if (StringUtils.isEmpty(json)) {
			if (StringUtils.isNotEmpty(param.getCommunityName())) {
				param.setCommunityName("%"+param.getCommunityName()+"%");
			}
			List<HouseMapPointResult> results=houseMapper.querySellMapHouseCommunity(param);
			cacheService.saveCache(key, results, WebGlobal.LIST_EXPTIME);
			return results;
		}
		List<HouseMapPointResult> result=JSON.parseArray(json, HouseMapPointResult.class);
		return result;
	}
	@SystemServiceLog(operationType="二手房地图找房列表查询")
	@Override
	public WebPage<HouseMapListResult> querySellHouseMapList(HouseMapListParam param, int page, int limit) {
		if (param==null||StringUtils.isEmpty(param.getCityCode()) ) {
			return null;
		}
		String key="querySellHouseMapList"+JSON.toJSONString(param)+page+limit;
		key=Md5EncryptUtils.md5Encrypt(key);
		String json=cacheService.getCache(key);
		if (StringUtils.isEmpty(json)) {
			if (StringUtils.isNotEmpty(param.getCommunityName())) {
				param.setCommunityName("%"+param.getCommunityName()+"%");
			}
			PageHelper.startPage(page, limit);
			Page<HouseMapListResult> pageInfo=houseMapper.querySellHouseMapList(param);
			WebPage<HouseMapListResult> result=new WebPage<>(pageInfo);
			cacheService.saveCache(key, result, WebGlobal.LIST_EXPTIME);
			return result;
		}
		WebPage<HouseMapListResult> result=WebPageUtils.parseWebPage(json, HouseMapListResult.class);
		return result;
	}

	@SystemServiceLog(operationType="地图找房二手房地铁线路房源统计")
	@Override
	public List<HouseMapPointResult> querySellMapHouseMetro(HouseMapParam param) {
		if (param==null||StringUtils.isEmpty(param.getCityCode()) ||param.getMetroId()==null) {
			return null;
		}
		String key="querySellMapHouseMetro"+JSON.toJSONString(param);
		key=Md5EncryptUtils.md5Encrypt(key);
		String json=cacheService.getCache(key);
		if (StringUtils.isEmpty(json)) {
			List<HouseMapPointResult> results=houseMapper.querySellMapHouseMetro(param);
			cacheService.saveCache(key, results, WebGlobal.LIST_EXPTIME);
			return results;
		}
		List<HouseMapPointResult> result=JSON.parseArray(json, HouseMapPointResult.class);
		return result;
	}
	@SystemServiceLog(operationType="地图找房二手房地铁线路小区房源统计")
	@Override
	public List<HouseMapPointResult> querySellMapHouseCommunityMetro(HouseMapParam param) {
		if (param==null||StringUtils.isEmpty(param.getCityCode()) ||param.getMetroId()==null) {
			return null;
		}
		String key="querySellMapHouseCommunityMetro"+JSON.toJSONString(param);
		key=Md5EncryptUtils.md5Encrypt(key);
		String json=cacheService.getCache(key);
		if (StringUtils.isEmpty(json)) {
			if (StringUtils.isNotEmpty(param.getStationName())) {
				param.setStationName("%"+param.getStationName()+"%");
			}
			List<HouseMapPointResult> results=houseMapper.querySellMapHouseCommunityMetro(param);
			cacheService.saveCache(key, results, WebGlobal.LIST_EXPTIME);
			return results;
		}
		List<HouseMapPointResult> result=JSON.parseArray(json, HouseMapPointResult.class);
		return result;
	}
	@SystemServiceLog(operationType="地图找房二手房地铁线路房源列表查询")
	@Override
	public WebPage<HouseMapListResult> querySellHouseMapMetroList(HouseMapListParam param, int page, int limit) {
		if (param==null||StringUtils.isEmpty(param.getCityCode())||param.getMetroId()==null) {
			return null;
		}
		String key="querySellHouseMapMetroList"+JSON.toJSONString(param)+page+limit;
		key=Md5EncryptUtils.md5Encrypt(key);
		String json=cacheService.getCache(key);
		if (StringUtils.isEmpty(json)) {
			if (StringUtils.isNotEmpty(param.getStationName())) {
				param.setStationName("%"+param.getStationName()+"%");
			}
			PageHelper.startPage(page, limit);
			Page<HouseMapListResult> pageInfo=houseMapper.querySellHouseMapMetroList(param);
			WebPage<HouseMapListResult> result=new WebPage<>(pageInfo);
			cacheService.saveCache(key, result, WebGlobal.LIST_EXPTIME);
			return result;
		}
		WebPage<HouseMapListResult> result=WebPageUtils.parseWebPage(json, HouseMapListResult.class);
		return result;
	}
	@SystemServiceLog(operationType="二手房列表好房推荐查询")
	@Override
	public WebPage<GoodHouseListResult> querySellGoodHouse(String cityCode, int page, int limit) {
		if (StringUtils.isEmpty(cityCode)) {
			return null;
		}
		String key="querySellGoodHouse"+cityCode+page+limit;
		key=Md5EncryptUtils.md5Encrypt(key);
		String json=cacheService.getCache(key);
		if (StringUtils.isEmpty(json)) {
			PageHelper.startPage(page, limit);
			Page<GoodHouseListResult> pageInfo=houseMapper.querySellGoodHouses(cityCode);
			WebPage<GoodHouseListResult> result=new WebPage<>(pageInfo);
			cacheService.saveCache(key, result, WebGlobal.LIST_EXPTIME);
			return result;
		}
		WebPage<GoodHouseListResult> result=WebPageUtils.parseWebPage(json, GoodHouseListResult.class);
		return result;
	}
	


	
}
