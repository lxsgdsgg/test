/**  
 * All rights Reserved, Designed By www.bashiju.com
 * @Title:  UserManageServiceImpl.java   
 * @Package com.bashiju.manage.service.impl   
 * @Description:    TODO(用户管理接口实现类--业务处理层)   
 * @author: zuoyuntao     
 * @date:   2018年5月24日 上午10:55:53   
 * @version V1.0 
 * @Copyright: 2018 www.bashiju.com Inc. All rights reserved. 
 * 注意：本内容仅限于云南巴士居网络服务公司内部传阅，禁止外泄以及用于其他的商业项目
 */

package com.bashiju.manage.service.impl;

import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bashiju.cert.interceptors.DataAuthHelper;
import com.bashiju.enums.MenusEnum;
import com.bashiju.manage.global.ManageGlobal;
import com.bashiju.manage.mapper.UserManageMapper;
import com.bashiju.manage.service.IUserManageService;
import com.bashiju.utils.log.ExecutionResult;
import com.bashiju.utils.log.SystemServiceLog;
import com.bashiju.utils.service.CommonSqlServie;
import com.bashiju.utils.threadlocal.UserThreadLocal;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.util.StringUtil;

/**   
 * @ClassName:  UserManageServiceImpl   
 * @Description:TODO(用户管理接口实现类--业务处理层)   
 * @author: zuoyuntao
 * @date:   2018年5月24日 上午10:55:53   
 *     
 * @Copyright: 2018 www.bashiju.com Inc. All rights reserved. 
 * 本内容仅限于云南巴士居网络服务公司内部传阅，禁止外泄以及用于其他的商业项目
 */

@Service
@SystemServiceLog(sourceType="用户管理")
public class UserManageServiceImpl extends CommonSqlServie implements IUserManageService {
	/**
	 * 权限管理接口
	 */
	@Autowired
	private DataAuthHelper dataAuthHelper;
	/**
	 * 用户管理映射接口
	 */
	@Autowired
	private UserManageMapper mUserManageMapper;
	/**
	 * 查询所用用户数据信息--带分页
	 * @Title: queryAllUserInfoWithPage   
	 * @Description: 查询所用用户数据信息--带分页   
	 * @param: paraMap
	 * @param: minCount 每页显示最小条数
	 * @param: maxCount 每页显示最大条数
	 * @return: Page<Map<Object,Object>>     
	 * Page{count=true, pageNum=0, pageSize=10, startRow=0, endRow=0, total=11, pages=2, reasonable=false, pageSizeZero=false}[{deptName=呈贡一区二店一组, permissionArea=BSJ0103, isHotName=是, addTime=2018-04-09 16:06:01.0, isPCLoginName=否, lockedUser=lockedUser, operator=1, moveUserInfo=moveUserInfo, solt=123, password=1, areaName=昆明市, sexName=男, statusName=正常, resetPsw=resetPsw, lastLoginSuccessTime=2018-05-29 15:48:52.0, id=5, dataUpdate=dataUpdate, birthWindowFlag=1, operatorId=1, wxNum=18888888884, userEdit=userEdit, syncFlag=1, roleId=7, sex=2, syncFlagName=是, hotAgentFlag=1, isValid=1, mobile=18888888884, deptId=BSJ010101010201, updateTime=2018-05-29 15:49:35.0, sortNo=1, realName=呈贡一区一店一组组员1, companyId=BSJ01, areaCode=530100, permissionSet=permissionSet, employee_num=006, userTypeName=是, roleName=组员, userType=1, parentMobile=13577000337, status=1}] 
	 */
	@Override
	public Page<Map<String,Object>> queryAllUserInfoWithPage(Map<String
			, Object> paraMap, int minCount, int maxCount) {
		PageHelper.startPage(minCount, maxCount);
		dataAuthHelper.auth(MenusEnum.MENU_9.getCode(),UserThreadLocal.get().get("id").toString());
		return mUserManageMapper.queryAllUserInfo(paraMap);
	}
	
	/**
	 * 查询用户数据更新日志--带分页
	 * @Title: queryUserDataUpdateLogWithPage
	 * @author: zuoyuntao  
	 * @Description: 查询用户数据更新日志--带分页  
	 * @param: paraMap
	 * @param: minCount 每页显示最小条数
	 * @param: maxCount 每页显示最大条数
	 * @return: Page<Map<String,Object>>      
	 */
	public Page<Map<String,Object>> queryUserDataUpdateLogWithPage(Map<String,Object> paraMap
			,int minCount,int maxCount){
		PageHelper.startPage(minCount, maxCount);
		dataAuthHelper.auth(MenusEnum.MENU_9.getCode(),UserThreadLocal.get().get("id").toString());
		return mUserManageMapper.queryUserDataUpdateLogWithPage(paraMap);
	}

	/**
	 * 根据参数对象查询用户信息--参数Map对象中的key必须和表（视图）中的字段名称一致
	 * @Title: queryUserInfoByConn   
	 * @Description: 根据参数对象查询用户信息--参数Map对象中的key必须和表（视图）中的字段名称一致  
	 * @param: paraMap
	 * @return: List<Map<String, Object>>   
	 * Page{count=true, pageNum=0, pageSize=10, startRow=0, endRow=0, total=11, pages=2, reasonable=false, pageSizeZero=false}[{deptName=呈贡一区二店一组, permissionArea=BSJ0103, isHotName=是, addTime=2018-04-09 16:06:01.0, isPCLoginName=否, lockedUser=lockedUser, operator=1, moveUserInfo=moveUserInfo, solt=123, password=1, areaName=昆明市, sexName=男, statusName=正常, resetPsw=resetPsw, lastLoginSuccessTime=2018-05-29 15:48:52.0, id=5, dataUpdate=dataUpdate, birthWindowFlag=1, operatorId=1, wxNum=18888888884, userEdit=userEdit, syncFlag=1, roleId=7, sex=2, syncFlagName=是, hotAgentFlag=1, isValid=1, mobile=18888888884, deptId=BSJ010101010201, updateTime=2018-05-29 15:49:35.0, sortNo=1, realName=呈贡一区一店一组组员1, companyId=BSJ01, areaCode=530100, permissionSet=permissionSet, employee_num=006, userTypeName=是, roleName=组员, userType=1, parentMobile=13577000337, status=1}] 
	 */
	@Override
	public List<Map<String, Object>> queryUserInfoByConn(Map<String, Object> paraMap) {
		Iterator<String> it = paraMap.keySet().iterator();
		StringBuilder condition = new StringBuilder();
		while(it.hasNext()) {
			String key = it.next();
			if(StringUtil.isEmpty(condition.toString())) {
				condition.append(" and ");
			}
			condition.append(key)
					 .append(" ='")
					 .append(String.valueOf(paraMap.get(key)))
					 .append("'");
		}
		List<Map<String,Object>> listMap = mUserManageMapper.queryUserInfoByConn(condition.toString());
		return listMap;
	}

	/**
	 * 根据电话号码判断用户是否存在 
	 * @Title: jurgeUserExistsByMobile
	 * @author: zuoyuntao  
	 * @Description:根据电话号码判断用户是否存在
	 * @param mobile
	 * @return      
	 * boolean true/false   
	 */
	public boolean jurgeUserExistsByMobile(String mobile) {
		long count = mUserManageMapper.counterUserByConn(" mobile ='" + mobile + "'");
		if(count > 0) {
			return true;
		}
		return false;
	}
	/**
	 * 添加或修改用户数据信息
	 * @Title: saveOrUpdateUserInfo   
	 * @Description: 添加或修改用户数据信息  
	 * @param: saveInfo：要保存的数据对象
	 * {"entryDate":"2018-05-31","syncFlag":"0","roleId":"3","idCode":"522426198607080816","sex":"1","hotAgentFlag":"0","ip":"127.0.0.1","mobile":"18999665555","deptId":"BSJ010101010101","postId":"1","birthDate":"2018-05-01","sortNo":"65","realName":"测试","areaCode":"530103","employee_num":"测试","id":"8","birthWindowFlag":"0","email":"fdasf@163.com"}
	 * @return: void      
	 */
	@Override
	@SystemServiceLog(operationType="添加/编辑用户")
	public void saveOrUpdateUserInfo(Map<Object, Object> saveInfo) {
		if(saveInfo.containsKey("id")) {
			commonOperationDatabase(saveInfo
					,ManageGlobal.T_USER,ManageGlobal.PRI_FIELD,false);
			ExecutionResult.descFormat((String) saveInfo.get("id"), "更新用户");
		}else {
			long userId = commonOperationDatabase(saveInfo,ManageGlobal.T_USER, false);
			ExecutionResult.descFormat(String.valueOf(userId), "添加用户");
		}
	}
	
	/**
	 * 保存用户数据更新日志数据信息
	 * @Title: saveOrUpdateUserInfo   
	 * @Description: 保存用户数据更新日志数据信息  
	 * @param: @param saveInfo：要保存的数据对象
	 * @return: void      
	 */
	@Override
	@SystemServiceLog(operationType="用户数据更新")
	public void saveUserActionLog(Map<Object,Object> saveInfo) {
		if(saveInfo.containsKey(ManageGlobal.PRI_FIELD)) {
			commonOperationDatabase(saveInfo,
					ManageGlobal.T_USER,ManageGlobal.PRI_FIELD,false);
			ExecutionResult.descFormat((String) saveInfo.get("id"), "更新用户数据日志");
		}else {
			commonOperationDatabase(saveInfo,ManageGlobal.T_USER, false);
			ExecutionResult.descFormat((String) saveInfo.get("id"), "添加用户数据日志");
		}
	}

	/**
	 * 根据用户ID锁定用户信息
	 * @Title: lockedUserInfo   
	 * @Description: 根据用户ID锁定用户信息
	 * @param: paraMap:参数对象  ,{id=9, status=0}    
	 * @return: void      
	 */
	@Override
	@SystemServiceLog(operationType="锁定用户")
	public void lockedUserInfo(Map<Object,Object> paraMap) {
		this.commonOperationDatabase(paraMap,ManageGlobal.T_USER,ManageGlobal.PRI_FIELD, false);
		ExecutionResult.descFormat(String.valueOf(paraMap.get(
				ManageGlobal.PRI_FIELD)), "锁定用户");

	}
	
	/**
	 * 解锁用户
	 * @Title: unLockedUserInfo
	 * @author: zuoyuntao  
	 * @Description: 解锁用户  
	 * @param: paraMap {id=9, status=01}     
	 * @return: void      
	 */
	@Override
	@SystemServiceLog(operationType="解锁用户")
	public void unLockedUserInfo(Map<Object,Object> paraMap) {
		commonOperationDatabase(paraMap,ManageGlobal.T_USER,ManageGlobal.PRI_FIELD, false);
		ExecutionResult.descFormat(String.valueOf(
				paraMap.get(ManageGlobal.PRI_FIELD)), "解锁用户");
	}

	/**
	 * 重置用户密码
	 * @Title: resetUserPassword   
	 * @Description: 重置用户密码   
	 * @param: paraMap：参数对象 {password=123456, id=3}
	 * @return: void      
	 */
	@Override
	@SystemServiceLog(operationType="重置用户密码")
	public void resetUserPassword(Map<Object,Object> paraMap) {
		commonOperationDatabase(paraMap,ManageGlobal.T_USER,ManageGlobal.PRI_FIELD, false);
		ExecutionResult.descFormat(String.valueOf(paraMap.get(
				ManageGlobal.PRI_FIELD)), "重置用户密码");

	}
	
	/**
	 * 查询部门信息创建部门树
	 * @Title: queryDeptInfoToCreateTree
	 * @author: zuoyuntao  
	 * @Description: 查询部门信息创建部门树   
	 * @param: roleGroup：当前用户所属角色组
	 * @param 当前用户id
	 * @return: List<Map<String,Object>>  
	 * 部门信息：[{"maxLevel":"5","name":"昆明市","code":"BSJ0101","parentCode":"","level":"1"}]
	 * 介绍人信息：[{"maxLevel":6.0,"name":"超级管理员","code":"1","parentCode":"BSJ0103","level":"6"}]
	 */
	@Override
	public List<Map<String,Object>> queryDeptInfoToCreateTree(String roleGroup,String userId){
		dataAuthHelper.auth(MenusEnum.MENU_9.getCode(),userId);
		return mUserManageMapper.queryDeptInfoToCreateTree(roleGroup);
		
	}
	
	/**
	 * 根据区划的编码做向后模糊查询
	 * @Title: queryAreaLikeCode
	 * @author: zuoyuntao  
	 * @Description: 根据区划的编码做向后模糊查询  
	 * @param: @param areaCode
	 * @param: @return      
	 * @return: List<Map<String,Object>>    
	 * areaList 行政区划[{"name":"北京市","code":"110000","parentCode":"0","level":"1"}]
	 */
	@Override
	public List<Map<String,Object>> queryAreaLikeCode(String areaCode){
		return mUserManageMapper.queryAreaLikeCode(areaCode);
	}

}
