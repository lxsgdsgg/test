/**  
 * All rights Reserved, Designed By www.bashiju.com
 * @Title:  MenuServiceImpl.java   
 * @Package com.bashiju.manage.service.impl   
 * @Description:    TODO(用一句话描述该文件做什么)   
 * @author: yangz     
 * @date:   2018年4月25日 上午10:09:07   
 * @version V1.0 
 * @Copyright: 2018 www.bashiju.com Inc. All rights reserved. 
 * 注意：本内容仅限于云南巴士居网络服务公司内部传阅，禁止外泄以及用于其他的商业项目*/
package com.bashiju.manage.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.alibaba.druid.util.StringUtils;
import com.bashiju.cert.interceptors.DataAuthHelper;
import com.bashiju.enums.MenuEnum;
import com.bashiju.manage.mapper.MenuMapper;
import com.bashiju.manage.service.AdminPermissionService;
import com.bashiju.manage.service.MenuService;
import com.bashiju.manage.service.PermissionService;
import com.bashiju.utils.exception.BusinessException;
import com.bashiju.utils.exception.ErrorCodeEnum;
import com.bashiju.utils.log.ExecutionResult;
import com.bashiju.utils.log.SystemServiceLog;
import com.bashiju.utils.service.CommonSqlServie;
import com.bashiju.utils.threadlocal.UserThreadLocal;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;

/**   
 * @ClassName:  MenuServiceImpl   
 * @Description:菜单管理服务   
 * @author: yangz
 * @date:   2018年4月25日 上午10:09:07   
 *     
 * @Copyright: 2018 www.bashiju.com Inc. All rights reserved. 
 * 本内容仅限于云南巴士居网络服务公司内部传阅，禁止外泄以及用于其他的商业项目
 */
@Service
@SystemServiceLog(sourceType="菜单管理")
public class MenuServiceImpl extends CommonSqlServie implements MenuService {

	@Autowired
	private MenuMapper menuMapper;
	@Autowired
	private PermissionService permissionService;
	@Autowired
	private AdminPermissionService adminPermissionService;
	
	@Autowired
	private DataAuthHelper dataAuthHelper;
	
	/**     
	 * @Description: 条件查询菜单信息(分页)   
	 * @param menuName 菜单名称(模糊查询)
	 * @param parentMenuId 父级菜单id
	 * @param parentName 父级菜单名称(模糊查询)
	 * @param functionType 菜单类型
	 * @param level 菜单等级
	 * @param dataPerFlag 数据权限标识
	 * @param pageNum 当前页
	 * @param pageSize 每页显示的条数
	 * @return: Page<Map<String,Object>>      
	 */ 
	@Override
	public Page<Map<String, Object>> queryMenus(String menuName,String parentMenuId,String parentName, String functionType, String level, String dataPerFlag
			, int pageNum,int pageSize) {
		PageHelper.startPage(pageNum, pageSize);
		dataAuthHelper.auth(MenuEnum.MENU_31.getCode(),UserThreadLocal.get().get("id").toString());
		List<Map<String,Object>> list = this.menuMapper.queryMenus(menuName,parentMenuId,parentName, functionType, level, dataPerFlag);
		Page<Map<String,Object>> page = (Page<Map<String, Object>>) list;
		return page;
	}

	/**
	 * 
	 * @Description: 条件查询菜单信息   
	 * @param menuName 菜单名称
	 * @param functionType 菜单类型
	 * @param level 菜单等级
	 * @param dataPerFlag 数据权限标识
	 * @return      
	 * @return: List<Map<String,Object>>
	 */
	@Override
	public List<Map<String, Object>> queryMenus(String menuName,String parentMenuId,String parentName,String functionType, String level, String dataPerFlag) {
		dataAuthHelper.auth(MenuEnum.MENU_31.getCode(),UserThreadLocal.get().get("id").toString());
		return this.menuMapper.queryMenus(menuName,parentMenuId,parentName, functionType, level, dataPerFlag);
	}

	/**     
	 * @Description: 根据id查询菜单信息   
	 * @param menuId 菜单id
	 * @return      
	 * @return: Map<String,Object>      
	 */ 
	@Override
	public Map<String, Object> getMenu(String menuId) {
		if(StringUtils.isEmpty(menuId))
			return null;
		else
			return this.menuMapper.getMenu(menuId);
	}

	/**     
	 * @Description: 根据菜单id查询该菜单下关联的数据   
	 * @param menuId 菜单id
	 * @return      
	 * @return: boolean      
	 */ 
	@Override
	public boolean isRelation(String menuId) {
		if(StringUtils.isEmpty(menuId))
			return false;
		if(menuMapper.isRelation(menuId)>0)
			return true;
		else
			return false;
	}
	
	/**
	 * 
	 * @Description: 保存菜单信息   
	 * @param map 需要保存的菜单信息，注：map中包含的属性必须为sys_menu表中的字段；
	 * 	当map中存在id字段时，认为是修改操作，否则为新增操作
	 * @return      
	 * @return: long 返回主键
	 */
	@Override
	@SystemServiceLog(operationType="保存菜单")
	public long saveOrUpdateMenu(Map<Object,Object> map) {
		long ids = 0;
		if(map.get("id") ==null || StringUtils.isEmpty(map.get("id").toString())) {
			//新增
//			map.put("isvalid", 1);//新增数据默认有效
			map.remove("id");
			ids = this.commonOperationDatabase(map, "sys_menu", false);
			if(ids>0)
				ExecutionResult.descFormat(Long.toString(ids), "新增菜单");
			else
				throw new BusinessException(ErrorCodeEnum.SYSTEM_ADD_ERROR);
			return ids;
		}else {
			String id = map.get("id").toString();
			ids = this.commonOperationDatabase(map, "sys_menu", "id", false);
			//当可视组发生变化时，也要删除相应的无效的权限数据，防止脏数据的产生
			boolean permissionA = permissionService.deletePermissionByMenuViewGroups(id);
			if(permissionA)ExecutionResult.descFormat(id, "删除普通权限");
			boolean permissionB = adminPermissionService.deletePermissionByMenuViewGroups(id);
			if(permissionB)ExecutionResult.descFormat(id, "删除超管员权限");
			if(ids>0) {
				ids = Long.parseLong(id);
				ExecutionResult.descFormat(Long.toString(ids), "编辑菜单");
			}else
				throw new BusinessException(ErrorCodeEnum.SYSTEM_UPFDATE_ERROR);
			return ids;
		}
	}

	/**
	 * 
	 * @Description: 根据菜单id删除菜单信息   
	 * @param menuId 菜单id
	 * @return      
	 * @return: boolean
	 */
	@Override
	@SystemServiceLog(operationType="删除菜单")
	public boolean delMenu(String menuId) {
		if(StringUtils.isEmpty(menuId))
			throw new BusinessException("请选择要删除的菜单信息");
		if(this.isRelation(menuId))
			throw new BusinessException("存在关联数据，不允许删除");
		Map<Object,Object> fields = new HashMap<Object,Object>();
		fields.put("isvalid", "0");
		fields.put("id", menuId);
		long tt = this.commonOperationDatabase(fields, "sys_menu", "id", false);
		if(tt>0) {
			ExecutionResult.descFormat(menuId, "删除菜单");
			return true;
		}else
			throw new BusinessException(ErrorCodeEnum.SYSTEM_DEL_ERROR);
	}

}
