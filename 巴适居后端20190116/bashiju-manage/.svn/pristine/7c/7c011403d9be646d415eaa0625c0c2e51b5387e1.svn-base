/**  
 * All rights Reserved, Designed By www.bashiju.com
 * @Title:  UserRegisterMgrController.java   
 * @Package com.bashiju.manage.controller   
 * @Description:用户注册管理控制器
 * @author: zuoyuntao     
 * @date:   2018年6月4日 下午4:59:27   
 * @version V1.0 
 * @Copyright: 2018 www.bashiju.com Inc. All rights reserved. 
 * 注意：本内容仅限于云南巴士居网络服务公司内部传阅，禁止外泄以及用于其他的商业项目*/

package com.bashiju.manage.controller;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.bashiju.manage.service.DeptService;
import com.bashiju.manage.service.IUserManageService;
import com.bashiju.manage.service.IUserRegisterManageService;
import com.bashiju.utils.exception.BusinessException;
import com.bashiju.utils.service.BaseController;
import com.bashiju.utils.threadlocal.UserThreadLocal;
import com.bashiju.utils.util.BashijuResult;
import com.github.pagehelper.Page;
import com.github.pagehelper.util.StringUtil;

/**
 * 用户注册管理控制器
 * @ClassName:UserRegisterMgrController
 * @Description:用户注册管理控制器
 * @author:zuoyuntao
 * @date:2018年6月4日 下午4:59:27
 * @Copyright: 2018 www.bashiju.com Inc. All rights reserved.
 * 本内容仅限于云南巴士居网络服务公司内部传阅，禁止外泄以及用于其他的商业项目
 */

@Controller
@RequestMapping(value="userRegisterManage")
public class UserRegisterMgrController extends BaseController{
	/**
	 * 用户注册管理接口对象
	 */
	@Autowired
	private IUserRegisterManageService mIUserRegisterManageService;
	/**
	 * 用户管理接口对象
	 */
	@Autowired
	private IUserManageService mIUserManageService;
	
	@Autowired
	private DeptService deptService;
	/**
	 * 获取用户注册审核主页面视图对象
	 * @Title: getUserRegisterMainModel
	 * @author: zuoyuntao  
	 * @Description:获取用户注册审核主页面视图对象
	 * @param request Servlet请求对象
	 * @param response Servlet响应对象
	 * @return  ModelAndView  
	 * @throws
	 */
	@RequestMapping(value="getUserRegisterMainModel")
	public ModelAndView getUserRegisterMainModel(HttpServletRequest request
			,HttpServletResponse response) {
		ModelAndView model = this.getModelAndView(request, response, "userRegisterMgr/user_register_manage");
		//获取部门数据信息
		List<Map<String, Object>> deptList = deptService.queryDeptTrees(UserThreadLocal.get().get("roleGroup").toString(),
				UserThreadLocal.get().get("id").toString());
		
//		String deptMaxLevel = "";
//		String referMaxLevel = "";
		
		//获取介绍人数据
		List<Map<String, Object>> referList = mIUserManageService.queryDeptInfoToCreateTree(UserThreadLocal.get().get("roleGroup").toString(),
				UserThreadLocal.get().get("id").toString());
//		if(deptList.size() > 0) {
//			deptMaxLevel = (String) deptList.get(0).get("maxLevel");
//		}else {
//			throw new BusinessException("查询部门数据异常");
//		}
//		if(referList.size() > 0) {
//			String maxLevel = String.valueOf(referList.get(0).get("maxLevel"));
//			referMaxLevel = String.valueOf(Integer.parseInt(maxLevel) + 1);
//		}else {
//			throw new BusinessException("查询介绍人数据异常");
//		}
		
		model.addObject("deptInfo",JSON.toJSON(deptList));
		model.addObject("referInfo",JSON.toJSON(referList));//介绍人信息
//		model.addObject("deptMaxLevel",deptMaxLevel);
//		model.addObject("referMaxLevel",referMaxLevel);
		return model;
	}
	/**
	 * 获取用户注册审核主页面数据集
	 * @Title: queryUserRegisterAllInfoPage
	 * @author: zuoyuntao  
	 * @Description:获取用户注册审核主页面数据集
	 * @param deptId
	 * @param userType
	 * @param checkStatus
	 * @param computerInfo
	 * @param manageName
	 * @param page 页面展示最小条数
	 * @param limit
	 * @return      
	 * Object JSON 格式为：
	 * [{deptName=呈贡一区一店, permissionArea=BSJ0101010101, checkInfoDel=checkInfoDel, addTime=2018-06-04 19:15:37.0, isValid=1, deptId=BSJ0101010101, computerPosistion=发射点发是, updateTime=2018-06-05 15:34:13.0, userCheckBtn=userCheckBtn, userName=呈贡一区一店店长, checkName=已审核, operator=[系统添加], checkStatus=1, checkTime=2018-06-05 15:34:13.0, userTypeName=分机, computerInfo=发射点发是, manageId=13321, manageName=呈贡一区一店店长, lastLoginSuccessTime=2018-06-05 15:34:12.0, id=1, userType=3, operatorId=13321}]     
	 * @throws
	 */
	@RequestMapping(value="queryUserRegisterAllInfoPage")
	@ResponseBody
	public Object queryUserRegisterAllInfoPage(String deptId,String userType,String checkStatus
			,String computerInfo,String manageName, int page,int limit) {
		Map<String,Object> paraMap = new HashMap<String,Object>();
		paraMap.put("deptId",deptId );
		paraMap.put("userType",userType );
		paraMap.put("checkStatus",checkStatus );
		paraMap.put("computerInfo",computerInfo);
		paraMap.put("manageName", manageName);
		
		Page<Map<String, Object>>  pageObj = mIUserRegisterManageService.queryAllUserCheckInfo(
				paraMap, page, limit);
		return this.getPageResult(pageObj);
	}
	
	/**
	 * 删除用户注册信息
	 * @Title: deleteUserRegisterInfo
	 * @author: zuoyuntao  
	 * @Description:删除用户注册信息
	 * @param id 注册信息表ID
	 * @return      
	 * BashijuResult 
	 * @throws
	 */
	@RequestMapping(value="deleteUserRegisterInfo")
	@ResponseBody
	public BashijuResult deleteUserRegisterInfo(String id) {
		mIUserRegisterManageService.deleteUserRegisterInfoById(id);
		return BashijuResult.ok();
	}
	
	/**
	 * 更新或报错用户注册审核信息
	 * @Title: saveOrUpdateUserRegisterInfo
	 * @author: zuoyuntao  
	 * @Description:更新或报错用户注册审核信息   
	 * @param jsonData
	 * @return      
	 * BashijuResult 
	 * @throws
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping(value="saveOrUpdateUserRegisterInfo")
	@ResponseBody
	public BashijuResult saveOrUpdateUserRegisterInfo(String jsonData) {
		if(StringUtil.isEmpty(jsonData)) {
			throw new BusinessException("页面传入数据为空!");
		}
		Map<Object,Object> paraMap = (Map<Object, Object>) JSONObject.parse(jsonData);
		paraMap.put("checkTime", new Date());
		paraMap.put("checkStatus", 1);
		
		Map<Object,Object> saveMap = new HashMap<Object,Object>();
		saveMap.put("checkStatus", paraMap.get("checkStatus"));
		saveMap.put("checkTime", paraMap.get("checkTime"));
		saveMap.put("manageId", paraMap.get("manageId"));
		saveMap.put("computerInfo", paraMap.get("computerInfo"));
		saveMap.put("computerPosistion", paraMap.get("computerInfo"));
		saveMap.put("userTypeId", paraMap.get("userTypeId"));
		saveMap.put("id", paraMap.get("id"));
		saveMap.put("userId", paraMap.get("operatorId"));
		mIUserRegisterManageService.saveOrUpdateUserRegisterInfo(saveMap);
		return BashijuResult.ok();
	}
}
