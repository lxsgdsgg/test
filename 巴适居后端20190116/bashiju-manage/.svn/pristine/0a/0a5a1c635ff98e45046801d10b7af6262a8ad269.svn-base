package com.bashiju.manage.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.commons.CommonsMultipartResolver;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.bashiju.cert.interceptors.DataAuthHelper;
import com.bashiju.enums.BottomContentEnum;
import com.bashiju.enums.ExamineStatusEnum;
import com.bashiju.enums.FtpFileTypeEnum;
import com.bashiju.enums.HouseArticleTypeEnum;
import com.bashiju.enums.MenuEnum;
import com.bashiju.enums.RoleGroupEnum;
import com.bashiju.manage.mapper.ContentmanageMapper;
import com.bashiju.manage.service.ContentmanageService;
import com.bashiju.utils.log.ExecutionResult;
import com.bashiju.utils.log.SystemServiceLog;
import com.bashiju.utils.service.CommonSqlServie;
import com.bashiju.utils.threadlocal.UserThreadLocal;
import com.bashiju.utils.util.FtpUtil;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
/**
 * 
 * @ClassName:  ContentmanageServiceImpl   
 * @Description:TODO(内容管理具体实现)   
 * @author: liwen
 * @date:   2018年7月20日 上午11:21:32   
 *     
 * @Copyright: 2018 www.bashiju.com Inc. All rights reserved. 
 * 本内容仅限于云南巴士居网络服务公司内部传阅，禁止外泄以及用于其他的商业项目
 */
@SystemServiceLog(sourceType="内容管理") 
@Service
public class ContentmanageServiceImpl implements ContentmanageService{
	
	@Autowired
	 private CommonSqlServie commonSqlServie;
	@Autowired
	private ContentmanageMapper contentmanageMapper;
	@Autowired
	private DataAuthHelper dataAuthHelper;
	
	@SystemServiceLog(operationType="保存文章")
	@Override
	public Long saveArticle(Map<Object,Object> data) {
		Long res = null;
		String type = data.get("type").toString();
		if(data.containsKey("typeId")) {
			String typeId = data.get("typeId").toString();
			if(BottomContentEnum.GYWM.getCode().equals(typeId)) {
				data.put("typeName",BottomContentEnum.GYWM.getDesc());
			}
			if(BottomContentEnum.YHXY.getCode().equals(typeId)) {
				data.put("typeName",BottomContentEnum.YHXY.getDesc());
			}
			if(BottomContentEnum.FWXY.getCode().equals(typeId)) {
				data.put("typeName",BottomContentEnum.FWXY.getDesc());
			}
			if(BottomContentEnum.YSZC.getCode().equals(typeId)) {
				data.put("typeName",BottomContentEnum.YSZC.getDesc());
			}
		}
		data.put("permissionArea", UserThreadLocal.get().get("deptId"));
		data.put("operatorId", UserThreadLocal.get().get("id"));
		data.put("operator", UserThreadLocal.get().get("realName"));
		/*JSONArray classesArr = JSON.parseArray(data.get("classesId").toString());
		String classesId = classesArr.get(classesArr.size()-1).toString();
		data.put("classesId", classesId);*/
		if(data.containsKey("id") && !"".equals(data.get("id")) && data.get("id")!=null) {//修改
			if("ourselves".equals(type)) {//简介、用户协议等
				data.remove("type");
				res = commonSqlServie.commonOperationDatabase(data, "sys_protocol","id", false);
			}else {//资讯、百科
				data.remove("type");
				res = commonSqlServie.commonOperationDatabase(data, "sys_article","id", false);
			}
			
		}else {//新增
			data.remove("id");
			if("ourselves".equals(type)) {//简介、用户协议等
				data.remove("type");
				res = commonSqlServie.commonOperationDatabase(data, "sys_protocol", false);
			}else {//资讯、百科
				data.remove("type");
				res = commonSqlServie.commonOperationDatabase(data, "sys_article", false);
			}
			
		}
		
		return res;
	}
	
	@SystemServiceLog(operationType="查询文章列表")
	@Override
	public Page<Map<String, Object>> queryArticleList(Map<String,Object> conditions,int page,int limit){
		PageHelper.startPage(page, limit);
		Page<Map<String, Object>> pageInfo = null;
		String type = conditions.get("type").toString();
		if("information".equals(type)) {//资讯
			conditions.put("type", HouseArticleTypeEnum.PROPERTYINFORMATION.getCode());
			dataAuthHelper.auth(MenuEnum.MENU_56.getCode(),UserThreadLocal.get().get("id").toString());
			pageInfo = contentmanageMapper.queryArticleList(conditions);
		}else if("encyclopedias".equals(type)) {//百科
			conditions.put("type", HouseArticleTypeEnum.PROPERTYENCYCLOPEDIA.getCode());
			dataAuthHelper.auth(MenuEnum.MENU_57.getCode(),UserThreadLocal.get().get("id").toString());
			pageInfo = contentmanageMapper.queryArticleList(conditions);
		}else if("ourselves".equals(type)) {//关于我们、用户协议等
			dataAuthHelper.auth(MenuEnum.MENU_59.getCode(),UserThreadLocal.get().get("id").toString());
			pageInfo = contentmanageMapper.queryProtocol(conditions);
		}
		
		
		
		ExecutionResult.descFormat("", "查询文章列表");
		return pageInfo;
	}

		
	//上传文章图片
	@SystemServiceLog(operationType="上传")
	@Override
	public Map<String,Object> saveImg(HttpServletRequest request){
		String filePath = "";
		String fileName = "";
		// 将当前上下文初始化给 CommonsMutipartResolver （多部分解析器）
		CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver(
				request.getSession().getServletContext());
		// 检查form中是否有enctype="multipart/form-data"
		if (multipartResolver.isMultipart(request)) {
			// 将request变成多部分request
			MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest) request;
			// 获取multiRequest 中所有的文件名
			Iterator iter = multiRequest.getFileNames();

			if (iter.hasNext()) {
				// 一次遍历所有文件
				//List<MultipartFile> files = multiRequest.getFiles(iter.next().toString());
				
				MultipartFile file = multiRequest.getFile(iter.next().toString());
				if (file != null) {
					fileName = file.getName();
					filePath = FtpUtil.uploadFile(file,"","",FtpFileTypeEnum.FTP_FILE_TP.getCode(),true);
					
				}
			}
		}
		Map<String,Object> res = new HashMap<>();
		res.put("fileName", fileName);
		res.put("filePath", filePath);
		return res;
	}
	
	//上传编辑器图片
	@SystemServiceLog(operationType="上传")
	@Override
	public Map<String,Object> saveEditorImg(HttpServletRequest request){
		String filePath = "";
		String fileName = "";
		// 将当前上下文初始化给 CommonsMutipartResolver （多部分解析器）
		CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver(
				request.getSession().getServletContext());
		// 检查form中是否有enctype="multipart/form-data"
		if (multipartResolver.isMultipart(request)) {
			// 将request变成多部分request
			MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest) request;
			// 获取multiRequest 中所有的文件名
			Iterator iter = multiRequest.getFileNames();

			if (iter.hasNext()) {
				// 一次遍历所有文件
				//List<MultipartFile> files = multiRequest.getFiles(iter.next().toString());
				
				MultipartFile file = multiRequest.getFile(iter.next().toString());
				if (file != null) {
					fileName = file.getName();
					filePath = FtpUtil.uploadFile(file,"","",FtpFileTypeEnum.FTP_FILE_TP.getCode(),true);
					
				}
			}
		}
		Map<String,Object> res = new HashMap<>();
		//res.put("fileName", fileName);
		//res.put("filePath", filePath);
		res.put("errno", 0);
		List paths = new ArrayList<>();
		paths.add(filePath);
		res.put("data", paths);
		return res;
	}
	@SystemServiceLog(operationType="删除")
	@Override
	public boolean delArticle(Long id) {
		return commonSqlServie.delData("sys_article", "id", id+"", false);
	}
	
	@SystemServiceLog(operationType="查询内容审核列表")
	@Override
	public Page<Map<String, Object>> queryExamineList(Map<String,Object> conditions,int page,int limit){
		PageHelper.startPage(page, limit);
		dataAuthHelper.auth(MenuEnum.MENU_58.getCode(),UserThreadLocal.get().get("id").toString());
		Page<Map<String, Object>> pageInfo = contentmanageMapper.queryExamineList(conditions);
		
		ExecutionResult.descFormat("", "查询内容审核列表");
		return pageInfo;
	}
	
	@SystemServiceLog(operationType="确定内容")
	@Override
	public Long sureArticle(Long id) {
		Map<Object,Object> mm = new HashMap<>();
		mm.put("examineStatus",ExamineStatusEnum.EXAMINED.getCode());
		mm.put("auditorId", UserThreadLocal.get().get("id"));
		mm.put("auditor", UserThreadLocal.get().get("realName"));
		mm.put("auditTime", new Date());
		mm.put("isPublished", 1);//发布
		mm.put("id", id);
		Long res = commonSqlServie.commonOperationDatabase(mm, "sys_article","id", false);
		return res;
	}
	
	@SystemServiceLog(operationType="驳回内容")
	@Override
	public Long rejectArticle(Long id,String reason) {
		Map<Object,Object> mm = new HashMap<>();
		mm.put("examineStatus",ExamineStatusEnum.REJECT.getCode());
		mm.put("reason", reason);
		mm.put("auditorId", UserThreadLocal.get().get("id"));
		mm.put("auditor", UserThreadLocal.get().get("realName"));
		mm.put("auditTime", new Date());
		mm.put("id", id);
		Long res = commonSqlServie.commonOperationDatabase(mm, "sys_article","id", false);
		return res;
	}
	
	@SystemServiceLog(operationType="查授权城市")
	@Override
	public List<Map<String,Object>> queryCity(Long userId){
		List<Map<String,Object>> res = null;
		String cityCode = UserThreadLocal.get().get("cityCode").toString();
		String roleGroup = UserThreadLocal.get().get("roleGroup").toString();
		if(RoleGroupEnum.ADMIN.getCode().equals(roleGroup)) {//超级管理员:平台开通的城市
			res = contentmanageMapper.queryCityByAdmin();
			return res;
		}else if(RoleGroupEnum.CITY_ADMIN.getCode().equals(roleGroup)) {//城市管理员：对用户或对角色授权的城市
			res = contentmanageMapper.queryCityByUser(userId);
			if(res.size()>0) {
				return res;
			}else {
				 res = contentmanageMapper.queryCityByRole(userId);
				 return res;
			}
		}else {//普通用户：用户自己所在城市
			res = new ArrayList<>();
			Map<String,Object> city = new HashMap<>();
			String cityName = contentmanageMapper.queryCityName(cityCode);
			city.put("cityCode", cityCode);
			city.put("cityName", cityName);
			res.add(city);
			return res;
		}
		
	}
	
	@SystemServiceLog(operationType="查询C端客户举报房源")
	@Override
	public Page<Map<String, Object>> queryCustTipoffk(Map<String,Object> condition,int page,int limit){
		PageHelper.startPage(page, limit);
		dataAuthHelper.auth(MenuEnum.MENU_60.getCode(),UserThreadLocal.get().get("id").toString());
		Page<Map<String, Object>> pageInfo = contentmanageMapper.queryCustTipoffk(condition);
		
		ExecutionResult.descFormat("", "查询C端客户举报");
		return pageInfo;
	}
	
	@SystemServiceLog(operationType="查询C端客户反馈")
	@Override
	public Page<Map<String, Object>> queryCustFeedback(Map<String,Object> condition,int page,int limit){
		PageHelper.startPage(page, limit);
		dataAuthHelper.auth(MenuEnum.MENU_62.getCode(),UserThreadLocal.get().get("id").toString());
		Page<Map<String, Object>> pageInfo = contentmanageMapper.queryCustFeedback(condition);
		
		ExecutionResult.descFormat("", "查询C端客户反馈");
		return pageInfo;
	}
	
	@SystemServiceLog(operationType="保存处理结果")
	@Override
	public Long saveHandleResult(int id,String handleResult,String type) {
		Long res = null;
		Map<Object,Object> mm = new HashMap<>();
		mm.put("id", id);
		mm.put("handleContent", handleResult);
		mm.put("handleTime", new Date());
		mm.put("userId", UserThreadLocal.get().get("id"));
		mm.put("status", 1);
		mm.put("permissionArea", UserThreadLocal.get().get("deptId"));
		mm.put("operatorId", UserThreadLocal.get().get("id"));
		mm.put("operator", UserThreadLocal.get().get("realName"));
		if("custTipoff".equals(type)) {
			res = commonSqlServie.commonOperationDatabase(mm, "cust_housetipoff","id", false) ;
		}else if("custFeedback".equals(type)) {
			res = commonSqlServie.commonOperationDatabase(mm, "cust_feedback","id", false) ;
		}
		return res;
	}
}
