package com.bashiju.manage.controller;

import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.alibaba.fastjson.JSON;
import com.bashiju.manage.pojo.controller.CommunityEntity;
import com.bashiju.manage.pojo.controller.CommunityQueryEntity;
import com.bashiju.manage.service.ICommunityService;
import com.bashiju.utils.exception.BusinessException;
import com.bashiju.utils.exception.ErrorCodeEnum;
import com.bashiju.utils.service.BaseController;
import com.bashiju.utils.util.BashijuResult;
import com.github.pagehelper.Page;

/**
 * 
 * @ClassName:  CommunityController   
 * @Description:TODO(小区管理)   
 * @author: wangkaifa
 * @date:   2018年4月20日 下午2:57:27   
 *     
 * @Copyright: 2018 www.bashiju.com Inc. All rights reserved. 
 * 本内容仅限于云南巴士居网络服务公司内部传阅，禁止外泄以及用于其他的商业项目
 */
@Controller
@RequestMapping("community")
public class CommunityController extends BaseController{
	@Autowired	
	private ICommunityService communityService;
	
	/**
	 * 具体的跳转逻辑
	 * @param pageName
	 * @return 视图
	 */
	@RequestMapping(value="{pageName}",method=RequestMethod.GET)
	public ModelAndView toPage(@PathVariable("pageName") String pageName,HttpServletRequest request,HttpServletResponse response)
	{
		ModelAndView mv = getModelAndView(request, response, "/community/"+pageName);
		return mv;
	}
	
	@RequestMapping(value="list",method=RequestMethod.GET)
	public ModelAndView showList(HttpServletRequest request,HttpServletResponse response)
	{
		ModelAndView mv = getModelAndView(request, response, "/community/list");
		List<Map<String, Object>> list = communityService.queryAreaSelect();
		//mv.addObject("areaList", list);
		mv.addObject("areaListJson", JSON.toJSONString(list));
		return mv;
	}
	
	@RequestMapping(value="detail")
	public String showDetail(Long id,Model model)
	{
		Map<String, Object> map = communityService.queryCommunityById(id);
		model.addAttribute("community",JSON.toJSONString(map));
		return "/community/detail";
	}
	/**
	 * 
	 * @Title: add   
	 * @Description: TODO(添加小区)   
	 * @param: @param community
	 * @param: @return      
	 * @return: BashijuResult      
	 * @throws
	 */
	@RequestMapping(value="add")
	@ResponseBody
	public BashijuResult add(CommunityEntity community) {
		if (community!=null&&StringUtils.isNotEmpty(community.getName())
				&&StringUtils.isNotEmpty(community.getAreaCode())&&community.getRegionId()!=null) {
			if (community.getIsHot()==null) {
				community.setIsHot(0);
			}
			if (community.getId()!=null&&community.getId()>0) {
				String json=JSON.toJSONString(community);
				Map<Object, Object> map=JSON.parseObject(json, Map.class);
				communityService.updateCommunity(map);
			}else {
				communityService.addCommunity(community.getName(),community.getRecordName(),community.getPinyin(), community.getAreaCode(), community.getRegionId(),
						community.getAddress(), community.getSalePrice(), community.getIsHot());
			}
			
			return BashijuResult.ok();
		}
		throw new BusinessException(ErrorCodeEnum.UNKNOWN_ERROR);
				
	}
	/**
	 * 
		 * 根据id删除小区
		 * @Description: 根据id删除小区
		 * @param id 小区id
		 * @return 
		 * BashijuResult
	 */
	@RequestMapping(value="deleteInfo")
	@ResponseBody
	public BashijuResult delete(long id) {
		communityService.delete(id);
		return BashijuResult.ok();
	}
	/**
	 * @throws Exception 
	 * 
	 * @Title: searchCommunityList   
	 * @Description: TODO(查询小区列表)   
	 * @param: @param query
	 * @param: @param page
	 * @param: @param limit
	 * @param: @return      
	 * @return: Map<String,Object>      
	 * @throws
	 */
	@RequestMapping(value="searchCommunityList")
	@ResponseBody
	public Map<String,Object> searchCommunityList(CommunityQueryEntity query,int page,int limit) throws Exception{
		Page<Map<String, Object>> pageInfo = communityService.queryCommunityList(query, page, limit);
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("count", pageInfo.getTotal());
		map.put("data", pageInfo.getResult());
		map.put("code", 0);
		map.put("msg", "");
		return map;
	}
	
	@RequestMapping(value="searchCommunityListDemo")
	@ResponseBody
	public Map<String,Object> searchCommunityListDemo(String name,int start,int length,int draw) throws Exception{
		int page=1;
		if (start>0) {
			start++;
			page=start/length;
			if (page>0&&(start%length)>0) {
				page++;
			}
		}
		CommunityQueryEntity query=new CommunityQueryEntity();
		query.setPinyin(name);
		query.setRegionName("");
		Page<Map<String, Object>> pageInfo = communityService.queryCommunityList(query, page, length);
		Map<String,Object> map = new HashMap<String,Object>();
		map.put("recordsTotal", pageInfo.getTotal());
		map.put("data", pageInfo.getResult());
		map.put("draw", draw);
		map.put("recordsFiltered", pageInfo.getTotal());
		return map;
	}
	@RequestMapping(value="getRegionList")
	@ResponseBody
	public BashijuResult getRegionList(String code){
		List<Map<String, Object>> list = communityService.queryRegionSelect(code);
		
		return BashijuResult.build(true, "success", list);
	}
	
	@RequestMapping(value="update")
	@ResponseBody
	public BashijuResult update(String pinyin,Long id){
		if (pinyin==null) {
			pinyin="";
		}
		Map<Object, Object> map=new HashMap<>();
		map.put("pinyin", pinyin);
		map.put("id", id);
		communityService.updateCommunity(map);
		
		return BashijuResult.ok();
	}
	
	@RequestMapping(value="updateDetail")
	@ResponseBody
	public BashijuResult updateDetail(String dataJson){
		if (StringUtils.isNotEmpty(dataJson)) {
			Map<Object, Object> map = JSON.parseObject(dataJson, Map.class);
			communityService.updateCommunity(map);
			return BashijuResult.ok();
		}
			
		throw new BusinessException(ErrorCodeEnum.UNKNOWN_ERROR);
	}
	
	@RequestMapping(value="uploadImage")
	@ResponseBody
	public BashijuResult uploadImage(Long communityId,@RequestParam(value = "file", required = true) MultipartFile  imageFile) throws Exception{
		communityService.uploadImage(communityId, imageFile);
		return BashijuResult.ok();		
	}
	
	@RequestMapping(value = "showImage", method = RequestMethod.GET)
    public void showImage(String imageCode, HttpServletResponse response) throws IOException{
		byte[] image=communityService.queryImageBycode(imageCode);
		// 1、源图片
		InputStream sbs = new ByteArrayInputStream(image); 
		Image srcImg = ImageIO.read(sbs);
		int width=srcImg.getWidth(null);
		if(width==-1) {
			width=300;
		}
		int height=srcImg.getHeight(null);
		if(height==-1) {
			height=200;
		}
		BufferedImage buffImg = new BufferedImage(width,height, BufferedImage.TYPE_INT_RGB);
		// 2、得到画笔对象
        Graphics2D g = buffImg.createGraphics();
        // 3、设置对线段的锯齿状边缘处理
        g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g.drawImage(srcImg, 0, 0, null);
     // 5、设置水印文字颜色
        g.setColor(Color.red);
        // 6、设置水印文字Font
        g.setFont(new java.awt.Font("宋体", java.awt.Font.BOLD, 60));
        // 7、设置水印文字透明度
        g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP, 0.55f));
        // 8、第一参数->设置的内容，后面两个参数->文字在图片上的坐标位置(x,y)
        g.drawString("巴适居",  buffImg.getWidth()/2 , buffImg.getHeight()/2);
        
        
        //输出图片
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        ImageIO.write(buffImg, "jpg", out);
        
        response.setContentType("image/jpeg");//设置相应类型,告诉浏览器输出的内容为图片
        //response.setHeader("Pragma", "No-cache");//设置响应头信息，告诉浏览器不要缓存此内容
        //response.setHeader("Cache-Control", "no-cache");
        response.setDateHeader("Expire", 0);
        response.getOutputStream().write(out.toByteArray());
     // 9、释放资源
        g.dispose();
    }
	
	@RequestMapping(value="showImageList")
	@ResponseBody
	public BashijuResult showImageList(Long communityId) {
		List<Map<String, Object>> list=communityService.queryImageList(communityId);
		return BashijuResult.ok(list);
	}
	
	@RequestMapping(value="deleteImage")
	@ResponseBody
	public BashijuResult deleteImage(String code) {
		communityService.deleteImage(code);
		return BashijuResult.ok();
	}
}
