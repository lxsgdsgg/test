package com.bashiju.manage.service.impl;

import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bashiju.cert.interceptors.DataAuthHelper;
import com.bashiju.enums.MenuEnum;
import com.bashiju.manage.mapper.DeptTypeMapper;
import com.bashiju.manage.service.DeptTypeService;
import com.bashiju.utils.exception.BusinessException;
import com.bashiju.utils.log.ExecutionResult;
import com.bashiju.utils.log.SystemServiceLog;
import com.bashiju.utils.service.CommonSqlServie;
import com.bashiju.utils.threadlocal.UserThreadLocal;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
/**
 * 
 * @ClassName:  DeptTypeServiceImpl   
 * @Description:部门类型服务   
 * @author: wangpeng
 * @date:   2018年4月26日 下午3:15:44   
 *      
 * @Copyright: 2018 www.bashiju.com Inc. All rights reserved. 
 * 本内容仅限于云南巴士居网络服务公司内部传阅，禁止外泄以及用于其他的商业项目
 */
@Service
@SystemServiceLog(sourceType="部门类型管理")
public class DeptTypeServiceImpl extends CommonSqlServie implements DeptTypeService {
	
	@Autowired
	private DeptTypeMapper deptTypeMapper;
	@Autowired
	private DataAuthHelper dataAuthHelper;
	/**
	 * 
	 * <p>Title: queryDeptTypeList</p>   
	 * <p>Description:分页查询 </p>   
	 * @param deptTypeId   部门类型id
	 * @param deptTypeName 部门类型名称呢个
	 * @param pageNum 当前页
	 * @param pageSize 页码大小
	 * @return
	 * @throws Exception   
	 * @see com.bashiju.manage.service.DeptTypeService#queryDeptTypeList(java.lang.String, java.lang.String, int, int)
	 */
	@Override
	public Page<Map<String, Object>> queryDeptTypeList(String deptTypeName,int pageNum,int pageSize) throws Exception {
		PageHelper.startPage(pageNum,pageSize);
		dataAuthHelper.auth(MenuEnum.MENU_31.getCode(),UserThreadLocal.get().get("id").toString());
		Page<Map<String, Object>> page=deptTypeMapper.queryDeptTypeList(deptTypeName);
		return page;
	}
		
	
	
	/**
	 * 
	 * <p>Title: queryDeptTypeById</p>   
	 * <p>Description: 通过部门类型id查询部门信息</p>   
	 * @param id 部门类型id
	 * @return
	 * @throws Exception   
	 * @see com.bashiju.manage.service.DeptTypeService#queryDeptTypeById(java.lang.String)
	 */
	@Override
	@SystemServiceLog(operationType="条件查询部门类型")
	public Map<String, Object> queryDeptTypeById(String id) throws Exception {
		if(StringUtils.isEmpty(id))
			return null;
		return deptTypeMapper.queryDeptTypeById(id);
	}
	
	/**
	 * 
	 * <p>Title: isRelation</p>   
	 * <p>Description: 通过部门类型id，查询是否有部门关联信息</p>   
	 * @param deptTypeId 部门类型数据
	 * @return   
	 * @see com.bashiju.manage.service.DeptTypeService#isRelation(java.lang.String)
	 */
	@Override
	@SystemServiceLog(operationType="查询部门类型关联数据")
	public boolean isRelation(String deptTypeId) {
		if(deptTypeMapper.isRelation(deptTypeId)>0)
			return true;
		else
			return false;
	}
	/**
	 * 
	 * <p>Title: saveOrUpdateDeptType</p>   
	 * <p>Description: 添加或保存部门类型编号</p>   
	 * @param map
	 * @see com.bashiju.manage.service.DeptTypeService#saveOrUpdateDeptType(java.util.Map)
	 */
	@Override
	@SystemServiceLog(operationType="保存部门类型")
	public boolean saveOrUpdateDeptType(Map<Object, Object> map) {
		long result=0;
		if(!map.containsKey("id")|| StringUtils.isEmpty(map.get("id").toString())){
			//新增
			map.remove("id");
			result=this.commonOperationDatabase(map, "sys_dept_type", false);
			if(result>0)
				ExecutionResult.descFormat(Long.toString(result), "新增部门类型");
			else
				return false;
		}else {
			result=this.commonOperationDatabase(map,"sys_dept_type" , "id", false);
			if(result>0)
				ExecutionResult.descFormat(Long.toString(result),"编辑部门类型");
			else 
				return false;
		}
		return true;
	}
	/**
	 * 
	 * <p>Title: delDeptType</p>   
	 * <p>Description: 逻辑删除部门类型 </p>   
	 * @param deptTypeId 部门类型id
	 * @return   
	 * @see com.bashiju.manage.service.DeptTypeService#delDeptType(java.lang.String)
	 */
	@Override
	@SystemServiceLog(operationType="逻辑删除部门类型")
	public boolean delDeptType(String deptTypeId) {
	 if(StringUtils.isEmpty(deptTypeId))
		 throw new BusinessException("请选择要删除的部门类型信息");
	 if(this.isRelation(deptTypeId))
		  throw new BusinessException("存在关联数据，不允许删除");
	 boolean tt=this.delData("sys_dept_type", "id", deptTypeId, false);
	 if(tt){
		 ExecutionResult.descFormat(deptTypeId, "删除部门类型");
		 return true;
	 }else
		return false;
	}


	/**
	 * <p>Title: queryAllDeptTypes</p>   
	 * <p>Description: 部门信息 </p>   
	 * @see com.bashiju.manage.service.DeptTypeService#queryAllDeptTypes()
	 */
	@Override
	public List<Map<String, Object>> queryAllDeptTypes() {
		List<Map<String,Object>> deptyTypes=deptTypeMapper.queryAllDeptTypes();
		if(deptyTypes!=null&&deptyTypes.size()>0)
			return deptyTypes;
		return null;
	}



	/** 
	 *  查询部门名称和部门编号
	 * <p>Title: queryDeptTypeIdAndName</p>   
	 * <p>Description:查询部门名称和部门编号 </p>   
	 * @see com.bashiju.manage.service.DeptTypeService#queryDeptTypeIdAndName()   
	 */
	
	@Override
	public List<Map<String, Object>> queryDeptTypeIdAndName() {
		return deptTypeMapper.queryDeptTypeIdAndName();
	}
	
}
