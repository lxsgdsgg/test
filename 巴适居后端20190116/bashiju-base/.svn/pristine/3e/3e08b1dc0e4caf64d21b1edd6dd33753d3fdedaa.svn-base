package com.bashiju.base.service.emailservice;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.mail.DefaultAuthenticator;
import org.apache.commons.mail.Email;
import org.apache.commons.mail.EmailAttachment;
import org.apache.commons.mail.EmailException;
import org.apache.commons.mail.HtmlEmail;
import org.apache.commons.mail.ImageHtmlEmail;
import org.apache.commons.mail.MultiPartEmail;
import org.apache.commons.mail.SimpleEmail;
import org.apache.commons.mail.resolver.DataSourceUrlResolver;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import com.bashiju.api.EmailServiceApi;
import com.bashiju.base.mapper.AdminMapper;
import com.bashiju.base.pojo.SysAdminEmailList;
import com.bashiju.base.service.redisservice.RedisClusterServiceImpl;
import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * Email发送实现
 * @ClassName:  EmailServiceImpl   
 * @Description:TODO(这里用一句话描述这个类的作用)   
 * @author: zhaobin
 * @date:   2018年7月27日 下午7:45:45   
 *     
 * @Copyright: 2018 www.bashiju.com Inc. All rights reserved. 
 * 本内容仅限于云南巴士居网络服务公司内部传阅，禁止外泄以及用于其他的商业项目
 */
public class EmailServiceImpl extends RedisClusterServiceImpl implements EmailServiceApi  {
	
	@Autowired
	AdminMapper adminMapper;
	
	private final static String HOST_NAME="smtp.qq.com";
	private final static int HOST_PORT=465;
	private final static String HOST_USERNAME="165650314@qq.com";
	private final static String HOST_PASSWORD="ccdyvucscugkbhfh";
	private final static String SEND_EMAIL_ADDRESS="165650314@qq.com";
	private final static String SEND_NAME="ERP系统";
	private final static String SEND_SUBJECT="来自ERP系统的警告";
	private final static ObjectMapper MAPPER= new ObjectMapper();
	static Logger logger=Logger.getLogger(EmailServiceImpl.class);

	/**
	 * 发送内容为简单文本的邮件
	 * @Title: sendSimpleTextEmail   
	 * @Description: 发送内容为简单文本的邮件 
	 * @param: @param subject 邮件主题
	 * @param: @param msg 邮件内容
	 * @param: @param receiveaddress 接收方邮件地址
	 * @param: @throws EmailException      
	 * @return: void      
	 * @throws
	 */
	
    public static void sendSimpleTextEmail(String subject,String msg,String receiveaddress)  {
        Email email = new SimpleEmail();
        email.setHostName(HOST_NAME);
        email.setSmtpPort(HOST_PORT);
        // 用户名和密码为邮箱的账号和密码（不需要进行base64编码）
        email.setAuthenticator(new DefaultAuthenticator(HOST_USERNAME, HOST_PASSWORD));
        email.setSSLOnConnect(true);
        try {
			email.setFrom(SEND_EMAIL_ADDRESS);
			email.setSubject(subject);
			email.setMsg(msg);
			email.addTo(receiveaddress);
			email.send();
		} catch (Exception e) {
			logger.error(e);
		}
    }

    /**
     * <pre>
     * 
     * To add attachments to an email, you will need to use the MultiPartEmail
     * class. This class works just like SimpleEmail except that it adds several
     * overloaded attach() methods to add attachments to the email. You can add
     * an unlimited number of attachments either inline or attached. The
     * attachments will be MIME encoded.
     * 
     * The simplest way to add the attachments is by using the EmailAttachment
     * class to reference your attachments.
     * 
     * In the following example, we will create an attachment for a picture. We
     * will then attach the picture to the email and send it.
     * 
     * </pre>
     * 
     * @describe 发送包含附件的邮件（附件为本地资源）
     * @throws EmailException
     */
    public static void sendEmailsWithAttachments()  {
        // Create the attachment
        EmailAttachment attachment = new EmailAttachment();
        attachment.setPath("mypictures/john.jpg");
        attachment.setDisposition(EmailAttachment.ATTACHMENT);
        attachment.setDescription("Picture of John");
        attachment.setName("John");

        // Create the email message
        MultiPartEmail email = new MultiPartEmail();
        email.setHostName(HOST_NAME);
        email.setSmtpPort(HOST_PORT);
        try {
			email.addTo("jdoe@somewhere.org", "John Doe");
			email.setFrom(SEND_EMAIL_ADDRESS, SEND_NAME);
			email.setSubject(SEND_SUBJECT);
			email.setMsg("Here is the picture you wanted");
			// add the attachment
			email.attach(attachment);
			// send the email
			email.send();
		} catch (Exception e) {
			logger.error(e);
		}
    }

    /**
     * <pre>
     * 
     * You can also use EmailAttachment to reference any valid URL for files
     * that you do not have locally. When the message is sent, the file will be
     * downloaded and attached to the message automatically.
     * 
     * The next example shows how we could have sent the apache logo to John
     * instead.
     * 
     * </pre>
     * 
     * @describe 发送包含附件的邮件（附件为在线资源）
     * @throws EmailException
     * @throws MalformedURLException
     */
    public static void sendEmailsWithOnlineAttachments() {
        try {
			// Create the attachment
			EmailAttachment attachment = new EmailAttachment();
			attachment.setURL(new URL("http://www.apache.org/images/asf_logo_wide.gif"));
			attachment.setDisposition(EmailAttachment.ATTACHMENT);
			attachment.setDescription("Apache logo");
			attachment.setName("Apache logo");
			// Create the email message
			MultiPartEmail email = new MultiPartEmail();
			email.setHostName(HOST_NAME);
			email.setSmtpPort(HOST_PORT);
			email.addTo("jdoe@somewhere.org", "John Doe");
			email.setFrom(SEND_EMAIL_ADDRESS, "Me");
			email.setSubject("The logo");
			email.setMsg("Here is Apache's logo");
			// add the attachment
			email.attach(attachment);
			// send the email
			email.send();
		} catch (Exception e) {
			logger.error(e);
		}
    }

    /**
     * <pre>
     * 
     * Sending HTML formatted email is accomplished by using the HtmlEmail
     * class. This class works exactly like the MultiPartEmail class with
     * additional methods to set the html content, alternative text content if
     * the recipient does not support HTML email, and add inline images.
     * 
     * In this example, we will send an email message with formatted HTML
     * content with an inline image.
     * 
     * First, notice that the call to embed() returns a String. This String is a
     * randomly generated identifier that must be used to reference the image in
     * the image tag.
     * 
     * Next, there was no call to setMsg() in this example. The method is still
     * available in HtmlEmail but it should not be used if you will be using
     * inline images. Instead, the setHtmlMsg() and setTextMsg() methods were
     * used.
     * 
     * <pre>
     * 
     * @describe 发送内容为HTML格式的邮件
     * @throws EmailException
     * @throws MalformedURLException
     */
    public static void sendHTMLFormattedEmail()  {
        // Create the email message
        HtmlEmail email = new HtmlEmail();
        email.setHostName(HOST_NAME);
        email.setSmtpPort(HOST_PORT);
        try {
			email.addTo("jdoe@somewhere.org", "John Doe");
			email.setFrom(SEND_EMAIL_ADDRESS, SEND_NAME);
			email.setSubject(SEND_SUBJECT);
			// embed the image and get the content id
			URL url = new URL("http://www.apache.org/images/asf_logo_wide.gif");
			String cid = email.embed(url, "Apache logo");
			// set the html message
			email.setHtmlMsg("<html>The apache logo - <img src=\"cid:" + cid + "\"></html>");
			// set the alternative message
			email.setTextMsg("Your email client does not support HTML messages");
			// send the email
			email.send();
		} catch (Exception e) {
			logger.error(e);
		}
    }

    /**
     * <pre>
     * 
     * The previous example showed how to create a HTML email with embedded
     * images but you need to know all images upfront which is inconvenient when
     * using a HTML email template. The ImageHtmlEmail helps you solving this
     * problem by converting all external images to inline images.
     * 
     * First we create a HTML email template referencing some images. All
     * referenced images are automatically transformed to inline images by the
     * specified DataSourceResolver.
     * 
     * </pre>
     * 
     * @describe 发送内容为HTML格式的邮件（嵌入图片更方便）
     * @throws MalformedURLException
     * @throws EmailException
     */
    public static void sendHTMLFormattedEmailWithEmbeddedImages(){
        try {
			// load your HTML email template
			String htmlEmailTemplate = ".... <img src=\"http://www.apache.org/images/feather.gif\"> ....";
			// define you base URL to resolve relative resource locations
			URL url = new URL("http://www.apache.org");
			// create the email message
			ImageHtmlEmail email = new ImageHtmlEmail();
			email.setDataSourceResolver(new DataSourceUrlResolver(url));
			email.setHostName(HOST_NAME);
			email.addTo("jdoe@somewhere.org", "John Doe");
			email.setFrom(SEND_EMAIL_ADDRESS, SEND_NAME);
			email.setSubject(SEND_SUBJECT);
			// set the html message
			email.setHtmlMsg(htmlEmailTemplate);
			// set the alternative message
			email.setTextMsg("Your email client does not support HTML messages");
			// send the email
			email.send();
		} catch (Exception e) {
			logger.error(e);
		}
    }

    /**
     * 发送系统消息给管理员
     * @Title: sendEmailToAdmin   
     * @Description: 发送系统消息给管理员  
     * @param:  subject 主题
     * @param:  msg  邮件内容
     * @param:  headModuleId    模块Id
     * @return: void      
     * @throws
     */
    public void sendEmailToAdmin(String subject, String msg,String headModuleId) {
        List<SysAdminEmailList> list=null;
		try {
	        // 先从缓存中命中，如果命中就返回，没有命中继续执行
	        String cacheData = this.get("sys_admin_email_list_"+headModuleId);
	        if (StringUtils.isNotEmpty(cacheData)) {
	            // 命中
	            list= MAPPER.readValue(cacheData, List.class);
	        }
	    } catch (Exception e) {
	        e.printStackTrace();
	    }
			list=adminMapper.queryAdminInfo(headModuleId);
		try {
			this.set("sys_admin_email_list_"+headModuleId, MAPPER.writeValueAsString(list), 60*60*24*365*10);
		}
		catch (Exception e) {
			// TODO: handle exception
		}
		
		
		for(int i=0;i<list.size();i++) {
			sendSimpleTextEmail(subject, msg, list.get(i).getAdminemail());
		}
		
    }
    
    
    
    public static void main(String[] args) throws EmailException {
        Email email = new SimpleEmail();
        email.setHostName(HOST_NAME);
        email.setSmtpPort(HOST_PORT);
        email.setAuthenticator(new DefaultAuthenticator(HOST_USERNAME,HOST_PASSWORD));
        email.setSSLOnConnect(true);
        email.setFrom(SEND_EMAIL_ADDRESS, SEND_NAME);
        email.setSubject(SEND_SUBJECT);
        email.setMsg("This is a test mail ... :-)");
        email.addTo("zhaobindaxia@qq.com");
        email.send();
    }
}