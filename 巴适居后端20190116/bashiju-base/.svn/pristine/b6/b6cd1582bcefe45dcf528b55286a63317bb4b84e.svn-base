package com.bashiju.base.service.redisservice;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatterBuilder;
import java.util.HashMap;
import java.util.Map;

import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bashiju.api.RedisGetIdServiceApi;
import com.bashiju.base.BaseGlobal.BaseGlobal;
import com.bashiju.base.service.mq.SendSMS;
import com.bashiju.utils.exception.BusinessException;
import com.bashiju.utils.util.SpringContextHolder;

import redis.clients.jedis.JedisCluster;

@Service
public class RedisGetIdImpl  implements RedisGetIdServiceApi{
	   
	@Autowired
	JedisCluster jedisCluster;

    public String getHouseBindCode(String houseId,String toPhone) {
    	if(jedisCluster.exists(houseId+"sendspeed")){
    		return "0";
    	}
		String code=getSixCode("houseBindCode");
		jedisCluster.set(code,houseId);
		jedisCluster.expire(code, BaseGlobal.HOUSEBINDCODEEXPTIME*BaseGlobal.SECONDSTOHOURS);
		System.out.println("生成房源六位绑定码=====>"+code);
		/*发送短息*/
		this.sendSmsMsg(toPhone, "您的房源认证码是"+code+"。"+BaseGlobal.HOUSEBINDCODEEXPTIME+"小时");
		jedisCluster.set(houseId+"sendspeed","0");
		jedisCluster.expire(houseId+"sendspeed",BaseGlobal.SENDSPEED);
			return code;

    }
    
    public String getCustomBindCode(String customId,String toPhone) {
    	if(jedisCluster.exists(customId+"sendspeed")){
    		return "0";
    	}
		String code=getSixCode("customBindCode");
		jedisCluster.set(code,customId);
		jedisCluster.expire(code,BaseGlobal.CUSTOMBINDCODEEXPTIME*BaseGlobal.SECONDSTOHOURS);
			System.out.println("生成客源六位绑定码=====>"+code);
			/*发送短息*/
			this.sendSmsMsg(toPhone, "您的需求认证码是"+code+"。"+BaseGlobal.CUSTOMBINDCODEEXPTIME+"小时");			
			jedisCluster.set(customId+"sendspeed","0");
			jedisCluster.expire(customId+"sendspeed",60);
				return code;

    }
    
    public String getMsgAuthCode(String phoneNumber) {
    	if(jedisCluster.exists(phoneNumber+"sendspeed")){
    		return "0";
    	}
    	String code=getSixCode("msgAuthCode");
		/*短信验证码和手机号码通过hset存入redis,"msgAuthCode"为短信验证码的字段*/
		jedisCluster.set(phoneNumber, code);
		jedisCluster.expire(phoneNumber, BaseGlobal.MSGAUTHCODEEXPTIME*60);
		System.out.println("生成短信六位验证码=====>"+code);
		/*发送短息*/
		this.sendSmsMsg(phoneNumber, "您的验证码是"+code+"。"+BaseGlobal.MSGAUTHCODEEXPTIME+"分钟");			
		jedisCluster.set(phoneNumber+"sendspeed","0");
		jedisCluster.expire(phoneNumber+"sendspeed",BaseGlobal.SENDSPEED);
				return code;

    }
    
    public boolean DelCode(String code) {
		jedisCluster.del(code);
			System.out.println("删除的码=====>"+code);
			return true;

    }
    
    public String getCustomId() {
    	String res=getThreeCode("customGrowthCode");//customGrowthCode表示客源自增长code
    	String time= LocalDateTime.now().format(new DateTimeFormatterBuilder().appendPattern("yyMMdd").toFormatter());
    	String code="";
    		code=BaseGlobal.KY_PERFIX+time+res;
		System.out.println("生成客源ID=====>"+code);
			return code;

    }
    
    public String getDealId(boolean mmDeal) {
    	String res=getThreeCode("dealGrowthCode");//dealGrowthCode表示成交自增长code
    	String time= LocalDateTime.now().format(new DateTimeFormatterBuilder().appendPattern("yyMMdd").toFormatter());
    	String code="";
    	if(mmDeal) {
    		code=BaseGlobal.MMCJ_PERFIX+time+res;
    	}else {
		 code=BaseGlobal.ZLCJ_PERFIX+time+res;
    	}
		System.out.println("生成成交ID=====>"+code);
			return code;

    }
    
    public String getHouseId(String areaCode) {
    	String res=getSixGrowthCode(areaCode+"id");
    	String code=BaseGlobal.FY_PERFIX+areaCode+res;
		System.out.println("生成房源ID=====>"+code);
			return code;

    }
    /**
     * 生成六位数字
     * @Title: getSixCode   
     * @Description: TODO(这里用一句话描述这个方法的作用)   
     * @param: @param key
     * @param: @return      
     * @return: String      
     * @throws
     */
    private String getSixCode(String key) {
		String res=getThreeCode(key);
		String ranDom=String.valueOf((int)(Math.random()*900)+100);		
		String code=ranDom+res;
		return code;
    }
    
    /**
     * 从redis中获取自增长的3为数字，最大值为995.
     * @Title: getThreeCode   
     * @Description: TODO(这里用一句话描述这个方法的作用)   
     * @param: @param key
     * @param: @return      
     * @return: String      
     * @throws
     */
    private String getThreeCode(String key) {
    	long d=jedisCluster.incr(key);
		if(d>995) {
			jedisCluster.set(key, "0");
		}
		String res=String.format("%03d", d);
		return res;
    }
    
    /**
     * 从redis中获取自增长的6为数字，最大值为999999.
     * @Title: getThreeCode   
     * @Description: TODO(这里用一句话描述这个方法的作用)   
     * @param: @param key
     * @param: @return      
     * @return: String      
     * @throws
     */
    private String getSixGrowthCode(String key) {
    	long d=jedisCluster.incr(key);
		String code=String.format("%06d", d);
		return code;
    }
    
    private void sendSmsMsg(String toPhone,String smsContent) {	
    	if(toPhone.isEmpty() || smsContent.isEmpty()) {
    		throw new BusinessException("接受短息的手机号码或者短信内容不能为空");
    	}
		RabbitTemplate rabbitTemplate = (RabbitTemplate) SpringContextHolder.getBean("reRabbitTemplate");
    	Map<String,Object> map=new HashMap<>();
    	map.put("toPhone",toPhone);
    	map.put("smsContent",smsContent);
    	rabbitTemplate.convertAndSend("SMS.SEND", map);
    }
}
