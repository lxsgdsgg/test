package com.bashiju.deal.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.alibaba.fastjson.JSON;
import com.bashiju.deal.mapper.ContractMapper;
import com.bashiju.deal.service.ContractService;
import com.bashiju.utils.service.CommonSqlServie;
import com.bashiju.utils.threadlocal.UserThreadLocal;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
/**
 * 
 *   合同模板管理
 * @ClassName:  ContractServiceImpl   
 * @Description:   合同模板管理
 * @author: wangkaifa
 * @date:   2018年9月20日 下午5:26:25       
 * @Copyright: 2018 www.bashiju.com Inc. All rights reserved. 
 * 本内容仅限于云南巴士居网络服务公司内部传阅，禁止外泄以及用于其他的商业项目
 */
@Service
public class ContractServiceImpl implements ContractService {
	@Autowired
	ContractMapper contractMapper;
	@Autowired
	CommonSqlServie commonSqlServie;
	
	@Override
	public Page<Map<String, Object>> queryContractList(int page, int limit) {
		PageHelper.startPage(page,limit);
		Page<Map<String, Object>> result=contractMapper.queryContractList();
		return result;
	}

	@Override
	public Map<String, Object> queryDetailed(Long templateId) {
		Map<String, Object> result=new HashMap<>();
		Map<String, Object> template=contractMapper.queryContract(templateId);
		List<Map<String, Object>> terms=contractMapper.queryTerms(templateId);
		List<Map<String, Object>> items=contractMapper.queryItems(templateId);
		if (template.get("declaration")!=null&&!"".equals(template.get("declaration").toString())) {
			result.put("declaration", template.get("declaration"));
		}else {
			result.put("declaration", "");
		}
		result.put("templateType", template.get("templateType"));
		result.put("companyName", template.get("companyName"));
		List<Map<String, Object>> termList=new ArrayList<>();
		if (terms!=null&&terms.size()>0) {
			for (int i = 0; i < terms.size(); i++) {
				Map<String, Object> term=new HashMap<>();
				term.put("number", terms.get(i).get("number"));
				term.put("title", terms.get(i).get("title"));
				List<Map<String, Object>> content=new ArrayList<>();
				List<List<Map<String, Object>>> rows=new ArrayList<>();
				if (items!=null&&items.size()>0) {
					Map<String, List<Map<String, Object>>> rowMap=new HashMap<>();
					for (int j = 0; j < items.size(); j++) {
						if (items.get(j).get("termId").toString().equals(terms.get(i).get("id").toString())) {
							Map<String, Object> item=new HashMap<>();
							item.put("tag", items.get(j).get("tag")==null?"":items.get(j).get("tag"));
							item.put("css", items.get(j).get("css")==null?"":items.get(j).get("css"));
							item.put("value", items.get(j).get("value")==null?"":items.get(j).get("value"));
							item.put("text", items.get(j).get("text")==null?"":items.get(j).get("text"));
							if (items.get(j).get("itemType").toString().equals("1")) {
								content.add(item);
							}else {
								String key=items.get(j).get("number").toString();
								List<Map<String, Object>> row=rowMap.get(key);
								if (row==null) {
									row=new ArrayList<>();
								}
								row.add(item);
								rowMap.put(key, row);
							}
						}
					}
					for (int j = 0; j < rowMap.size(); j++) {
						rows.add(rowMap.get((j+1)+""));
					}				
				}
				term.put("content", content);
				term.put("rows", rows);
				termList.add(term);
			}
		}
		result.put("terms", termList);
		return result;
	}

	@Override
	public Long addTemplate(String templateName, Integer type, String remark) {
		Map user=UserThreadLocal.get();
		Map<Object, Object> param=new HashMap<>();
		param.put("templateName", templateName);
		param.put("remark", remark);
		param.put("declaration", "");
		param.put("templateType", type);
		param.put("companyId", user.get("companyId"));
		param.put("companyName", user.get("comName"));
		param.put("permissionArea", user.get("deptId"));
		param.put("operatorId", user.get("id"));
		Long id=commonSqlServie.commonOperationDatabase(param, "contract_template_main", false);
		return id;
	}

	@Override
	public int updateTemplate(Long id, String templateName, Integer type, String remark) {
		Map<Object, Object> param=new HashMap<>();
		param.put("templateName", templateName);
		param.put("remark", remark);
		param.put("templateType", type);
		param.put("id", id);
		Long result=commonSqlServie.commonOperationDatabase(param, "contract_template_main", "id", false);
		return result.intValue();
	}

	@Override
	public boolean saveTemplateDetailed(Long id,String companyName,String declaration, String termJson) {
		Map user=UserThreadLocal.get();
		Map<Object, Object> param=new HashMap<>();
		param.put("declaration", declaration);
		param.put("companyName", companyName);
		param.put("id", id);
		Long result=commonSqlServie.commonOperationDatabase(param, "contract_template_main", "id", false);
		if (StringUtils.isNotEmpty(termJson)) {
			contractMapper.deleteItem(id);
			contractMapper.deleteTerm(id);
			List<Map> terms=JSON.parseArray(termJson, Map.class);
			for (int i = 0; i < terms.size(); i++) {
				Map<Object, Object> term=new HashMap<>();
				term.put("templateId", id);
				term.put("title", terms.get(i).get("title")==null?"":terms.get(i).get("title"));
				term.put("number", i+1);
				term.put("permissionArea", user.get("deptId"));
				term.put("operatorId", user.get("id"));
				long termId=commonSqlServie.commonOperationDatabase(term, "contract_template_term", false);
				if (terms.get(i).get("content")!=null) {
					List<Map> content=JSON.parseArray(terms.get(i).get("content").toString(), Map.class);				
					String fields="templateId,termId,itemType,number,tag,css,value,text,width,permissionArea,operatorId";
					List<String> valueList=new ArrayList<>();
					for (int j = 0; j < content.size(); j++) {
						StringBuffer paramBuffer=new StringBuffer();
						paramBuffer.append(id);
						paramBuffer.append(",");
						paramBuffer.append(termId);
						paramBuffer.append(",");
						paramBuffer.append(1);
						paramBuffer.append(",");
						paramBuffer.append(j+1);
						paramBuffer.append(",'");
						if (content.get(j).get("tag")!=null) {
							paramBuffer.append(content.get(j).get("tag"));
						}
						paramBuffer.append("','");
						if (content.get(j).get("css")!=null) {
							paramBuffer.append(content.get(j).get("css"));
						}
						paramBuffer.append("','");
						if (content.get(j).get("value")!=null) {
							paramBuffer.append(content.get(j).get("value"));
						}
						paramBuffer.append("','");
						if (content.get(j).get("text")!=null) {
							paramBuffer.append(content.get(j).get("text"));
						}
						paramBuffer.append("',");
						if (content.get(j).get("width")!=null) {
							paramBuffer.append(content.get(j).get("width"));
						}else {
							paramBuffer.append(0);
						}
						paramBuffer.append(",'");
						paramBuffer.append(user.get("deptId"));
						paramBuffer.append("',");
						paramBuffer.append(user.get("id"));
						valueList.add(paramBuffer.toString());
	
					}
					if (valueList.size()>0) {
						commonSqlServie.batchAdd(fields, "contract_template_termItem", valueList, false);
					}				
				}
				if (terms.get(i).get("rows")!=null) {
					String fields="templateId,termId,itemType,number,tag,css,value,text,width,permissionArea,operatorId";
					List<String> valueList=new ArrayList<>();
					List<List> rows=JSON.parseArray(terms.get(i).get("rows").toString(), List.class);
					for (int j = 0; j < rows.size(); j++) {
						List<Map>  row=JSON.parseArray(rows.get(j).toString(), Map.class);
						
						for (int k = 0; k < row.size(); k++) {
							StringBuffer paramBuffer=new StringBuffer();
							paramBuffer.append(id);
							paramBuffer.append(",");
							paramBuffer.append(termId);
							paramBuffer.append(",");
							paramBuffer.append(2);
							paramBuffer.append(",");
							paramBuffer.append(j+1);
							paramBuffer.append(",'");
							if (row.get(k).get("tag")!=null) {
								paramBuffer.append(row.get(k).get("tag"));
							}
							paramBuffer.append("','");
							if (row.get(k).get("css")!=null) {
								paramBuffer.append(row.get(k).get("css"));
							}
							paramBuffer.append("','");
							if (row.get(k).get("value")!=null) {
								paramBuffer.append(row.get(k).get("value"));
							}
							paramBuffer.append("','");
							if (row.get(k).get("text")!=null) {
								paramBuffer.append(row.get(k).get("text"));
							}
							paramBuffer.append("',");
							if (row.get(k).get("width")!=null) {
								paramBuffer.append(row.get(k).get("width"));
							}else {
								paramBuffer.append(0);
							}
							paramBuffer.append(",'");
							paramBuffer.append(user.get("deptId"));
							paramBuffer.append("',");
							paramBuffer.append(user.get("id"));
							valueList.add(paramBuffer.toString());
		
						}
					}
					if (valueList.size()>0) {
						commonSqlServie.batchAdd(fields, "contract_template_termItem", valueList, false);
					}					
				}
			}
		}
		return true;
	}

	@Override
	public int deleteTemplate(Long templateId) {
		commonSqlServie.delData("contract_template_main", "id", templateId.toString(), false);
		return 1;
	}

}
