<template>

  <div class="example-full">

    <div v-show="$refs.upload && $refs.upload.dropActive" class="drop-active">
      <h3>Drop files to upload</h3>
    </div>

    <div class="upload">
      <div class="table-responsive">
        <table class="table table-hover">
          <thead>
          <tr>
            <th v-if="multiple">#</th>
            <th>缩略图</th>
            <th v-if="!simple">名称</th>
            <th v-if="!simple">文件大小</th>
            <th>slot</th>
            <th v-if="!simple">状态</th>
            <th>操作</th>
          </tr>
          </thead>
          <tbody>
          <tr v-if="!files.length">
            <td colspan="7">
              <div class="text-center upload-dragger">
                <h4>将文件拖到此处</h4>
                <template v-if="!simple">
                  <h4>或</h4>
                  <label class="btn btn-lg btn-primary" :for="name">点击选择文件</label>
                </template>
              </div>
            </td>
          </tr>
          <tr v-for="(file, index) in files" :key="file.id">
            <td v-if="multiple">{{index}}</td>
            <td>
              <img v-if="file.thumb" :src="file.thumb" width="100" height="auto" />
              <span v-else>{{file.name}}</span>
            </td>
            <td v-if="!simple">
              <div class="filename">
                {{file.name}}
              </div>
              <div class="progress" v-if="file.active || file.progress !== '0.00'">
                <div :class="{'progress-bar': true, 'progress-bar-striped': true, 'bg-danger': file.error, 'progress-bar-animated': file.active}" role="progressbar" :style="{width: file.progress + '%'}">{{file.progress}}%</div>
              </div>
              <!--<el-progress v-if="file.active || file.progress !== '0.00'" :text-inside="true" :stroke-width="18" :percentage="parseInt(file.progress)"></el-progress>-->

            </td>
            <td v-if="!simple">{{file.size | formatSize}}</td>
            <td>
              <!-- 插槽 自定义内容 -->
              <slot :file="file"></slot>
            </td>

            <template v-if="!simple">
              <td v-if="file.error">{{file.error}}</td>
              <td v-else-if="file.success">success</td>
              <td v-else-if="file.active">active</td>
              <td v-else></td>
            </template>

            <td>
              <div class="btn-group">
                <button class="btn btn-secondary btn-sm dropdown-toggle" type="button">
                  操作 <i class="el-icon-caret-bottom"></i>
                </button>
                <div class="dropdown-menu">
                  <a :class="{'dropdown-item': true, disabled: file.active || file.success || file.error === 'compressing'}" href="#" @click.prevent="file.active || file.success || file.error === 'compressing' ? false :  onEditFileShow(file)">编辑</a>
                  <a :class="{'dropdown-item': true, disabled: !file.active}" href="#" @click.prevent="file.active ? $refs.upload.update(file, {error: 'cancel'}) : false">取消</a>

                  <a class="dropdown-item" href="#" v-if="file.active" @click.prevent="$refs.upload.update(file, {active: false})">中止</a>
                  <a class="dropdown-item" href="#" v-else-if="file.error && file.error !== 'compressing' && $refs.upload.features.html5" @click.prevent="$refs.upload.update(file, {active: true, error: '', progress: '0.00'})">重试</a>
                  <a :class="{'dropdown-item': true, disabled: file.success || file.error === 'compressing'}" href="#" v-else @click.prevent="handleUploadItem(file)">上传</a>

                  <div class="dropdown-divider"></div>
                  <a class="dropdown-item" href="#" @click.prevent="$refs.upload.remove(file)">移除</a>
                </div>
              </div>
            </td>
          </tr>
          </tbody>
        </table>

      </div>

      <div class="example-foorer">
        <div class="btn-group">
          <file-upload
            class="btn btn-primary dropdown-toggle"
            :post-action="postAction"
            :extensions="extensions"
            :accept="accept"
            :multiple="multiple"
            :directory="directory"
            :size="size || 0"
            :thread="thread < 1 ? 1 : (thread > 5 ? 5 : thread)"
            :headers="headers"
            :data="data"
            :drop="drop"
            :drop-directory="dropDirectory"
            :add-index="addIndex"
            v-model="files"
            @input-filter="inputFilter"
            @input-file="inputFile"
            ref="upload">
            <i class="fa fa-plus"></i>
            选择
            <i class="el-icon-caret-bottom"></i>
          </file-upload>

          <div class="dropdown-menu" v-if="multiple">
            <label class="dropdown-item" :for="name">添加文件</label>
            <a class="dropdown-item" href="#" @click="onAddFolader">添加文件夹</a>
            <!--<a class="dropdown-item" href="#" @click.prevent="addData.show = true">添加文本数据</a>-->
          </div>

        </div>

        <!--<el-button type="success" v-if="!$refs.upload || !$refs.upload.active" @click.prevent="$refs.upload.active = true"><i class="fa fa-arrow-up" aria-hidden="true"></i> Start Upload</el-button>-->
        <el-button type="success" v-if="!$refs.upload || !$refs.upload.active" @click.prevent="handleUploadAll">开始上传<i class="el-icon-upload el-icon--right"></i></el-button>
        <el-button type="danger" v-else @click.prevent="$refs.upload.active = false"><i class="fa fa-stop" aria-hidden="true"></i>停止上传</el-button>

      </div>
    </div>

    <el-dialog top="10vh" title="Add data" :visible.sync="addData.show" :close-on-click-modal="false" width="600px">
      <el-form ref="form" :model="addData">
        <el-form-item>
          <label for="name">Name:</label>
          <el-input placeholder="请填写文件名称" id="name" v-model="addData.name"></el-input>
          <small class="form-text text-muted">例如 <code>filename.txt</code></small>
        </el-form-item>

        <el-form-item>
          <label for="type">Type:</label>
          <el-input id="type" placeholder="请填写 MIME type" v-model="addData.type"></el-input>
          <small class="form-text text-muted">例如 <code>text/plain</code></small>
        </el-form-item>

        <el-form-item>
          <label for="content">Content:</label>
          <el-input :rows="3" type="textarea" id="content" placeholder="请填写内容" v-model="addData.content"></el-input>
        </el-form-item>

        <div class="form-footer">
          <button type="button" class="btn btn-secondary" @click.prevent="addData.show = false">取消</button>
          <button type="button" class="btn btn-primary" @click.prevent="onAddData">保存</button>
        </div>

      </el-form>
    </el-dialog>

    <el-dialog top="10vh" title="Edit file" :visible.sync="editFile.show" :close-on-click-modal="false" width="600px" append-to-body>
      <el-form class="file-upload-edit-wrap" ref="form" :model="editFile">
        <el-form-item>
          <label>Name: </label>
          <el-input placeholder="请填写文件名称" v-model="editFile.name"></el-input>
        </el-form-item>

        <el-form-item v-if="editFile.show && editFile.blob && editFile.type && editFile.type.substr(0, 6) === 'image/'" class="margin-b-none">
          <label>Image: </label>

          <div class="edit-image">
            <img :src="editFile.blob" ref="editImage" />
          </div>

          <div class="edit-image-tool">
            <!-- 裁剪工具条 -->
            <div class="btn-group" role="group">
              <button type="button" class="btn btn-primary" @click="editFile.cropper.rotate(-90)" title="cropper.rotate(-90)"><i class="fa fa-undo" aria-hidden="true"></i></button>
              <button type="button" class="btn btn-primary" @click="editFile.cropper.rotate(90)"  title="cropper.rotate(90)"><i class="fa fa-repeat" aria-hidden="true"></i></button>
            </div>

            <div class="btn-group" role="group">
              <button type="button" class="btn btn-primary" @click="editFile.cropper.zoom(0.1)" title="cropper.rotate(-90)"><i class="fa fa-search-plus" aria-hidden="true"></i></button>
              <button type="button" class="btn btn-primary" @click="editFile.cropper.zoom(-0.1)"  title="cropper.rotate(90)"><i class="fa fa-search-minus" aria-hidden="true"></i></button>
            </div>

            <div class="btn-group" role="group">
              <button type="button" class="btn btn-primary" @click="editFile.cropper.crop()" title="cropper.crop()"><i class="fa fa-check" aria-hidden="true"></i></button>
              <button type="button" class="btn btn-primary" @click="editFile.cropper.clear()" title="cropper.clear()"><i class="fa fa-remove" aria-hidden="true"></i></button>
            </div>
          </div>

        </el-form-item>

        <div class="form-footer" style="text-align: right; padding-top: 15px; margin-top: 20px; border-top: 1px solid #ddd">
          <button type="button" class="btn btn-secondary" @click.prevent="editFile.show = false">取消</button>
          <button type="button" class="btn btn-primary" @click.prevent="onEditorFile">保存</button>
        </div>

      </el-form>
    </el-dialog>

  </div>

</template>

<script>
  import Cropper from 'cropperjs' // 图片裁剪
  import ImageCompressor from '@xkeshi/image-compressor' // 图片压缩
  import FileUpload from 'vue-upload-component'

  export default {
    name: 'BaseFileUpload',

    props: {
      // 简单模式
      simple: {
        type: Boolean,
        default: false
      },

      // 表单的accept属性, MIME type
      accept: {
        type: String,
        default: 'image/png,image/gif,image/jpeg,image/webp'
      },

      // 允许上传的文件后缀
      extensions: {
        type: String,
        default: 'gif,jpg,jpeg,png,webp'
      },

      // 允许上传的最大字节
      size: {
        type: Number,
        default: 1024 * 1024 * 10
      },

      // 是否允许选择多个文件
      multiple: {
        type: Boolean,
        default: true
      },

      // 是否是上传文件夹
      directory: {
        type: Boolean,
        default: false
      },

      // 是否开启拖拽上传
      drop: {
        type: Boolean,
        default: true
      },

      // 是否开启拖拽目录
      dropDirectory: {
        type: Boolean,
        default: true
      },

      // 同时并发上传的文件数量 线程数
      thread: {
        type: Number,
        default: 3
      },

      // input标签的 name 属性
      name: {
        type: String,
        default: 'file'
      },

      // POST 请求的上传URL
      postAction: {
        type: String,
        default: ''
      },

      // PUT 请求的上传URL
      putAction: {
        type: String,
        default: ''
      },

      // 自定义当前文件 HTTP Header
      headers: {
        type: Object,
        default () {
          return {}
        }
      },

      // 自定义当前文件 body 或 query 附加内容
      data: {
        type: Object,
        default () {
          return {}
        }
      }
    },

    components: {
      FileUpload
    },

    data() {
      return {
        files: [],
        // accept: 'image/png,image/gif,image/jpeg,image/webp', // 表单的accept属性, MIME type
        // extensions: 'gif,jpg,jpeg,png,webp', // 允许上传的文件后缀
        // extensions: ['gif', 'jpg', 'jpeg','png', 'webp'],
        // extensions: /\.(gif|jpe?g|png|webp)$/i,
        // minSize: 1024,
        // size: 1024 * 1024 * 10,
        // multiple: true,
        // directory: false, // 是否开启拖拽目录
        // drop: true, // 拖拽上传
        // dropDirectory: true,
        addIndex: false,
        // thread: 3, // 同时并发上传的文件数量 线程数
        // name: 'file',
        // postAction: '/api/manage/community/uploadImage', // 自定义当前文件 POST 地址
        // putAction: '/api/manage/community/uploadImage', // 自定义当前文件 PUT 地址
        // headers: { // 自定义当前文件 HTTP Header
        // },
        // 自定义当前文件 body 或 query 附加内容,
        // data: {},

        autoCompress: 1024 * 1024,
        uploadAuto: false,

        addData: {
          show: false,
          name: '',
          type: '',
          content: '',
        },

        editFile: {
          show: false,
          name: '',
          type: '1'
        },
      }
    },

    watch: {
      'editFile.show'(newValue, oldValue) {
        // 关闭了 自动删除 error
        if (!newValue && oldValue) {
          this.$refs.upload.update(this.editFile.id, { error: this.editFile.error || '' })
        }

        if (newValue) {
          this.$nextTick(function () {
            if (!this.$refs.editImage) {
              return
            }
            let cropper = new Cropper(this.$refs.editImage, {
              autoCrop: true,
              dragMode: 'move'
            })
            this.editFile = {
              ...this.editFile,
              cropper
            }
          })
        }
      },

      'addData.show'(show) {
        if (show) {
          this.addData.name = ''
          this.addData.type = ''
          this.addData.content = ''
        }
      },
    },

    methods: {
      // 全部上传事件
      handleUploadAll () {
        if (this.multiple) {
          this.$emit('handleUploadAll', this.files)
        } else {
          this.$emit('handleUploadAll', this.files[0])
        }
      },

      /**
       * 全部上传
       * @param params
       */
      uploadAll () {
        this.$refs.upload.active = true
      },

      // 上传单个事件
      handleUploadItem (file) {
        if (file.success || file.error === 'compressing') {
          return false
        } else {
          this.$emit('handleUploadItem', file)
        }
      },

      uploadItem (file) {
        this.$refs.upload.update(file, {active: true})
      },


      inputFilter(newFile, oldFile, prevent) {
        if (newFile && !oldFile) {
          // Before adding a file
          // 添加文件前

          // Filter system files or hide files
          // 过滤系统文件 和隐藏文件
          if (/(\/|^)(Thumbs\.db|desktop\.ini|\..+)$/.test(newFile.name)) {
            return prevent()
          }

          // Filter php html js file
          // 过滤 php html js 文件
          if (/\.(php5?|html?|jsx?)$/i.test(newFile.name)) {
            return prevent()
          }

          // Automatic compression
          // 自动压缩
          if (newFile.file && newFile.type.substr(0, 6) === 'image/' && this.autoCompress > 0 && this.autoCompress < newFile.size) {
            newFile.error = 'compressing'
            const imageCompressor = new ImageCompressor(null, {
              convertSize: Infinity,
              maxWidth: 512,
              maxHeight: 512,
            })
            imageCompressor.compress(newFile.file)
              .then((file) => {
                this.$refs.upload.update(newFile, { error: '', file, size: file.size, type: file.type })
              })
              .catch((err) => {
                this.$refs.upload.update(newFile, { error: err.message || 'compress' })
              })
          }
        }

        if (newFile && (!oldFile || newFile.file !== oldFile.file)) {

          // Create a blob field
          // 创建 blob 字段
          newFile.blob = ''
          let URL = window.URL || window.webkitURL
          if (URL && URL.createObjectURL) {
            newFile.blob = URL.createObjectURL(newFile.file)
          }

          // Thumbnails
          // 缩略图
          newFile.thumb = ''
          if (newFile.blob && newFile.type.substr(0, 6) === 'image/') {
            newFile.thumb = newFile.blob
          }
        }
      },

      // add, update, remove File Event
      inputFile(newFile, oldFile) {
        if (newFile && oldFile) {
          // update

          if (newFile.active && !oldFile.active) {
            // beforeSend

            // min size
            if (newFile.size >= 0 && this.minSize > 0 && newFile.size < this.minSize) {
              this.$refs.upload.update(newFile, { error: 'size' })
            }
          }

          if (newFile.progress !== oldFile.progress) {
            // progress
          }

          if (newFile.error && !oldFile.error) {
            // error
          }

          // success
          if (newFile.success && !oldFile.success) {
            if (newFile.response.success) {

              // 获得响应数据
              if (newFile.response.data) {
                this.$emit('on-success', newFile, this.$refs.upload.uploaded)
              } else {
                this.$emit('on-success', newFile, this.$refs.upload.uploaded)
              }

            } else {

              this.$message({
                type: 'error',
                message: newFile.response.msg || '上传失败',
                showClose: true
              })
              this.$refs.upload.active = false

              this.files.forEach(file => {
                this.$refs.upload.update(file, {active: false})
                this.$refs.upload.update(file, {success: false})
              })

            }

          }
        }


        if (!newFile && oldFile) {
          // remove
          if (oldFile.success && oldFile.response.id) {
            // $.ajax({
            //   type: 'DELETE',
            //   url: '/upload/delete?id=' + oldFile.response.id,
            // })
          }
        }


        // Automatically activate upload
        if (Boolean(newFile) !== Boolean(oldFile) || oldFile.error !== newFile.error) {
          if (this.uploadAuto && !this.$refs.upload.active) {
            this.$refs.upload.active = true
          }
        }
      },


      alert(message) {
        alert(message)
      },


      onEditFileShow(file) {
        this.editFile = { ...file, show: true }
        this.$refs.upload.update(file, { error: 'edit' })
      },

      onEditorFile() {
        if (!this.$refs.upload.features.html5) {
          this.alert('Your browser does not support')
          this.editFile.show = false
          return
        }

        let data = {
          name: this.editFile.name,
        }

        if (this.editFile.cropper) {
          let binStr = atob(this.editFile.cropper.getCroppedCanvas().toDataURL(this.editFile.type).split(',')[1])
          let arr = new Uint8Array(binStr.length)
          for (let i = 0; i < binStr.length; i++) {
            arr[i] = binStr.charCodeAt(i)
          }
          data.file = new File([arr], data.name, { type: this.editFile.type })
          data.size = data.file.size
        }
        this.$refs.upload.update(this.editFile.id, data)
        this.editFile.error = ''
        this.editFile.show = false
      },

      // add folader
      onAddFolader() {
        if (!this.$refs.upload.features.directory) {
          this.alert('Your browser does not support')
          return
        }

        let input = this.$refs.upload.$el.querySelector('input')
        input.directory = true
        input.webkitdirectory = true
        this.directory = true

        input.onclick = null
        input.click()
        input.onclick = (e) => {
          this.directory = false
          input.directory = false
          input.webkitdirectory = false
        }
      },

      onAddData() {
        this.addData.show = false
        if (!this.$refs.upload.features.html5) {
          this.alert('Your browser does not support')
          return
        }

        let file = new window.File([this.addData.content], this.addData.name, {
          type: this.addData.type,
        })
        this.$refs.upload.add(file)
      },

      clearFiles () {
        this.files = []
      }
    },

    filters: {
      formatSize (size) {
        if (size > 1024 * 1024 * 1024 * 1024) {
          return (size / 1024 / 1024 / 1024 / 1024).toFixed(2) + ' TB'
        } else if (size > 1024 * 1024 * 1024) {
          return (size / 1024 / 1024 / 1024).toFixed(2) + ' GB'
        } else if (size > 1024 * 1024) {
          return (size / 1024 / 1024).toFixed(2) + ' MB'
        } else if (size > 1024) {
          return (size / 1024).toFixed(2) + ' KB'
        }
        return size.toString() + ' B'
      }
    }
  }
</script>

<style lang="scss">
  @import "cropper.css";
  .example-full {
    background-color: #fff;
  }

  .example-full .btn-group .dropdown-menu {
    display: block;
    visibility: hidden;
    transition: all .2s
  }
  .example-full .btn-group:hover > .dropdown-menu {
    visibility: visible;
  }

  .example-full label.dropdown-item {
    margin-bottom: 0;
  }

  .example-full .btn-group .dropdown-toggle {
    margin-right: .6rem
  }

  .example-full .btn-group {
    margin-top: 0;
  }

  .example-full .filename {
    margin-bottom: .3rem
  }

  .example-full .btn-is-option {
    margin-top: 0.25rem;
  }
  .example-full .example-foorer {
    height: 58px;
    display: flex;
    padding: .5rem 0;
    border-top: 1px solid #e9ecef;
    border-bottom: 1px solid #e9ecef;
  }

  .example-full .edit-image {
    height: 500px;
  }

  .example-full .edit-image img {
    max-width: 100%;
  }

  .example-full .edit-image-tool {
    margin-top: .6rem;
  }

  .example-full .edit-image-tool .btn-group{
    font-size: 0;
    margin-right: .6rem;
  }

  .example-full .footer-status {
    padding-top: .4rem;
  }

  .example-full .drop-active {
    top: 0;
    bottom: 0;
    right: 0;
    left: 0;
    position: fixed;
    z-index: 9999;
    opacity: .6;
    text-align: center;
    background: #000;
  }

  .example-full .drop-active h3 {
    margin: -.5em 0 0;
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
    font-size: 40px;
    color: #fff;
    padding: 0;
  }

  .example-full .form-footer {
    display: -ms-flexbox;
    display: flex;
    -ms-flex-align: center;
    align-items: center;
    -ms-flex-pack: end;
    justify-content: flex-end;
    padding-top: 15px;
    border-top: 1px solid #e9ecef;

    &>:not(:first-child) {
      margin-left: .25rem;
    }

    &>:not(:last-child) {
      margin-right: .25rem;
    }
  }

  .example-full, .file-upload-edit-wrap{
    .table {
      width: 100%;
      max-width: 100%;
      margin-bottom: 1rem;
      background-color: transparent;
    }

    .table thead th {
      vertical-align: bottom;
      border-bottom: 2px solid #e9ecef;
      border-top: 1px solid #e9ecef;
      font-size: 16px;
      color: #212529;
      font-weight: 600;
      text-align: left;
    }

    .table td, .table th {
      padding: .75rem;
      vertical-align: top;
      border-top: 1px solid #e9ecef;
    }

    .table-hover {
      tbody tr:hover {
        background-color: #e9ecef;
      }
    }

    .upload-dragger {
      padding: 40px;
      h4 {
        font-size: 1.4rem;
        font-weight: 600;
        line-height: 1.5;
      }

      label {

      }
    }

    .btn {
      display: inline-block;
      font-weight: 400;
      text-align: center;
      white-space: nowrap;
      vertical-align: middle;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none;
      border: 1px solid transparent;
      padding: .5rem .75rem;
      font-size: 1rem;
      line-height: 1.25;
      border-radius: .25rem;
      transition: all .15s ease-in-out;
      cursor: pointer;
    }

    .btn-primary {
      color: #fff;
      background-color: #007bff;
      border-color: #007bff;

      &:hover {
        background-color: #0061FF;
      }
    }

    .btn-secondary {
      color: #fff;
      background-color: #868e96;
      border-color: #868e96;

      &:hover {
        background-color: #606266;
        border-color: #606266;
      }
    }

    .btn-group, .btn-group-vertical {
      position: relative;
      display: -ms-inline-flexbox;
      display: inline-flex;
      vertical-align: middle;
    }

    .btn-group, .btn-group-vertical {
      position: relative;
      display: -ms-inline-flexbox;
      display: inline-flex;
      vertical-align: middle;
    }

    .btn-group>.btn:first-child:not(:last-child):not(.dropdown-toggle) {
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
    }

    .btn-group>.btn:last-child:not(:first-child), .btn-group>.dropdown-toggle:not(:first-child) {
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
    }

    .btn-group>.btn:first-child {
      margin-left: 0;
    }

    .btn-group-vertical>.btn, .btn-group>.btn {
      position: relative;
      -ms-flex: 0 1 auto;
      flex: 0 1 auto;
      margin-bottom: 0;
    }

    .btn-group>.btn:first-child {
      margin-left: 0;
    }

    .btn-group-sm>.btn, .btn-sm {
      padding: .25rem .5rem;
      font-size: .875rem;
      line-height: 1.5;
      border-radius: .2rem;
    }

    .dropdown-menu {
      position: absolute;
      top: 100%;
      left: 0;
      z-index: 1000;
      display: none;
      float: left;
      min-width: 10rem;
      padding: .5rem 0;
      margin: .125rem 0 0;
      font-size: 1rem;
      color: #212529;
      text-align: left;
      list-style: none;
      background-color: #fff;
      background-clip: padding-box;
      border: 1px solid rgba(0,0,0,.15);
      border-radius: .25rem;
      transition: all .15s ease-in-out;


      .dropdown-item {
        display: block;
        width: 100%;
        padding: .25rem 1.5rem;
        line-height: 1.5;
        clear: both;
        font-weight: 400;
        color: #212529;
        text-align: inherit;
        white-space: nowrap;
        background: 0 0;
        border: 0;
        &:hover {
          color: #000;
          text-decoration: none;
          background-color: #EDEDEF;
        }
      }

      .dropdown-item.disabled, .dropdown-item:disabled {
        color: #868e96;
        background-color: transparent;
      }
    }

    .progress {
      display: -ms-flexbox;
      display: flex;
      overflow: hidden;
      font-size: .75rem;
      line-height: 1rem;
      text-align: center;
      background-color: #e9ecef;
      border-radius: .25rem;
    }

    .progress-bar-striped {
      background-image: linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);
      background-size: 1rem 1rem;
    }

    .progress-bar {
      height: 1rem;
      line-height: 1rem;
      color: #fff;
      background-color: #007bff;
      transition: width .6s ease;
    }
    @keyframes progress-bar-stripes {
      from { background-position: 1rem 0; }
      to { background-position: 0 0; }
    }

    .progress-bar-striped {
      background-image: linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);
      background-size: 1rem 1rem;
    }

    .progress-bar-animated{
      animation:progress-bar-stripes 1s linear infinite
    }

    code {
      padding: .2rem .4rem;
      font-size: 90%;
      color: #bd4147;
      background-color: #f8f9fa;
      border-radius: .25rem;
    }

    code, kbd, pre, samp {
      font-family: Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace;
    }

    .form-group {
      margin-bottom: 1rem;
    }

    .bg-danger {
      background-color: #dc3545!important;
    }

    .font-weight {
      font-weight: 600;
    }

    .dropdown-divider {
      height: 0;
      margin: .5rem 0;
      overflow: hidden;
      border-top: 1px solid #e9ecef;
    }
  }

</style>
