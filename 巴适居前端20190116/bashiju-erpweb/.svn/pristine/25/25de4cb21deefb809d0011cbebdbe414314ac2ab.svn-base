<template>
  <div class="page-content">
    <div class="page-content-hd">
      <div class="query-form" ref="query-form">
        <el-form size="small" :inline="true" :model="queryForm" ref="queryForm" class="demo-form-inline">
          <!--<el-form-item label="任务编号" prop="jobName">-->
            <!--<el-input v-model="queryForm.jobName"></el-input>-->
          <!--</el-form-item>-->
          <!--<el-form-item>-->
            <!--<el-button type="primary" @click.native.prevent="_loadData(true)" :loading="queryBtnLoading">查询</el-button>-->
            <!--<el-button @click="resetForm('queryForm')">重置</el-button>-->
          <!--</el-form-item>-->

          <el-form-item>
            <el-button v-hasOnlyBtn="'addBtn'" type="primary" @click="handleAdd">新增</el-button>
          </el-form-item>
        </el-form>
      </div>
    </div>

    <div class="page-content-bd" v-loading="loadingView">
      <el-table
        :data="tableData"
        border
        tooltip-effect="light"
        align="center"
        style="width: 100%"
        size="mini"
      >

        <el-table-column
          prop="jobName"
          show-overflow-tooltip
          align="left"
          label="任务名称">
        </el-table-column>

        <el-table-column
          prop="status"
          show-overflow-tooltip
          align="left"
          label="状态">
          <template slot-scope="scope">
            {{scope.row.status === 1 ? '运行中' : '已停止'}}
          </template>
        </el-table-column>

        <el-table-column
          prop="cronExpression"
          align="left"
          show-overflow-tooltip
          label="表达式">
        </el-table-column>

        <el-table-column
          prop="JobDescription"
          align="left"
          show-overflow-tooltip
          label="任务描述">
        </el-table-column>

        <el-table-column
          prop="jobGroup"
          align="left"
          show-overflow-tooltip
          label="任务组">
        </el-table-column>

        <el-table-column
          prop="routingKey"
          align="left"
          show-overflow-tooltip
          label="路由">
        </el-table-column>

        <el-table-column
          prop="targetParam"
          align="left"
          show-overflow-tooltip
          label="参数">
        </el-table-column>

        <el-table-column
          align="center"
          label="操作"
        >
          <template slot-scope="scope">
            <el-button v-hasMultipleBtn="['startBtn',scope.row]" @click="startOrStopJobConf(scope.row,'启用')" type="text" size="small" v-if="scope.row.status===0">启用</el-button>
            <el-button v-hasMultipleBtn="['stopBtn',scope.row]" @click="startOrStopJobConf(scope.row, '停用')" type="text" size="small" v-if="scope.row.status === 1">停用</el-button>
            <el-button v-hasMultipleBtn="['editBtn',scope.row]" @click="handleEdit(scope.row,'editForm')" type="text" size="small">编辑</el-button>
            <el-button v-hasMultipleBtn="['delBtn',scope.row]" @click="handleDelete(scope.row)" type="text" size="small">删除</el-button>
          </template>
        </el-table-column>

      </el-table>
      <!--分页控件-->
      <b-pagination
        :listQuery="listQuery"
        @handleSizeChange="handleSizeChange"
        @handleCurrentChange="handleCurrentChange">
      </b-pagination>
    </div>

    <!--编辑数据弹框-->
    <b-dialog
      title="定时任务编辑"
      :show.sync="editDialogVisible"
      :close-on-click-modal="false"
      top="30vh"
      width="400px">

      <el-form :model="editForm" :rules="rules" ref="editForm" label-width="100px" size="small">
        <el-form-item label="任务编号" prop="jobName">
          <el-input v-model="editForm.jobName" type="number"></el-input>
        </el-form-item>

        <el-form-item label="表达式" prop="cronExpression">
          <el-input v-model="editForm.cronExpression"></el-input>
        </el-form-item>

        <el-form-item label="任务描述" prop="JobDescription">
          <el-input v-model="editForm.JobDescription"></el-input>
        </el-form-item>

        <el-form-item label="任务组" prop="jobGroup">
          <el-input v-model="editForm.jobGroup"></el-input>
        </el-form-item>

        <el-form-item label="路由" prop="routingKey">
          <el-input v-model="editForm.routingKey"></el-input>
        </el-form-item>

        <el-form-item label="参数" prop="targetParam">
          <el-input v-model="editForm.targetParam"></el-input>
        </el-form-item>

        <div class="btn-group">
          <el-button type="primary" @click="handleSubmit" :loading="loadingBtn" size="small">保存</el-button>
          <el-button @click="handleCancel" size="small">取消</el-button>
        </div>
      </el-form>
    </b-dialog>
  </div>
</template>

<script>
  import PageList from '@/mixins/pageList'
  import * as RequestURL from '@/request/manage/jobmanage'

  export default {
    name: 'jobManage',
    mixins: [PageList],
    data () {
      return {
        queryForm: {
          // jobName: ''
        },
        editForm: {
          id: '',
          jobName: '',
          cronExpression: '',
          JobDescription: '',
          jobGroup: '',
          routingKey: '',
          targetParam: ''
        },
        loadingView: false,
        editDialogVisible: false,
        queryBtnLoading: false,
        tableData: [],
        loadingBtn: false,
        rules: {
          jobName: [
            {required: true, message: '该项为必填', trigger: 'blur'},
          ],
          cronExpression: [
            {required: true, message: '该项为必填', trigger: 'blur'},
          ],
          JobDescription: [
            {required: true, message: '该项为必填', trigger: 'blur'},
          ],
          jobGroup: [
            {required: true, message: '该项为必填', trigger: 'blur'},
          ],
          routingKey: [
            {required: true, message: '该项为必填', trigger: 'blur'},
          ],
          targetParam: [
            {required: true, message: '该项为必填', trigger: 'blur'},
          ]
        }
      }
    },
    methods: {
      // 启用或停止定时任务
      startOrStopJobConf(row,title){
        this.$confirm(`确定【${title}】吗？`,'提示',{
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning'
        }).then(()=>{
          RequestURL.startOrStopJobConf({id: row.id,status: row.status}).then(res=>{
            if(res.success){
              this.$message({
                type: 'success',
                message: res.msg,
              })
              if(row.status === '0'){
                row.status = '1'
              }else if(row.status === '1'){
                row.status = '0'
              }
            }else{
              this.$message({
                type: 'error',
                message: res.msg,
              })
            }
          }).catch(err=>{
            console.log(err)
          })
        })
      },

      // 添加操作
      handleAdd () {
        this.$nextTick(()=>{
          this.resetForm('editForm')
          this.setForm(this.editForm,'')
          this.editDialogVisible = true
        })
      },

      // 编辑操作
      handleEdit (row,formName) {
        this.resetForm(formName)
        this.editDialogVisible = true
        this.$nextTick(() => {
          this.setForm(this.editForm,row)
        })
      },

      //取消操作
      handleCancel () {
        this.editDialogVisible = false
      },

      //确认提交数据
      handleSubmit () {
        this.saveOrUpdateJobInfo()
      },

      // 修改时设置界面数据
      setForm: function (formName,data) {
        this.resetForm(formName)
        for (let i in this.editForm) {
          this.editForm[i] = data[i]
        }
      },

      //重置界面数据
      resetForm (formName) {
        this.$refs[formName] && this.$refs[formName].resetFields()
      },

      // 查询页面列表数据
      _loadData(btnQuery){
        if(btnQuery){
          this.queryBtnLoading = btnQuery
        }
        this.loadingView = true
        let params = Object.assign({}, this.queryForm, {
          page: this.listQuery.page,
          limit: this.listQuery.limit
        })
        RequestURL.queryJobConfigPageList(params).then((res) => {
          this.tableData = res.data
          this.listQuery.total = res.count
          this.queryBtnLoading = false
          this.loadingView = false
        }).catch(err => {
          console.log(err)
          this.loadingView = false
          this.queryBtnLoading = false
        })
      },

      // 保存或更新定时任务信息
      saveOrUpdateJobInfo: function(){
        this.$refs['editForm'].validate((valid) => {
          if (valid) {
            let params = {...this.editForm}
            this.$confirm('确认保存数据吗？', '提示', {
              confirmButtonText: '确定',
              cancelButtonText: '取消',
              type: 'warning'
            }).then(() => {
              this.loadingBtn = true
              let cfg = {
                headers: {
                  'Content-Type': 'application/json;charset=UTF-8;'
                }
              }
              RequestURL.saveJobConfig(params,cfg).then(res => {
                if (res.success) {
                  this.$message({
                    type: 'success',
                    message: res.msg,
                  })
                  this.editDialogVisible = false
                  this.loadingBtn = false
                  this._loadData(false)
                } else {
                  this.$message({
                    type: 'warning',
                    message: res.msg
                  })
                  this.editDialogVisible = false
                  this.loadingBtn = false
                }
              }).catch(() => {
                this.editDialogVisible = false
                this.loadingBtn = false
              })
            })
            //   .catch(() => {
            //   this.$message({
            //     type: 'info',
            //     message: '取消!'
            //   })
            // })
          }
        })
      },
      // 删除职位信息
      handleDelete (row) {
        this.$confirm('确定删除该数据?', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning'
        }).then(() => {
          const param = {id: row.id}
          RequestURL.delJobConfig(param).then(res => {
            if (res.success) {
              this.$message({
                type: 'success',
                message: res.msg
              })
              this._loadData(false)
            } else {
              this.$message({
                type: 'warning',
                message: res.msg
              })
            }
          }).catch((err) => {
            this.$message({
              type: 'error',
              message: '删除异常!'
            })
          })
        })
        //   .catch(() => {
        //   this.$message({
        //     type: 'info',
        //     message: '已取消操作!'
        //   })
        // })
      }
    }
  }
</script>

<style lang="scss" scoped>
</style>
