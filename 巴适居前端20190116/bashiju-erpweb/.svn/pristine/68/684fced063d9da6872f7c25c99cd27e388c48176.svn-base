<template>
  <div class="page-content">
    <div class="page-content-hd">
      <div>
        <el-form size="small" :inline="true" :model="form" ref="form"  class="demo-form-inline">

          <el-form-item  prop="taskName">
            <el-input v-model="form.taskName" placeholder="任务名称"></el-input>
          </el-form-item>

          <el-form-item>
            <el-button type="primary" @click.native.prevent="_loadData(true)" :loading="queryBtnLoading">查询</el-button>
            <el-button @click.native.prevent="_resetForm('form')">清空</el-button>
            <el-button v-hasOnlyBtn="'addBtn'"  @click.native.prevent="handleAdd">新增</el-button>
          </el-form-item>
        </el-form>
      </div>
    </div>
    <div class="page-content-bd" v-loading="loadingView">
      <el-table
        :data="tableData"
        border
        tooltip-effect="light"
        align="center"
        style="width: 100%"
      >

        <el-table-column
          prop="name"
          align="left"
          label="名称">
        </el-table-column>


        <el-table-column
          prop="beginTime"
          align="left"
          :formatter="timeFormat"
          label="任务开始时间"
        >
        </el-table-column>


        <el-table-column
          prop="endTime"
          align="left"
          :formatter="timeFormat"
          label="任务结束时间">
        </el-table-column>


        <el-table-column
          align="center"
          label="操作"
        >
          <template slot-scope="scope">
            <el-button   @click="handleDistribution(scope.row)" type="text" size="small">任务分配</el-button>
            <el-button   @click="handleDetail(scope.row)" type="text" size="small">任务详情</el-button>
            <el-button   @click="handleEditor(scope.row)" type="text" size="small"  icon="el-icon-edit" ></el-button>
            <el-button   @click="handleDelete(scope.row)" type="text" size="small" icon="el-icon-delete"></el-button>
          </template>
        </el-table-column>

      </el-table>
      <!--分页控件-->
      <b-pagination
        :listQuery="listQuery"
        @handleSizeChange="handleSizeChange"
        @handleCurrentChange="handleCurrentChange">
      </b-pagination>
    </div>
    <!--编辑窗体-->
    <template>
      <el-dialog
        title="任务分配"
        :visible.sync="distributionDialogVisible"
        width="600px">
        <!--<editor @handleClick="handleEditDialog" v-if="hackReset" :data="currentRowData" :isAdd="isAdd"></editor>-->
      </el-dialog>

      <el-dialog
        title="修改任务"
        :visible.sync="updateDialogVisible"
        width="800px">
        <Edit @handleClick="closeUpdDialog" v-if="hackReset" :data="currentRowData"></Edit>
      </el-dialog>
    </template>

  </div>
</template>
<style></style>
<script>
  import PageList from '@/mixins/pageList'
  import {queryTask,delTask} from "@/request/office/taskManage";
  import Edit from './component/edit'

  export default {
      components:{Edit},
      mixins: [PageList],
      name:'taskManage',
        data() {
            return {
                form: {
                  taskName:'',//任务名称
                },
              hackReset:false,
              currentRowData:null,
              tableData:[],
              distributionDialogVisible:false,
              updateDialogVisible:false,
              listQuery:{limit:10, page:1, total:0},
              queryBtnLoading:false,
              loadingView:false
            }
        },
        methods: {
          /**
           * 分配
           * @param row 行数据
           */
          handleDistribution(row){

          },
          /**
           * 详情
           * @param row  行数据
           */
          handleDetail(row){

          },
          /**
           * 修改
           * @param row  行数据
           */
          handleEditor(row){
            alert(0)
              this.hackReset = false
              this.$nextTick(() =>{
                this.hackReset = true
                this.currentRowData  = row
                this.updateDialogVisible = false
              })
          },
          /**
           * 删除
           * @param row  行数据
           */
          handleDelete(row){
            delTask(row.id).then(res=>{
                if(res.success){
                  this.$message({type:'success',message:res.msg})
                }else{
                  this.$message({type:'warning',message:res.msg})
                }
            }).catch(error =>{
                console.log(error)
            })
          },
          /**
           * 清空输入框
           * @param form 输入框名称
           * @private
           */
          _resetForm(form){
            this.$refs[form].resetFields()
          },
          /**
           * 时间戳格式化
           * @param row
           * @param column
           * @param cellValue
           * @returns {*}
           */
          timeFormat(row,column,cellValue){
            return this.$utils.timeFormat(cellValue)
          },
          closeUpdDialog(){
            this.updateDialogVisible = false
          },
          _loadData(btn){
            this._queryTask(btn)
          },
          _queryTask(btn){
            if(btn){
              this.queryBtnLoading = btn
              this.listQuery.page = 1
              this.listQuery.currentPage = 1
            }
              this.loadingView = true
              this.queryBtnLoading = true
            let params = Object.assign({},this.form,{
                limit:this.listQuery.limit,
                page:this.listQuery.page
              })
            queryTask(params).then(res =>{
                this.tableData = res.data
                this.listQuery.total = res.count
                this.loadingView = false
                this.queryBtnLoading = false
            }).catch(error =>{
                this.loadingView = false
                this.queryBtnLoading = false
                console.log(error)
            })
          }

        },
        mounted() {

        }

    }

</script>
