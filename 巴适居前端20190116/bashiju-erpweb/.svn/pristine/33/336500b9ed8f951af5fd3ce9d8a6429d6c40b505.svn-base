// 接口公共配置
import axios from 'axios'
import qs from 'qs'
import {Message} from 'element-ui'

import {getUrlParam} from '../common/js/utils'

let BASE_URL = ''

const isProduction = Object.is(process.env.NODE_ENV, 'production')

const msg = (type, msg, duration) => {
  Message({
    showClose: true,
    message: msg,
    type: type,
    duration: duration || 2000
  })
}

const ERR_OK = 0

if (isProduction) {
  BASE_URL = 'https://erp.bashiju.com/'
} else {
  BASE_URL = '/api/'
}

const request = axios.create({
  timeout: 10000, // 请求超时时间
  headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'}
})

// 添加请求拦截器
request.interceptors.request.use(
  config => {
    const menuId = getUrlParam('menu_id')
    let url = config.url
    if (menuId) {
      if (config.method === 'get' && config.params === Object) {
        config.params['menu_id'] = menuId
      } else if (config.method === 'post') {
        // if (url.indexOf('menu_id') === -1) config.url = url + '?menu_id=' + menuId

      }
    }

    return config
  },
  err => {
    return Promise.reject(err)
  }
)

// 添加响应拦截器
/**
 * 通过response自定义code来标示请求状态，当code返回如下进行过滤请求状态
 * 如通过xmlhttprequest 状态码标识 逻辑可写在下面error中
 */
request.interceptors.response.use(
  response => {
    const res = response.data
    const code = response.data.code
    const success = response.data.success

    if (code && code !== ERR_OK) {
      return Promise.reject(response)
    }

    if (success !== undefined && !success) {
      return Promise.reject(response)
    }

    return Promise.resolve(response)
  },
  error => { // 这里是返回状态码不为200时候的错误处理
    console.log(error)

    if (error && error.response) {
      switch (error.response.status) {
        case 400:
          msg('error', '请求错误')
          break
        case 401:
          msg('error', '未授权，请登录')
          break
        case 403:
          msg('error', '拒绝访问')
          break
        case 404:
          msg('error', `请求地址出错: ${error.response.config.url}`)
          break
        case 408:
          msg('error', '请求超时')
          break
        case 500:
          msg('error', '服务器内部错误')
          break
        case 502:
          msg('error', '网关错误')
          break
        case 503:
          msg('error', '服务不可用')
          break
        case 504:
          msg('error', '网关超时')
          break
        case 505:
          msg('error', 'HTTP版本不受支持')
          break
      }

      return Promise.reject(error)

    } else {

      msg('error', error.data.msg || '请求出错!')

      return Promise.reject(error)
    }

  }
)

const onPost = (url, params, config) => {
  let _params = params || {}
  let _config = config || {}

  if (!config) {
    _params = qs.stringify(_params)
  }

  return new Promise((resolve, reject) => {
    request.post(BASE_URL + url, _params, _config).then((response) => {
      resolve(response.data)
    }).catch((error) => {
      console.log(error)
      reject(error)
    })

  })
}

const onGet = (url, params, config) => {
  let _params = params || {}
  let _config = config || {}

  let cfg = Object.assign({}, {params: _params}, _config)

  return new Promise((resolve, reject) => {
    request.get(BASE_URL + url, cfg).then(response => {
      resolve(response.data)
    }).catch((error) => {
      reject(error)
    })
  })
}

const FILE_UPLOAD_URL = BASE_URL + 'manage/community/uploadImage/'
const ARTICLEIMG_UPLOAD_URL = BASE_URL + 'manage/uploadImg'
const EDITORIMG_UPLOAD_URL = BASE_URL + 'manage/uploadEditorImg'
const LOOKHOUSEIMG_UPLOAD_URL = BASE_URL + 'customer/uploadImg'
const USERPOTO_UPLOAD_URL = BASE_URL + 'oa/uploadPoto'
export {onPost, onGet, BASE_URL, request, FILE_UPLOAD_URL, ARTICLEIMG_UPLOAD_URL,EDITORIMG_UPLOAD_URL,LOOKHOUSEIMG_UPLOAD_URL,USERPOTO_UPLOAD_URL}


