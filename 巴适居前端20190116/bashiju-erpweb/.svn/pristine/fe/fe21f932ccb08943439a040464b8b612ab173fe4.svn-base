<template>
  <div>
    <div id="community" class="page-content" style="height: 600px;"></div>
    <div align="center">
      <el-button type="primary" @click="updateCommunityPoint" size="small" :loading="saveLoadingBtn">保存</el-button>
      <el-button @click="handleCancel" size="small">取消</el-button>
    </div>
  </div>
</template>

<script>
  import { updateCommunityDetail } from '@/request/manage/community'
  import {systemQueryLog} from '@/request/log/systemPlatformLog'

  let longitude
  let latitude
  export default {
    name: "AdjustCommunityCoordinate",
    props:{
      data:{
        type: Object
      }
    },
    data(){
      return{
        saveLoadingBtn: false
      }
    },
    methods:{
      // 初始化地图
      initMap(){
        let marker
        // 创建地图实例
        let map = new BMap.Map('community')
        // 左上角，添加比例尺
        let top_left_control = new BMap.ScaleControl({anchor: BMAP_ANCHOR_TOP_LEFT})
        //左上角，添加默认缩放平移控件
        let top_left_navigation = new BMap.NavigationControl()
        //右上角，仅包含平移和缩放按钮
        let top_right_navigation = new BMap.NavigationControl({
          anchor: BMAP_ANCHOR_TOP_RIGHT,
          type: BMAP_NAVIGATION_CONTROL_SMALL
        })
        // 将地图工具放到地图的左上角、右上角
        map.addControl(top_left_control)
        map.addControl(top_left_navigation)
        map.addControl(top_right_navigation)
        //开启鼠标滚轮缩放
        map.enableScrollWheelZoom(true)

        if(this.data.longitude && this.data.latitude){
          // 创建点坐标
          let point = new BMap.Point(this.data.longitude, this.data.latitude)
          // 初始化地图，设置中心点坐标和地图级别
          map.centerAndZoom(point, 18)
          // 创建标记点
          marker = new BMap.Marker(point)
          // 添加点标记层
          map.addOverlay(marker)
          longitude = this.data.longitude
          latitude = this.data.latitude
        }else{
          // 初始化地图，设置中心点坐标和地图级别
          if(this.data.regionLongitude && this.data.regionLatitude){
            // 创建点坐标
            let point = new BMap.Point(this.data.regionLongitude, this.data.regionLatitude)
            // 初始化地图，设置中心点坐标和地图级别
            map.centerAndZoom(point, 18)
            // 创建标记点
            let marker = new BMap.Marker(point)
            // 添加点标记层
            map.addOverlay(marker)
          }else{
            // 创建点坐标
            let point = new BMap.Point(this.data.areaLongitude, this.data.areaLatitude)
            // 初始化地图，设置中心点坐标和地图级别
            map.centerAndZoom(point, 18)
            // 创建标记点
            let marker = new BMap.Marker(point)
            // 添加点标记层
            map.addOverlay(marker)
          }
        }


        // else{
        //   // 初始化地图，设置中心点坐标和地图级别
        //   map.centerAndZoom(this.data.areaName, 14)
        // }

        //单击获取点击的经纬度
        map.addEventListener("click",function(e){
          if(marker){
            map.removeOverlay(marker)
          }
          // 地图标记
          marker = new BMap.Marker(e.point)
          // 添加点覆盖物
          map.addOverlay(marker);
          longitude = e.point.lng
          latitude = e.point.lat
        })
      },

      // 更新行政区坐标信息
      updateCommunityPoint() {
        let params = {id: this.data.id ,longitude: longitude, latitude: latitude}
        this.$confirm('确定保存编辑的信息吗?', {
          confirmButtonText: '确定',
          cancelButtonText: '取消',
          type: 'warning'
        }).then(() => {
          this.saveLoadingBtn = true
          updateCommunityDetail({dataJson: JSON.stringify(params)}).then(res => {
            if (res.success) {
              this.$message({
                type: 'success',
                message: res.msg
              })
              this.$emit('handleClick', 4)
            } else {
              this.$message({
                type: 'warning',
                message: res.msg
              })
            }
            this.saveLoadingBtn = false

            let message = {sourceCode:this.data.name,sourceTypeId:'4',operatTypeId:'5'
              ,logContent: `调整小区坐标：经度=${longitude },纬度=${latitude}`}
            systemQueryLog({message: JSON.stringify(message)})
          }).catch((err) => {
            this.saveLoadingBtn = false
            console.log(err)
          })
        })
        //   .catch(() => {
        //   this.$message({
        //     type: 'info',
        //     message: '取消!'
        //   })
        // })
      },
      // 取消设置坐标信息
      handleCancel() {
        this.$emit('handleClick', 2)
      }
    },
    mounted () {
      this.initMap()
    },
    watch:{
      data:{
        deep: true,
        handler(){
          this.initMap()
        }
      }
    }
  }
</script>

<style scoped>
</style>
