<template>
  <div>

    <el-form size="small" v-loading="loadingView" :model="form" :rules="rules" ref="form" label-width="130px">

      <el-form-item label="公私客" required class="margin-b-none">

        <el-col :span="11">
          <el-form-item prop="discStatusId"  >
            <el-select clearable v-model="form.discStatusId" disabled placeholder="盘状态">
              <el-option label="公客" value="2"></el-option>
              <el-option label="私客" value="1"></el-option>
            </el-select>
          </el-form-item>
        </el-col>


          <el-col :span="11">
            <el-form-item prop="discStatusId">
              <a href="wwww.baidu.com" >我的私客</a>
            </el-form-item>
          </el-col>
        </el-form-item>




      <el-form-item label="是否发送绑定码" prop="isSendBindCode">

        <el-switch
          v-model="form.isSendBindCode">
        </el-switch>

      </el-form-item>

      <el-form-item label="姓名" required class="margin-b-none">
        <el-col :span="11">
          <el-form-item prop="custName">
            <el-input v-model="form.custName"></el-input>
          </el-form-item>
        </el-col>
        <el-col style="text-align: center" :span="2">-</el-col>
        <el-col :span="11">
          <el-form-item prop="relateTypeId">
            <el-select clearable v-model="form.relateTypeId" >
              <el-option v-for="item in genderOpts" :label="item.label" :value="item.value" :key="item.value"></el-option>
            </el-select>
          </el-form-item>
        </el-col>
      </el-form-item>

      <el-form-item label="电话" required class="margin-b-none">
        <el-col :span="11">
          <el-form-item prop="phone">
            <el-input v-model="form.phone"></el-input>
          </el-form-item>
        </el-col>
        <el-col style="text-align: center" :span="2">-</el-col>
        <el-col :span="11">
          <el-form-item prop="relateType">
            <el-select clearable v-model="form.relateType" placeholder="电话">
              <el-option v-for="item in relateTypeOpts" :label="item.label" :value="item.value" :key="item.value"></el-option>
            </el-select>
          </el-form-item>
        </el-col>
      </el-form-item>

      <p class="msg">* 固话与区号间请用"-"分隔，例如:022-8888888</p>

      <el-form-item class="margin-b-none">
        <el-button type="primary" :loading="loadingSubmitBtn" @click="handleNext">下一步</el-button>
        <el-button @click="handleCancel">取消</el-button>
      </el-form-item>

    </el-form>


    <!-- 房源基本信息编辑 -->

    <!-- 住宅 -->
    <el-dialog
      title="新增住宅"
      :visible.sync="dialogVisibleHouse"
      width="1100px"
      :close-on-click-modal="false"
      :close-on-press-escape="false"
      append-to-body
    >
      <add-house-form @handleClick="handleAddHouseClick" v-if="hackReset" :formInfo="addHouseFormInfo" :isAdd="true" :type='formType'></add-house-form>
    </el-dialog>



    <el-dialog
      title="新增商铺"
      :visible.sync="shopsDialogVisible"
      width="1100px"
      :close-on-click-modal="false"
      :close-on-press-escape="false"
      append-to-body
    >
      <add-shops-form @handleClick="handleAddHouseClick" v-if="hackReset" :formInfo="addHouseFormInfo" :isAdd="true" :type='formType'></add-shops-form>
    </el-dialog>

    <el-dialog
      title="新增公寓"
      :visible.sync="apartmentDialogVisible"
      width="1100px"
      :close-on-click-modal="false"
      :close-on-press-escape="false"
      append-to-body
    >
      <add-apartmentForm @handleClick="handleAddHouseClick" v-if="hackReset" :formInfo="addHouseFormInfo" :isAdd="true" :type='formType'></add-apartmentForm>
    </el-dialog>

    <el-dialog
      title="新增仓库"
      :visible.sync="wareHouseDialogVisible"
      width="1100px"
      :close-on-click-modal="false"
      :close-on-press-escape="false"
      append-to-body
    >
      <add-ware-HouseForm @handleClick="handleAddHouseClick" v-if="hackReset" :formInfo="addHouseFormInfo" :isAdd="true" :type='formType'></add-ware-HouseForm>
    </el-dialog>

    <el-dialog
      title="新增厂房"
      :visible.sync="factoryDialogVisible"
      width="1100px"
      :close-on-click-modal="false"
      :close-on-press-escape="false"
      append-to-body
    >
      <add-factoryFrom @handleClick="handleAddHouseClick" v-if="hackReset" :formInfo="addHouseFormInfo" :isAdd="true" :type='formType'></add-factoryFrom>
    </el-dialog>


    <el-dialog
      title="新增车位"
      :visible.sync="parkingDialogVisible"
      width="1100px"
      :close-on-click-modal="false"
      :close-on-press-escape="false"
      append-to-body
    >
      <add-parking @handleClick="handleAddHouseClick" v-if="hackReset" :formInfo="addHouseFormInfo" :isAdd="true" :type='formType'></add-parking>
    </el-dialog>

    <el-dialog
      title="新增土地"
      :visible.sync="landDialogVisible"
      width="1100px"
      :close-on-click-modal="false"
      :close-on-press-escape="false"
      append-to-body
    >
      <add-land @handleClick="handleAddHouseClick" v-if="hackReset" :formInfo="addHouseFormInfo" :isAdd="true" :type='formType'></add-land>
    </el-dialog>

  </div>
</template>

<script>

  //沟通阶段
  const communicateStage = [
    {
      label: '非共有',
      value: '0'
    },
    {
      label: '共有',
      value: '1'
    }
  ]

  //客户来源
  const sourceType = [
    {
      label: '非共有',
      value: '0'
    },
    {
      label: '共有',
      value: '1'
    }
  ]
  //装修
  const decoration = [
    {
      label: '非共有',
      value: '0'
    },
    {
      label: '共有',
      value: '1'
    }
  ]



  import {saveHouseFollowAndRemind, queryCountHousing, queryBuildingInfo, addHouse} from '@/request/house/houseUsed'
  import {STATUS_OPTS, TRANSACTION_TYPE, FLOOR_DES_OPTS, GENDER_OPTS, RELATE_TYPE_OPTS} from './consts'
  import {queryCommunitySelectWithRegion} from '@/request/app'
  import CommunitySelector from '@/components/BaseCascader/index'
  import {addCustomer,queryCustomerRepeat} from "@/request/customer/customerUsed";
  import BuildingUnitComponent from '@/views/manage/system/community/components/BuildingUnitComponent' // 坐栋

  import addHouseForm from './formComp/house' // 房源form组件
  import addShopsForm from './formComp/shops' //商铺form组件
  import addApartmentForm from './formComp/apartment' //公寓form组件
  import addWareHouseForm from './formComp/wareHouse'//仓库form组件
  import addFactoryFrom from './formComp/factory' //工厂form组件
  import addParking from './formComp/parking'  //车位form组件
  import addLand from './formComp/land' //土地form组件
  export default {
    components: {CommunitySelector, addHouseForm, BuildingUnitComponent,addShopsForm,addApartmentForm,addWareHouseForm,addFactoryFrom,addParking,addLand},
    props: {
      param: { // 父组件传递过来的参数 房屋类型等
        type: Object,
        required: true
      }
    },
    data () {
      // 自定义电话验证
      var phone = (rule, value, callback) => {
        let reg = /^1[3|4|5|7|8][0-9]\d{8}$/
        if(!value){
          return callback(new Error('电话号码不能为空'))
        }
        if (reg.test(value)) {
          callback();
        }
        return callback(new Error('请输入正确的电话号码'));
      };
      return {
        statusOpts: STATUS_OPTS,
        transactionType: TRANSACTION_TYPE,
        genderOpts: GENDER_OPTS,
        relateTypeOpts: RELATE_TYPE_OPTS,
        loadingView: false,
        loadingSubmitBtn: false,
        selectDataProps: {id: 'code', parent: 'parentCode'}, // 级联数据源配置选项
        selectProps: { // 级联下拉组件配置选项
          value: 'code', // 指定选项的值为选项对象的某个属性值
          children: 'children', // 指定选项的子选项为选项对象的某个属性值
          label: 'name' // 指定选项标签为选项对象的某个属性值
        },
        form: {
          transactionTypeId: '1',
          // communityId: '',
          isSendBindCode: true,
          // statusId: '1',
          discStatusId: '1',
          phone: '',
          relateTypeId: '1',//联系人类型名称ID：1
          relateTypeName:'',//联系人类型名称 :先生
          custName:'',//客户名称
          relateType:'1',//电话类型

        },
        // 表单校验配置
        rules: {
          transactionTypeId: [
            {required: true, message: '该项为必填项', trigger: 'change'}
          ],
          custName: [
            {required: true, message: '该项为必填项', trigger: 'blur'},
          ],
          relateTypeId: [
            {required: true, message: '该项为必填项', trigger: 'blur'},
          ],
          phone: [
            // {required: true, message: '该项为必填项', trigger: 'blur'},
            { validator: phone, trigger: 'blur' }
          ],
        },
        hackReset:false,
        cascaderDataProps: {id: 'code', parent: 'parentCode'}, // 级联数据源配置选项
        cascaderProps: { // 级联下拉组件配置选项
          value: 'code', // 指定选项的值为选项对象的某个属性值
          label: 'name' // 指定选项标签为选项对象的某个属性值
        },
        areasUrl: queryCommunitySelectWithRegion,
        addHouseFormInfo: null,
        dialogVisibleHouse: false,
        dialogVisibleBuildingUnit: false,
        shopsDialogVisible:false,
        apartmentDialogVisible:false,
        wareHouseDialogVisible:false,
        factoryDialogVisible:false,
        parkingDialogVisible:false,
        landDialogVisible:false,
        currentBuildingData: null,
        hackResetBuilding: true,
        formType: ''
      }
    },
    methods: {

      handleNext () {
        this.$refs['form'].validate((valid) => {
          if (valid) {
            let param = {}
            param.transactionTypeId = this.form.transactionTypeId
            param.phone = this.form.phone
            //判断客源是否存在2018-11-19 15:30
            queryCustomerRepeat(param).then(res =>{
                if(res.success){
                  this.addHouseFormInfo = {
                    baseInfo: {
                      custName: this.form.custName,
                      relateTypeId: this.form.relateTypeId,
                      transactionTypeId: this.param.transactionTypeId
                    }
                  }
                  this.hackReset = true
                  // 跟进房源用途 弹出对应表单
                  switch (this.param.houseUsesId) {
                    case 'house': // 住宅
                      this.dialogVisibleHouse = true
                      break
                    case 'shops'://商铺
                      this.shopsDialogVisible = true
                      break
                    case 'apartment'://公寓
                      this.apartmentDialogVisible = true
                      break
                    case 'wareHouse'://仓库
                      this.wareHouseDialogVisible = true
                      break
                    case 'factory'://工厂
                      this.factoryDialogVisible = true
                      break
                    case 'parking'://车位
                      this.parkingDialogVisible = true
                      break
                    case 'land'://土地
                      this.landDialogVisible = true
                      break
                    default:
                      this.dialogVisibleHouse = true
                  }
                }
            }).catch((error)=>{
                console.log(error)
            })
          }
        })
      },


      _resetForm () {
        this.$refs['form'] && this.$refs['form'].resetFields()
      },

      handleCancel () {
        this.$emit('handleClick', 2)
      },

      handleAddHouseClick (action, _params) {
        if (action === 1) {
          // 合并参数
          this.form.relateName = this.relateTypeOpts.find(item => item.value === this.form.relateType).label //电话类型（配偶、朋友等）
          this.form.relateTypeName = this.genderOpts.find(item => item.value === this.form.relateTypeId).label //用户称呼（先生、女士、公司）
          let params = {..._params, ...this.form}
          if (params.discStatusId === '2') {
            params.discStatus = '公客'
          } else if (params.discStatusId === '1') {
            params.discStatus = '私客'
          }
          params.transactionTypeId = this.param.transactionTypeId    //交易类型Id
          let typeId = this.param.transactionTypeId
          typeId = '4' ?  params.transactionType = '求购' :  params.transactionType = '求租'
          params.formName = this.param.houseUsesId+'_customer' //表单名称
          // delete params.houseUsesId
          //是否发送绑定码
          params.isSendBindCode ? params.isSendBindCode = '1' : params.isSendBindCode = '0'
          delete params.room
          delete params.space
          delete params.price
          delete params.floorCount
          delete params.buildDates
          console.log(params)
          addCustomer({dataJson: JSON.stringify(params)}).then(res => {
            this.$message({
              type: 'success',
              message: res.msg || '操作成功'
            })
            this.dialogVisibleHouse = false
            this.shopsDialogVisible = false
            this.apartmentDialogVisible = false
            this.wareHouseDialogVisible = false
            this.factoryDialogVisible = false
            this.parkingDialogVisible = false
            this.landDialogVisible = false
            this.dialogVisibleHouse = false
            this.$emit('handleClick',1)
          }).catch(error =>{
               loadingView = false,
              loadingSubmitBtn = false
          })
        } else if(action == 2) {
          //取消
          this.hackReset = false
          this.$emit('handleClick', 1)
          this.dialogVisibleHouse = false
          this.shopsDialogVisible = false
          this.apartmentDialogVisible = false
          this.wareHouseDialogVisible = false
          this.factoryDialogVisible = false
          this.parkingDialogVisible = false
          this.landDialogVisible = false
          this.dialogVisibleHouse = false
        }else{
          //上一步，
          this.dialogVisibleHouse = false
          this.shopsDialogVisible = false
          this.apartmentDialogVisible = false
          this.wareHouseDialogVisible = false
          this.factoryDialogVisible = false
          this.parkingDialogVisible = false
          this.landDialogVisible = false
          this.dialogVisibleHouse = false
        }
      },
      _getOptName (value, opts) {
        let name = ''
        opts.forEach(item => {
          if (item.value === value){
            name = item.label
          }
        })
        return name
      }
    },
    mounted(){
    }
  }
</script>

<style scoped lang="scss">
  .msg {
    margin-bottom: 15px;
    color: red;
    font-size: 12px;
    text-align: center;
  }
</style>
