<template>


       <div class="page-content">

           <div class="page-content-hd">

               <el-form size="small" :inline="true" :model="form" ref="form">
                 <el-form-item  prop="templateName">
                   <el-input v-model="form.templateName" placeholder="模板名称"></el-input>
                 </el-form-item>

                 <el-form-item>
                   <el-button  @click.native.prevent="_loadData(false)" :loading="loadingBtn">查询</el-button>
                   <el-button type="primary"  @click.native.prevent="handleReset">清空</el-button>
                   <el-button  type="primary"   @click.native.prevent="handleAdd">新增</el-button>
                   <!--v-hasOnlyBtn="'addBtn'"-->
                 </el-form-item>
               </el-form>
           </div>

         <div class="page-content-bd" v-loading="loadingView">
               <el-table
                 :data="tableData"
                 border
                 align="center"
                 style="width: 100%">
                 <el-table-column
                   prop="areaName"
                   align="center"
                   label="区域名称">
                 </el-table-column>

                 <el-table-column
                   prop="templateName"
                   align="center"
                   label="解析模板名称">
                 </el-table-column>

                 <el-table-column
                   prop="regionName"
                   align="center"
                   label="片区名称">
                 </el-table-column>

                 <el-table-column
                   prop="transactionType"
                   align="center"
                   label="房源交易类型">
                 </el-table-column>

                 <el-table-column
                   prop="houseListUrl"
                   align="center"
                   label="采集地址"
                   show-overflow-tooltip
                 >
                 </el-table-column>

                 <el-table-column
                   align="center"
                   label="操作">
                   <template  slot-scope="scope">
                      <el-button v-hasMultipleBtn="['editBtn',scope.row]" @click="handleEditor(scope.row)" type="text" size="small">编辑</el-button>
                      <el-button v-hasMultipleBtn="['delBtn',scope.row]"  @click="handleDelete(scope.row)" type="text" size="small">删除</el-button>
                   </template>
                 </el-table-column>
              </el-table>

           <!--分页控件-->
           <b-pagination
             :listQuery="listQuery"
             @handleSizeChange="handleSizeChange"
             @handleCurrentChange="handleCurrentChange">
           </b-pagination>

         </div>
         <!--编辑窗口-->
         <template>
           <el-dialog
            title="编辑"
            :visible.sync="addressConfigDialogVisible"
            width="400px"
           >
             <address-config-editor :data="currentRowData" v-if="hackReset" :isAdd="isAdd" @handleClick="openOrCloseDialog"></address-config-editor>
           </el-dialog>
         </template>
       </div>
</template>
<style></style>
<script>
  import PageList from '@/mixins/pageList'
  import BaseSelect from '@/components/BaseSelect'
  import {queryCollectionAddressConfigData,deleteCollectionAddressConfigData}  from '@/request/manage/collectionAddressConfig'
  import {queryAllRegionList} from '@/request/manage/community'
  import CitySelector from '@/components/BaseCascader'
  import AddressConfigEditor from'./component/addressConfigEditor'
  import  *  as  RequestUrl from '@/request/log/systemPlatformLog'
    export default {
      name:'collectionAddressConfig',
      mixins:[PageList],
      components:{BaseSelect,CitySelector,AddressConfigEditor},
        data() {
            return {
              form:{

              },
              areaCodeOption:[],
              tableData:[],
              isAdd:false,
              currentRowData:null,
              hackReset:false,
              loadingBtn:false,
              addressConfigDialogVisible:false,
              cascaderDataProps: {id: 'code', parent: 'parentCode'}, // 级联数据源配置选项
              cascaderProps: { // 级联下拉组件配置选项
                value: 'code', // 指定选项的值为选项对象的某个属性值
                label: 'name' // 指定选项标签为选项对象的某个属性值
              },
              getUrl:'manage/commonselect/queryThirdLevelCitySelect',
              loadingView:false,
              listQuery:{
                page:1,
                limit:10,
                total:0
              }
            }
        },
        methods: {

          handleReset(){
              this.$refs['form'].resetFields()
          },
          _loadData(btn){
              this.queryCollectionAddressConfigData(btn)
          },
          queryCollectionAddressConfigData(btn){
            let param =Object.assign({},this.form,{
              page:this.listQuery.page,
              limit:this.listQuery.limit,
            })
            this.loadingBtn = btn
            this.loadingView = true
            queryCollectionAddressConfigData(param).then(res=>{
              this.tableData = res.data
              this.listQuery.total = res.count
              this.loadingView = false
              this.loadingBtn = false
            }).catch(error=>{
              console.log(error)
              this.loadingView = false
              this.loadingBtn = false
            })
          },
          //删除
          handleDelete(row){
            this.$confirm('确定要删除吗？',{
              confirmButtonText:'确定',
              cancelButtonText:'取消',
              type:'warning'
            }).then(()=>{
                  let params = {id:row.id}
                  deleteCollectionAddressConfigData(params).then(res =>{
                    if(res.success){
                      this.$message({type:'success',message:res.msg})
                      this.$message({type:'success',message:res.msg})
                      let message = {
                        sourceCode:  row.templateName,//资源编号：客源编号
                        sourceTypeId:13,//类型：采集模板配置
                        operatTypeId: 3,//操作类型 删除,
                        logContent: '删除'+row.templateName//日志内容
                      }
                      RequestUrl.systemDelLog({message:JSON.stringify(message)}).then(res=>{
                        console.log(res)
                      }).catch(error =>{
                        console.log(error)
                      })
                      this.queryCollectionAddressConfigData()
                    }else{
                      this.$message({type:'warning',message:res.msg})
                    }
                  }).catch(error =>{
                    console.log(error)
                  })
            }).catch(()=>{
              this.$message({type:'warning',message:'已取消'})
            })
          },
          //编辑
          handleEditor(row){
              this.hackReset = false
              this.$nextTick(()=>{
                this.hackReset = true
                this.currentRowData = row
                this.isAdd = false
                this.addressConfigDialogVisible = true
              })
          },
          handleAdd(){
            this.hackReset = false
              this.$nextTick(()=>{
                this.hackReset = true
                this.isAdd = true
                this.addressConfigDialogVisible = true
                this.currentRowData = null
              })
          },
          handleSelect(){
            this.queryCollectionAddressConfigData()
          },
          //窗体回调方法
          openOrCloseDialog(value){
            if(value && value == 1){
              this.addressConfigDialogVisible = false
              this.queryCollectionAddressConfigData()
            }else if(value && value == 2){
              this.addressConfigDialogVisible = false
            }
          },
          //查询片区
          queryAllRegionListByAreaCode(value,name){
            this.form.name = name
            queryAllRegionList({code:this.form.cityCode}).then(res =>{
              this.areaCodeOption = res.data
            })
          },
          //获取模板名称
          getTempletNames(){
            let params = {}
            getTempletNames(params).then(res=>{
              console.log(res)
              // this.templetOpt
            })
          },
          collectionAddressConfig(){
          }
        },
        mounted() {
          this.queryCollectionAddressConfigData()
        }

    }

</script>
