<template>
  <div class="page-content">
    <div class="page-content-hd">
      <div class="query-form" ref="query-form">
        <el-form size="small" :inline="true" :model="queryForm" class="demo-form-inline" ref="queryForm">
          <el-form-item label="公司名称" prop="companyId">
            <company-select v-model="queryForm.companyId" :url="companyUrl" @change="jurgeSelect"
              :changeOnSelect="false" :props="cascaderProps" :dataProps="cascaderDataProps"></company-select>
          </el-form-item>
          <el-form-item label="部门名称" prop="deptName">
            <el-input v-model="queryForm.deptName" placeholder="请输入内容"></el-input>
          </el-form-item>
          <el-form-item label="部门类型" prop="deptTypeId">
            <el-select style="width: 100%" v-model="queryForm.deptTypeId">
              <el-option value="">--请选择--</el-option>
              <el-option
                v-for="item in deptTypeOps"
                :key="item.id"
                :label="item.name"
                :value="item.id"
              >
              </el-option>
            </el-select>
          </el-form-item>
          <el-form-item>
            <el-button type="primary" @click.native.prevent="queryDeptListData(true)" :loading="queryBtnLoading">查询
            </el-button>
            <el-button @click.native.prevent="resetQuery">清空</el-button>
          </el-form-item>
          <el-form-item>
            <el-button v-hasOnlyBtn="'deptAdd'" type="primary" @click="handleAdd">新增</el-button>
          </el-form-item>
        </el-form>
      </div>

    </div>
    <div class="page-content-bd" v-loading="loadingView">
      <el-table :data="tableData" height="580" border align="center" size="mini">
        <el-table-column
          prop="id"
          width="120"
          align="center"
          label="部门编号">
        </el-table-column>

        <el-table-column
          prop="name" width="200"
          align="center"
          label="部门名称">
        </el-table-column>

        <el-table-column
          prop="companyName"
          width="300"
          align="center"
          label="公司名称">
        </el-table-column>

        <el-table-column
          prop="deptTypeName"
          align="center"
          label="部门类型">
        </el-table-column>

        <el-table-column
          prop="parentName"
          align="center"
          label="上级名称">
        </el-table-column>

        <el-table-column
          prop="sortNo"
          align="center"
          label="排序码">
        </el-table-column>

        <el-table-column
          prop="areaName"
          align="center"
          label="所在城市">
        </el-table-column>

        <el-table-column
          prop="leaderName"
          align="center"
          label="领导人">
        </el-table-column>
        <el-table-column align="center" label="操作" width="260px">
          <template slot-scope="scope">
            <el-button v-hasMultipleBtn="['deptEdit',scope.row]" @click="handleEdit(scope.row)" type="text" size="small">编辑</el-button>
            <el-button v-hasMultipleBtn="['deptDel',scope.row]" @click="handleDelete(scope.row)" type="text" size="small">删除</el-button>
            <el-button  @click="handleResponsibilityDisk(scope.row)" type="text" size="small">责任盘</el-button>
            <el-button v-hasMultipleBtn="['crossPermissionBtn',scope.row]" type="text" size="small" @click="handlePermission(scope.row)">共享权限</el-button>
          </template>
        </el-table-column>
      </el-table>
      <!--分页控件-->
      <b-pagination
        :listQuery="listQuery"
        @handleSizeChange="handleSizeChange"
        @handleCurrentChange="handleCurrentChange">
      </b-pagination>
    </div>

    <template>
      <el-dialog
        :title="isAdd?'新增部门':'编辑部门'"
        :visible.sync="editDeptDialogVisible"
        :close-on-click-modal="false"
        width="400px"
      >
        <dept-edit v-if="hackReset" @handleClick="handleEditDeptDialog" :data="currentRowData"
                   :isAdd="isAdd"></dept-edit>
      </el-dialog>

      <el-dialog
        top="10vh"
        title="共享权限设置"
        :close-on-click-modal="false"
        :visible.sync="permissionDialogVisible"
        width="800px">
        <dept-permission :deptId="currentRowData.id" @handleClick="handlePermissionDialog"></dept-permission>
      </el-dialog>

      <el-dialog
        top="10vh"
        title="责任盘设置"
        :close-on-click-modal="false"
        :visible.sync="discDialogVisible"
        width="600px">
        <Responsbility-Disk v-if="hackReset" :data="discRowDate" @handleClick="closeDialog"></Responsbility-Disk>
      </el-dialog>
    </template>
  </div>
</template>

<script>
import DeptEdit from './components/DeptEdit'
import DeptPermission from './components/Permission'
import BaseDeptCascader from '@/components/BaseCascader/dept'
import ResponsbilityDisk from './components/ResponsbilityDisk'//责任盘
import BaseCompanySelect from '@/components/BaseSelect/companySelect'
import BaseDeptTypeSelect from '@/components/BaseSelect/DeptTypeSelect'
import {
  queryCompanySelectData,
  queryDeptList,
  saveOrUpdateDept,
  delDepartment,
  queryDeptTypeFromEnum
} from '@/request/manage/deptmanage'

import CompanySelect from '@/components/BaseCascader'
import {manageAddLog,manageUpdateLog,manageQueryLog,manageDelLog} from '@/request/log/mangePlatformLog'

export default {
  name: 'deptManage',
  components: {DeptEdit, DeptPermission, BaseDeptCascader, BaseCompanySelect, BaseDeptTypeSelect,CompanySelect,
    ResponsbilityDisk},
  data () {
    return {
      loadingView: false,
      companyId: '',
      deptTypeId: '',
      tableData: [],
      companyUrl:'manage/commonselect/queryOpenCityCompany',
      cascaderDataProps: {id: 'code', parent: 'parentCode'}, // 级联数据源配置选项
      cascaderProps: { // 级联下拉组件配置选项
        value: 'code', // 指定选项的值为选项对象的某个属性值
        label: 'name' // 指定选项标签为选项对象的某个属性值
      },
      deptTypeOps: [],
      currentRowData: '',
      discRowDate:'',
      hackReset: true,
      hackPerReset: true,
      editDeptDialogVisible: false,
      permissionDialogVisible: false,
      queryBtnLoading: false,
      isAdd: false,
      discDialogVisible:false,
      treeData: [],
      treeProps: {
        children: 'children',
        label: 'label'
      },
      queryForm: {
        deptName: '',
        companyId: '',
        deptTypeId: ''
      },
      listQuery: {
        page: 1,
        limit: 10,
        total: 0
      }
    }
  },
  methods: {
    jurgeSelect(value,name,data){
      if (data.dataType !== 'company') {
        this.$message({
          showClose: true,
          type: 'warning',
          message: '只能选择公司!'
        })
        setTimeout(() => {
          this.queryForm.companyId = ''
        }, 50)
      }
    },
    // 页面改变
    handleSizeChange(val) {
      this.listQuery.limit = val
      this.queryDeptListData(false)
    },
    /**
     * 获取部门列表数据
     */
    queryDeptListData: function (isloding) {
      if(isloding){
        this.listQuery.page = 1
        this.listQuery.currentPage = 1
      }
      this.queryBtnLoading = isloding
      this.loadingView = true
      let params = Object.assign({}, this.queryForm, {
        page: this.listQuery.page,
        limit: this.listQuery.limit
      })
      queryDeptList(params).then((res) => {
        this.tableData = res.data
        this.listQuery.total = res.count
        this.queryBtnLoading = false
        this.loadingView = false
      }).catch(err => {
        console.log(err)
        this.loadingView = false
        this.queryBtnLoading = false
      })
    },
    // 当前页改变
    handleCurrentChange(val) {
      this.listQuery.page = val
      this.queryDeptListData(false)
    },
    /**
     * 新增部门
     */
    handleAdd() {
      this.hackReset = false
      this.$nextTick(() => {
        this.hackReset = true
        // 如果为新增则清空数据传递
        this.isAdd = true
        this.deptTypeId = ''
        this.companyId = ''
        // this.currentRowData = null
        this.editDeptDialogVisible = true
      })
    },
    /**
     * 修改部门
     */
    handleEdit (row) {
      this.hackReset = false
      this.$nextTick(() => {
        this.hackReset = true
        this.isAdd = false
        this.companyId = row.companyId
        this.deptTypeId = row.deptTypeId
        this.currentRowData = row
        this.editDeptDialogVisible = true
      })
    },
    /**
     * 删除部门
     */
    handleDelete (row) {
      this.$confirm('确定删除该部门？', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning'
      }).then(() => {

        const param = {deptId: row.id}
        delDepartment(param).then(res => {
          if (res.success) {
            this.$message({
              type: 'success',
              message: res.msg
            })
            this.queryDeptListData(false)
          }
          let message = {sourceCode:row.name,sourceTypeId:'2',operatTypeId:'3'
            ,logContent: `删除部门： ${row.name}`}
          manageDelLog({message: JSON.stringify(message)})
        })
      })
    },

    // 跨店权限
    handlePermission(row) {
      this.hackPerReset = false
      this.$nextTick(() => {
        this.hackPerReset = true

        this.currentRowData = row
        this.permissionDialogVisible = true
      })
    },
    /**
     * 编辑部门弹出窗口
     * @param action
     */
    handleEditDeptDialog (actionType) {
      if (actionType && actionType === 1) {
        this.editDeptDialogVisible = false
        this.queryDeptListData(true)
      } else if (actionType && actionType === 2) {
        this.editDeptDialogVisible = false
      } else {
        this.$message({
          type: 'info',
          message: '暂不支持此操作'
        })
      }
    },
    /**
     * 跨店权限弹窗
     * @param action
     */
    handlePermissionDialog (action) {
      if (action && action === 1) {
        this.permissionDialogVisible = false
      } else if (action && action === 2) {
        this.permissionDialogVisible = false
      }
    },
    /**
     * 责任盘弹窗
     *@param row 行对象
     **/
    handleResponsibilityDisk(row){
        this.hackReset = false;
        this.$nextTick(()=>{
          this.hackReset = true
          this.discDialogVisible = true
          this.discRowDate = row
        })
    },
    closeDialog(value){
        if(value == 1) this.discDialogVisible = false
    },
    /**
     * 时间格式化函数
     * @param row 行dom对象
     * @param column 列对象
     * @param cellValue 单元格值
     * @returns {string}
     */
    timeFormat (row, column, cellValue) {
      return this.$utils.timeFormat(cellValue)
    },
    /**
     * 查询条件重置
     */
    resetQuery: function () {
      this.$refs['queryForm'].resetFields()
    },
    getCompanyDataSelect: function () {
      let params = Object.assign({},{}, {})
      queryCompanySelectData(params).then((res) => {
        this.companyOpts = res
      }).catch(err => {
        console.log(err)
      })
    },
    getDeptTypeSelect: function () {
      let params = {}
      queryDeptTypeFromEnum().then((res) => {
        if(res){
          this.deptTypeOps = this.$jsonUtils.jsonToArr(res,'id','name')
        }
      }).catch(err => {
        console.log(err)
      })
    }
  },
  mounted () {
    // 挂在页面时调用列表数据读取
    this.queryDeptListData(false)
    this.getDeptTypeSelect()
    this.getCompanyDataSelect()
  }
}
</script>

<style scoped lang="scss">

</style>
